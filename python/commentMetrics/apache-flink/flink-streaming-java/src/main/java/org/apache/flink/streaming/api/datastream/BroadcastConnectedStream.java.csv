# id;timestamp;commentText;codeText;commentWords;codeWords
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process( 			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518008896;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(_			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(inputStream1 instanceof KeyedStream,_				"A KeyedBroadcastProcessFunction can only be used with a keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithKeyedOperator<>(function, Collections.singletonList(broadcastStateDescriptor))__		return transform("Co-Process-Broadcast-Keyed", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,keyed,broadcast,process,function,can,only,be,used,with,a,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,keyed,operator,function,collections,singleton,list,broadcast,state,descriptor,return,transform,co,process,broadcast,keyed,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process( 			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518008932;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(_			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(inputStream1 instanceof KeyedStream,_				"A KeyedBroadcastProcessFunction can only be used with a keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithKeyedOperator<>(function, broadcastStateDescriptors)__		return transform("Co-Process-Broadcast-Keyed", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,keyed,broadcast,process,function,can,only,be,used,with,a,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,keyed,operator,function,broadcast,state,descriptors,return,transform,co,process,broadcast,keyed,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process( 			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518539645;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(_			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(inputStream1 instanceof KeyedStream,_				"A KeyedBroadcastProcessFunction can only be used with a keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast-Keyed", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,keyed,broadcast,process,function,can,only,be,used,with,a,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,keyed,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process( 			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1523545470;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(_			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(inputStream1 instanceof KeyedStream,_				"A KeyedBroadcastProcessFunction can only be used on a keyed stream.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast-Keyed", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,keyed,broadcast,process,function,can,only,be,used,on,a,keyed,stream,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,keyed,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process( 			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1532066767;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(_			final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(inputStream1 instanceof KeyedStream,_				"A KeyedBroadcastProcessFunction can only be used on a keyed stream.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast-Keyed", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,keyed,broadcast,process,function,can,only,be,used,on,a,keyed,stream,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,keyed,out,type,info,operator
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1518008865;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1518008896;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1518008932;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1518539645;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1523545470;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public DataStream<IN1> getFirstInput();1532066767;Returns the non-broadcast {@link DataStream}.__@return The stream which, by convention, is not broadcasted.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,non,broadcast,link,data,stream,return,the,stream,which,by,convention,is,not,broadcasted;public,data,stream,in1,get,first,input,return,input,stream1
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1518008865;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1518008896;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1518008932;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1518539645;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1523545470;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public TypeInformation<IN2> getType2();1532066767;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
BroadcastConnectedStream -> public BroadcastStream<IN2> getSecondInput();1518008932;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,get,second,input,return,input,stream2
BroadcastConnectedStream -> public BroadcastStream<IN2> getSecondInput();1518539645;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,get,second,input,return,input,stream2
BroadcastConnectedStream -> public BroadcastStream<IN2> getSecondInput();1523545470;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,get,second,input,return,input,stream2
BroadcastConnectedStream -> public BroadcastStream<IN2> getSecondInput();1532066767;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,get,second,input,return,input,stream2
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1518008865;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1518008896;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1518008932;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1518539645;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1523545470;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function);1532066767;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(final BroadcastProcessFunction<IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				BroadcastProcessFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,broadcast,process,function,class,0,1,2,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518008865;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used with a non-keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(function, Collections.singletonList(broadcastStateDescriptor))__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,with,a,non,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,function,collections,singleton,list,broadcast,state,descriptor,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518008896;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used with a non-keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(function, Collections.singletonList(broadcastStateDescriptor))__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,with,a,non,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,function,collections,singleton,list,broadcast,state,descriptor,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518008932;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used with a non-keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(function, broadcastStateDescriptors)__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,with,a,non,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,function,broadcast,state,descriptors,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1518539645;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used with a non-keyed stream as the second input.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,with,a,non,keyed,stream,as,the,second,input,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1523545470;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used on a non-keyed stream.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,on,a,non,keyed,stream,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> @PublicEvolving 	public <OUT> SingleOutputStreamOperator<OUT> process( 			final BroadcastProcessFunction<IN1, IN2, OUT> function, 			final TypeInformation<OUT> outTypeInfo);1532066767;Assumes as inputs a {@link BroadcastStream} and a non-keyed {@link DataStream} and applies the given_{@link BroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link BroadcastProcessFunction} that is called for each element in the stream._@param outTypeInfo The type of the output elements._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <OUT> SingleOutputStreamOperator<OUT> process(_			final BroadcastProcessFunction<IN1, IN2, OUT> function,_			final TypeInformation<OUT> outTypeInfo) {__		Preconditions.checkNotNull(function)__		Preconditions.checkArgument(!(inputStream1 instanceof KeyedStream),_				"A BroadcastProcessFunction can only be used on a non-keyed stream.")___		TwoInputStreamOperator<IN1, IN2, OUT> operator =_				new CoBroadcastWithNonKeyedOperator<>(clean(function), broadcastStateDescriptors)__		return transform("Co-Process-Broadcast", outTypeInfo, operator)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,non,keyed,link,data,stream,and,applies,the,given,link,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,out,type,info,the,type,of,the,output,elements,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,out,single,output,stream,operator,out,process,final,broadcast,process,function,in1,in2,out,function,final,type,information,out,out,type,info,preconditions,check,not,null,function,preconditions,check,argument,input,stream1,instanceof,keyed,stream,a,broadcast,process,function,can,only,be,used,on,a,non,keyed,stream,two,input,stream,operator,in1,in2,out,operator,new,co,broadcast,with,non,keyed,operator,clean,function,broadcast,state,descriptors,return,transform,co,process,broadcast,out,type,info,operator
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1518008865;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1518008896;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1518008932;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1518539645;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1523545470;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public TypeInformation<IN1> getType1();1532066767;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
BroadcastConnectedStream -> public BroadcastStream<IN2, K, V> getSecondInput();1518008865;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2, K, V> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,k,v,get,second,input,return,input,stream2
BroadcastConnectedStream -> public BroadcastStream<IN2, K, V> getSecondInput();1518008896;Returns the {@link BroadcastStream}.__@return The stream which, by convention, is the broadcast one.;public BroadcastStream<IN2, K, V> getSecondInput() {_		return inputStream2__	};returns,the,link,broadcast,stream,return,the,stream,which,by,convention,is,the,broadcast,one;public,broadcast,stream,in2,k,v,get,second,input,return,input,stream2
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function);1518008896;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				KeyedBroadcastProcessFunction.class,_				1,_				2,_				3,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,keyed,broadcast,process,function,class,1,2,3,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function);1518008932;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				KeyedBroadcastProcessFunction.class,_				1,_				2,_				3,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,keyed,broadcast,process,function,class,1,2,3,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function);1518539645;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				KeyedBroadcastProcessFunction.class,_				1,_				2,_				3,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,keyed,broadcast,process,function,class,1,2,3,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function);1523545470;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				KeyedBroadcastProcessFunction.class,_				1,_				2,_				3,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,keyed,broadcast,process,function,class,1,2,3,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
BroadcastConnectedStream -> @PublicEvolving 	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function);1532066767;Assumes as inputs a {@link BroadcastStream} and a {@link KeyedStream} and applies the given_{@link KeyedBroadcastProcessFunction} on them, thereby creating a transformed output stream.__@param function The {@link KeyedBroadcastProcessFunction} that is called for each element in the stream._@param <KS> The type of the keys in the keyed stream._@param <OUT> The type of the output elements._@return The transformed {@link DataStream}.;@PublicEvolving_	public <KS, OUT> SingleOutputStreamOperator<OUT> process(final KeyedBroadcastProcessFunction<KS, IN1, IN2, OUT> function) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_				function,_				KeyedBroadcastProcessFunction.class,_				1,_				2,_				3,_				TypeExtractor.NO_INDEX,_				getType1(),_				getType2(),_				Utils.getCallLocationName(),_				true)___		return process(function, outTypeInfo)__	};assumes,as,inputs,a,link,broadcast,stream,and,a,link,keyed,stream,and,applies,the,given,link,keyed,broadcast,process,function,on,them,thereby,creating,a,transformed,output,stream,param,function,the,link,keyed,broadcast,process,function,that,is,called,for,each,element,in,the,stream,param,ks,the,type,of,the,keys,in,the,keyed,stream,param,out,the,type,of,the,output,elements,return,the,transformed,link,data,stream;public,evolving,public,ks,out,single,output,stream,operator,out,process,final,keyed,broadcast,process,function,ks,in1,in2,out,function,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,function,keyed,broadcast,process,function,class,1,2,3,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,function,out,type,info
