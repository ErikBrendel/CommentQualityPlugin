# id;timestamp;commentText;codeText;commentWords;codeWords
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1445418103;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1450122912;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1455486690;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1481632698;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1492569128;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1493195810;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1493195810;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1493195810;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs);1495484544;Verifies that all elements in the collection are non-null, and are of the given class, or_a subclass thereof.__@param elements The collection to check._@param viewedAs The class to which the elements must be assignable to.__@param <OUT> The generic type of the collection to be checked.;public static <OUT> void checkCollection(Collection<OUT> elements, Class<OUT> viewedAs) {_		for (OUT elem : elements) {_			if (elem == null) {_				throw new IllegalArgumentException("The collection contains a null element")__			}__			if (!viewedAs.isAssignableFrom(elem.getClass())) {_				throw new IllegalArgumentException("The elements in the collection are not all subclasses of " +_						viewedAs.getCanonicalName())__			}_		}_	};verifies,that,all,elements,in,the,collection,are,non,null,and,are,of,the,given,class,or,a,subclass,thereof,param,elements,the,collection,to,check,param,viewed,as,the,class,to,which,the,elements,must,be,assignable,to,param,out,the,generic,type,of,the,collection,to,be,checked;public,static,out,void,check,collection,collection,out,elements,class,out,viewed,as,for,out,elem,elements,if,elem,null,throw,new,illegal,argument,exception,the,collection,contains,a,null,element,if,viewed,as,is,assignable,from,elem,get,class,throw,new,illegal,argument,exception,the,elements,in,the,collection,are,not,all,subclasses,of,viewed,as,get,canonical,name
FromElementsFunction -> public int getNumElements();1445418103;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1450122912;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1455486690;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1481632698;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1492569128;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1493195810;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1493195810;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1493195810;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElements();1495484544;Gets the number of elements produced in total by this function.__@return The number of elements produced in total.;public int getNumElements() {_		return numElements__	};gets,the,number,of,elements,produced,in,total,by,this,function,return,the,number,of,elements,produced,in,total;public,int,get,num,elements,return,num,elements
FromElementsFunction -> public int getNumElementsEmitted();1445418103;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1450122912;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1455486690;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1481632698;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1492569128;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1493195810;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1493195810;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1493195810;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
FromElementsFunction -> public int getNumElementsEmitted();1495484544;Gets the number of elements emitted so far.__@return The number of elements emitted so far.;public int getNumElementsEmitted() {_		return numElementsEmitted__	};gets,the,number,of,elements,emitted,so,far,return,the,number,of,elements,emitted,so,far;public,int,get,num,elements,emitted,return,num,elements,emitted
