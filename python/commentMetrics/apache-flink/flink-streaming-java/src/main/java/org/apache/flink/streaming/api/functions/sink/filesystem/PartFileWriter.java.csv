commented;modifiers;parameterAmount;loc;comment;code
false;abstract;2;1;;abstract void write(IN element, long currentTime) throws IOException.
false;;0;3;;RecoverableWriter.ResumeRecoverable persist() throws IOException {     return currentPartStream.persist(). }
false;;0;3;;RecoverableWriter.CommitRecoverable closeForCommit() throws IOException {     return currentPartStream.closeForCommit().getRecoverable(). }
false;;0;5;;void dispose() {     // we can suppress exceptions here, because we do not rely on close() to     // flush or persist any data     IOUtils.closeQuietly(currentPartStream). }
false;;1;3;;void markWrite(long now) {     this.lastUpdateTime = now. }
false;public;0;4;;@Override public BucketID getBucketId() {     return bucketId. }
false;public;0;4;;@Override public long getCreationTime() {     return creationTime. }
false;public;0;4;;@Override public long getSize() throws IOException {     return currentPartStream.getPos(). }
false;public;0;4;;@Override public long getLastUpdateTime() {     return lastUpdateTime. }
true;;4;5;/**  * Used upon recovery from a failure to recover a {@link PartFileWriter writer}.  * @param bucketId the id of the bucket this writer is writing to.  * @param stream the filesystem-specific output stream to use when writing to the filesystem.  * @param resumable the state of the stream we are resurrecting.  * @param creationTime the creation time of the stream.  * @return the recovered {@link PartFileWriter writer}.  * @throws IOException  */ ;/**  * Used upon recovery from a failure to recover a {@link PartFileWriter writer}.  * @param bucketId the id of the bucket this writer is writing to.  * @param stream the filesystem-specific output stream to use when writing to the filesystem.  * @param resumable the state of the stream we are resurrecting.  * @param creationTime the creation time of the stream.  * @return the recovered {@link PartFileWriter writer}.  * @throws IOException  */ PartFileWriter<IN, BucketID> resumeFrom(final BucketID bucketId, final RecoverableFsDataOutputStream stream, final RecoverableWriter.ResumeRecoverable resumable, final long creationTime) throws IOException.
true;;4;5;/**  * Used to create a new {@link PartFileWriter writer}.  * @param bucketId the id of the bucket this writer is writing to.  * @param stream the filesystem-specific output stream to use when writing to the filesystem.  * @param path the part this writer will write to.  * @param creationTime the creation time of the stream.  * @return the new {@link PartFileWriter writer}.  * @throws IOException  */ ;/**  * Used to create a new {@link PartFileWriter writer}.  * @param bucketId the id of the bucket this writer is writing to.  * @param stream the filesystem-specific output stream to use when writing to the filesystem.  * @param path the part this writer will write to.  * @param creationTime the creation time of the stream.  * @return the new {@link PartFileWriter writer}.  * @throws IOException  */ PartFileWriter<IN, BucketID> openNew(final BucketID bucketId, final RecoverableFsDataOutputStream stream, final Path path, final long creationTime) throws IOException.
