commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Extracts a timestamp from an element.  *  * @param element The element that the timestamp is extracted from.  * @param currentTimestamp The current internal timestamp of the element.  * @return The new timestamp.  */ ;/**  * Extracts a timestamp from an element.  *  * @param element The element that the timestamp is extracted from.  * @param currentTimestamp The current internal timestamp of the element.  * @return The new timestamp.  */ long extractTimestamp(T element, long currentTimestamp).
true;;2;1;/**  * Asks the extractor if it wants to emit a watermark now that it has seen the given element.  * This is called right after {@link #extractTimestamp}. With the same element. The method  * can return {@code Long.MIN_VALUE} to indicate that no watermark should be emitted, a value of 0 or  * greater will be emitted as a watermark if it is higher than the last-emitted watermark.  *  * @param element The element that we last saw.  * @param currentTimestamp The current timestamp of the element that we last saw.  * @return {@code Long.MIN_VALUE} if no watermark should be emitted, positive value for  *          emitting this value as a watermark.  */ ;/**  * Asks the extractor if it wants to emit a watermark now that it has seen the given element.  * This is called right after {@link #extractTimestamp}. With the same element. The method  * can return {@code Long.MIN_VALUE} to indicate that no watermark should be emitted, a value of 0 or  * greater will be emitted as a watermark if it is higher than the last-emitted watermark.  *  * @param element The element that we last saw.  * @param currentTimestamp The current timestamp of the element that we last saw.  * @return {@code Long.MIN_VALUE} if no watermark should be emitted, positive value for  *          emitting this value as a watermark.  */ long extractWatermark(T element, long currentTimestamp).
true;;0;1;/**  * Returns the current watermark. This is periodically called by the system to determine  * the current watermark and forward it.  *  * @see org.apache.flink.streaming.api.watermark.Watermark  */ ;/**  * Returns the current watermark. This is periodically called by the system to determine  * the current watermark and forward it.  *  * @see org.apache.flink.streaming.api.watermark.Watermark  */ long getCurrentWatermark().
