commented;modifiers;parameterAmount;loc;comment;code
false;public;4;5;;@Override public TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx) throws Exception {     TriggerResult triggerResult = nestedTrigger.onElement(element, timestamp, window, ctx).     return triggerResult.isFire() ? TriggerResult.FIRE_AND_PURGE : triggerResult. }
false;public;3;5;;@Override public TriggerResult onEventTime(long time, W window, TriggerContext ctx) throws Exception {     TriggerResult triggerResult = nestedTrigger.onEventTime(time, window, ctx).     return triggerResult.isFire() ? TriggerResult.FIRE_AND_PURGE : triggerResult. }
false;public;3;5;;@Override public TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception {     TriggerResult triggerResult = nestedTrigger.onProcessingTime(time, window, ctx).     return triggerResult.isFire() ? TriggerResult.FIRE_AND_PURGE : triggerResult. }
false;public;2;4;;@Override public void clear(W window, TriggerContext ctx) throws Exception {     nestedTrigger.clear(window, ctx). }
false;public;0;4;;@Override public boolean canMerge() {     return nestedTrigger.canMerge(). }
false;public;2;4;;@Override public void onMerge(W window, OnMergeContext ctx) throws Exception {     nestedTrigger.onMerge(window, ctx). }
false;public;0;4;;@Override public String toString() {     return "PurgingTrigger(" + nestedTrigger.toString() + ")". }
true;public,static;1;3;/**  * Creates a new purging trigger from the given {@code Trigger}.  *  * @param nestedTrigger The trigger that is wrapped by this purging trigger  */ ;/**  * Creates a new purging trigger from the given {@code Trigger}.  *  * @param nestedTrigger The trigger that is wrapped by this purging trigger  */ public static <T, W extends Window> PurgingTrigger<T, W> of(Trigger<T, W> nestedTrigger) {     return new PurgingTrigger<>(nestedTrigger). }
false;public;0;4;;@VisibleForTesting public Trigger<T, W> getNestedTrigger() {     return nestedTrigger. }
