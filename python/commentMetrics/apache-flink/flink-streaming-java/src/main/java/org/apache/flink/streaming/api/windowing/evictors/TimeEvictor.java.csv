# id;timestamp;commentText;codeText;commentWords;codeWords
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1479200724;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements);1495484544;Returns true if the first element in the Iterable of {@link TimestampedValue} has a timestamp.;private boolean hasTimestamp(Iterable<TimestampedValue<Object>> elements) {_		Iterator<TimestampedValue<Object>> it = elements.iterator()__		if (it.hasNext()) {_			return it.next().hasTimestamp()__		}_		return false__	};returns,true,if,the,first,element,in,the,iterable,of,link,timestamped,value,has,a,timestamp;private,boolean,has,timestamp,iterable,timestamped,value,object,elements,iterator,timestamped,value,object,it,elements,iterator,if,it,has,next,return,it,next,has,timestamp,return,false
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1479200724;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(),doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(),doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(),doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(), doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(), doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter);1495484544;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before/after the window function based on the value of doEvictAfter.__@param windowSize The amount of time for which to keep elements._@param doEvictAfter Whether eviction is done after window function.;public static <W extends Window> TimeEvictor<W> of(Time windowSize, boolean doEvictAfter) {_		return new TimeEvictor<>(windowSize.toMilliseconds(), doEvictAfter)__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,after,the,window,function,based,on,the,value,of,do,evict,after,param,window,size,the,amount,of,time,for,which,to,keep,elements,param,do,evict,after,whether,eviction,is,done,after,window,function;public,static,w,extends,window,time,evictor,w,of,time,window,size,boolean,do,evict,after,return,new,time,evictor,window,size,to,milliseconds,do,evict,after
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1479200724;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1493195810;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements);1495484544;@param elements The elements currently in the pane._@return The maximum value of timestamp among the elements.;private long getMaxTimestamp(Iterable<TimestampedValue<Object>> elements) {_		long currentTime = Long.MIN_VALUE__		for (Iterator<TimestampedValue<Object>> iterator = elements.iterator()_ iterator.hasNext()_){_			TimestampedValue<Object> record = iterator.next()__			currentTime = Math.max(currentTime, record.getTimestamp())__		}_		return currentTime__	};param,elements,the,elements,currently,in,the,pane,return,the,maximum,value,of,timestamp,among,the,elements;private,long,get,max,timestamp,iterable,timestamped,value,object,elements,long,current,time,long,for,iterator,timestamped,value,object,iterator,elements,iterator,iterator,has,next,timestamped,value,object,record,iterator,next,current,time,math,max,current,time,record,get,timestamp,return,current,time
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1453742891;Creates a {@code TimeEvictor} that keeps the given number of elements.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1455486690;Creates a {@code TimeEvictor} that keeps the given number of elements.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1471971066;Creates a {@code TimeEvictor} that keeps the given number of elements.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1479200724;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1493195810;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
TimeEvictor -> public static <W extends Window> TimeEvictor<W> of(Time windowSize);1495484544;Creates a {@code TimeEvictor} that keeps the given number of elements._Eviction is done before the window function.__@param windowSize The amount of time for which to keep elements.;public static <W extends Window> TimeEvictor<W> of(Time windowSize) {_		return new TimeEvictor<>(windowSize.toMilliseconds())__	};creates,a,code,time,evictor,that,keeps,the,given,number,of,elements,eviction,is,done,before,the,window,function,param,window,size,the,amount,of,time,for,which,to,keep,elements;public,static,w,extends,window,time,evictor,w,of,time,window,size,return,new,time,evictor,window,size,to,milliseconds
