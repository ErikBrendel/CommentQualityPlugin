# id;timestamp;commentText;codeText;commentWords;codeWords
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1445418103;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1446112342;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1452526242;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1454679829;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1454933011;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1454933011;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1455101486;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis);1456247173;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T, O> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,o,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1472663071;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0, "The maximum parallelism must be greater than 0.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1485181339;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0, "The maximum parallelism must be greater than 0.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1485269495;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1488304750;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1488304750;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1489671807;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1489819457;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1489819457;Sets the maximum parallelism of this operator.__The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1495484544;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1514902843;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1517393323;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1525452496;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1525933573;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism);1526630738;Sets the maximum parallelism of this operator.__<p>The maximum parallelism specifies the upper bound for dynamic scaling. It also defines the_number of key groups used for partitioned state.__@param maxParallelism Maximum parallelism_@return The operator with set maximum parallelism;@PublicEvolving_	public SingleOutputStreamOperator<T> setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0,_				"The maximum parallelism must be greater than 0.")___		Preconditions.checkArgument(canBeParallel() || maxParallelism == 1,_				"The maximum parallelism of non parallel operator must be 1.")___		transformation.setMaxParallelism(maxParallelism)___		return this__	};sets,the,maximum,parallelism,of,this,operator,p,the,maximum,parallelism,specifies,the,upper,bound,for,dynamic,scaling,it,also,defines,the,number,of,key,groups,used,for,partitioned,state,param,max,parallelism,maximum,parallelism,return,the,operator,with,set,maximum,parallelism;public,evolving,public,single,output,stream,operator,t,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,the,maximum,parallelism,must,be,greater,than,0,preconditions,check,argument,can,be,parallel,max,parallelism,1,the,maximum,parallelism,of,non,parallel,operator,must,be,1,transformation,set,max,parallelism,max,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1456778239;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1456848177;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1471362593;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1472663071;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1485181339;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1485269495;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1488304750;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1488304750;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1489671807;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1489819457;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1489819457;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1493195810;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1493195810;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1493195810;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1495484544;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1514902843;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1517393323;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1525452496;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1525933573;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> name(String name);1526630738;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1456778239;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1456848177;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1471362593;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1472663071;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1485181339;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1485269495;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1488304750;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1488304750;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1489671807;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1489819457;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1489819457;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1493195810;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1493195810;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1493195810;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1495484544;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1514902843;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1517393323;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1525452496;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1525933573;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> uid(String uid);1526630738;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1456778239;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1471362593;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1472663071;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1485181339;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1485269495;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1489671807;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")__		_		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1495484544;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1514902843;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1517393323;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1525933573;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo);1526630738;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo type information as a return type hint_@return This operator with a given return type hint.;public SingleOutputStreamOperator<T> returns(TypeInformation<T> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		transformation.setOutputType(typeInfo)__		return this__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,single,output,stream,operator,t,returns,type,information,t,type,info,require,non,null,type,info,type,information,must,not,be,null,transformation,set,output,type,type,info,return,this
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1489819457;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag){_		sideOutputTag = clean(sideOutputTag)__		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), requireNonNull(sideOutputTag))__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,side,output,tag,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,require,non,null,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1489819457;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1493195810;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1493195810;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1493195810;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1495484544;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1514902843;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1517393323;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1525452496;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1525933573;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		if (wasSplitApplied) {_			throw new UnsupportedOperationException("getSideOutput() and split() may not be called on the same DataStream. " +_				"As a work-around, please add a no-op map function before the split() call.")__		}__		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,if,was,split,applied,throw,new,unsupported,operation,exception,get,side,output,and,split,may,not,be,called,on,the,same,data,stream,as,a,work,around,please,add,a,no,op,map,function,before,the,split,call,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1526630738;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@see org.apache.flink.streaming.api.functions.ProcessFunction.Context#output(OutputTag, Object);public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		if (wasSplitApplied) {_			throw new UnsupportedOperationException("getSideOutput() and split() may not be called on the same DataStream. " +_				"As a work-around, please add a no-op map function before the split() call.")__		}__		sideOutputTag = clean(requireNonNull(sideOutputTag))___		_		sideOutputTag = new OutputTag<X>(sideOutputTag.getId(), sideOutputTag.getTypeInfo())___		TypeInformation<?> type = requestedSideOutputs.get(sideOutputTag)__		if (type != null && !type.equals(sideOutputTag.getTypeInfo())) {_			throw new UnsupportedOperationException("A side output with a matching id was " +_					"already requested with a different type. This is not allowed, side output " +_					"ids need to be unique.")__		}__		requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo())___		SideOutputTransformation<X> sideOutputTransformation = new SideOutputTransformation<>(this.getTransformation(), sideOutputTag)__		return new DataStream<>(this.getExecutionEnvironment(), sideOutputTransformation)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,see,org,apache,flink,streaming,api,functions,process,function,context,output,output,tag,object;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,if,was,split,applied,throw,new,unsupported,operation,exception,get,side,output,and,split,may,not,be,called,on,the,same,data,stream,as,a,work,around,please,add,a,no,op,map,function,before,the,split,call,side,output,tag,clean,require,non,null,side,output,tag,side,output,tag,new,output,tag,x,side,output,tag,get,id,side,output,tag,get,type,info,type,information,type,requested,side,outputs,get,side,output,tag,if,type,null,type,equals,side,output,tag,get,type,info,throw,new,unsupported,operation,exception,a,side,output,with,a,matching,id,was,already,requested,with,a,different,type,this,is,not,allowed,side,output,ids,need,to,be,unique,requested,side,outputs,put,side,output,tag,side,output,tag,get,type,info,side,output,transformation,x,side,output,transformation,new,side,output,transformation,this,get,transformation,side,output,tag,return,new,data,stream,this,get,execution,environment,side,output,transformation
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1456778239;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1456848177;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1471362593;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		if (nonParallel && parallelism > 1) {_			throw new IllegalArgumentException("The parallelism of non parallel operator must be 1.")__		}_		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,if,non,parallel,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1472663071;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		if (nonParallel && parallelism > 1) {_			throw new IllegalArgumentException("The parallelism of non parallel operator must be 1.")__		}_		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,if,non,parallel,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1485181339;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		if (nonParallel && parallelism > 1) {_			throw new IllegalArgumentException("The parallelism of non parallel operator must be 1.")__		}_		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,if,non,parallel,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1485269495;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1489671807;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1489819457;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1489819457;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1493195810;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1493195810;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1493195810;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1495484544;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0,_				"The parallelism of an operator must be at least 1.")___		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,the,parallelism,of,an,operator,must,be,at,least,1,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1514902843;Sets the parallelism for this operator.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1517393323;Sets the parallelism for this operator.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1525452496;Sets the parallelism for this operator.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1525933573;Sets the parallelism for this operator.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setParallelism(int parallelism);1526630738;Sets the parallelism for this operator.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(canBeParallel() || parallelism == 1,_				"The parallelism of non parallel operator must be 1.")___		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,set,parallelism,int,parallelism,preconditions,check,argument,can,be,parallel,parallelism,1,the,parallelism,of,non,parallel,operator,must,be,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> disableChaining();1455101486;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> disableChaining();1456247173;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1456848177;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1471362593;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1472663071;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1485181339;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1485269495;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1488304750;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1488304750;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1489671807;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1489819457;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1489819457;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1493195810;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1493195810;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1493195810;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1495484544;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1514902843;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> @Deprecated 	@PublicEvolving 	public SingleOutputStreamOperator<T> returns(String typeInfoString);1517393323;Adds a type information hint about the return type of this operator.__<p>Type hints are important in cases where the Java compiler throws away generic type_information necessary for efficient execution.__<p>This method takes a type information string that will be parsed. A type information string_can contain the following types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public SingleOutputStreamOperator<T> returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,single,output,stream,operator,t,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public String getName();1445418103;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1446112342;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1452526242;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1454679829;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1454933011;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1454933011;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1455101486;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1456247173;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1456778239;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1456848177;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1471362593;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1472663071;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1485181339;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1485269495;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1488304750;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1488304750;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1489671807;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1489819457;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1489819457;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1493195810;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1493195810;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1493195810;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1495484544;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1514902843;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1517393323;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1525452496;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1525933573;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> public String getName();1526630738;Gets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return Name of the stream.;public String getName() {_		return transformation.getName()__	};gets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,name,of,the,stream;public,string,get,name,return,transformation,get,name
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489819457;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489819457;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1495484544;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1514902843;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1517393323;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1525452496;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1525933573;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1526630738;Sets the minimum and preferred resources for this operator, and the lower and upper resource limits will_be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for this operator._@param preferredResources The preferred resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,operator,and,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,operator,param,preferred,resources,the,preferred,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1445418103;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1452526242;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1455101486;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public O returns(TypeInformation<T> typeInfo);1456247173;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<T> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		transformation.setOutputType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,t,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,transformation,set,output,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> disableChaining();1445418103;Turns off chaining for this operator so thread co-location will not be_used as an optimization. </p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> disableChaining();1446112342;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> disableChaining();1452526242;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1455101486;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1456247173;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1456778239;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1456848177;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1471362593;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1472663071;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1485181339;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1485269495;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1488304750;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1488304750;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1489671807;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1489819457;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1489819457;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1493195810;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1493195810;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1493195810;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1495484544;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1514902843;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1517393323;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1525452496;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1525933573;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> startNewChain();1526630738;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1485181339;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1485269495;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1489671807;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1489819457;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1489819457;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1495484544;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1514902843;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1517393323;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1525452496;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1525933573;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> setUidHash(String uidHash);1526630738;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID,_which is shown in the logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public SingleOutputStreamOperator<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,single,output,stream,operator,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewChain();1454679829;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;experimental,public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewChain();1454933011;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;experimental,public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewChain();1454933011;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;experimental,public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> disableChaining();1454679829;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@Experimental_	public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;experimental,public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> disableChaining();1454933011;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@Experimental_	public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;experimental,public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> disableChaining();1454933011;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@Experimental_	public SingleOutputStreamOperator<T, O> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;experimental,public,single,output,stream,operator,t,o,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> isolateResources();1454679829;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator._<p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;experimental,public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> isolateResources();1454933011;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator._<p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;experimental,public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> isolateResources();1454933011;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator._<p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;experimental,public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> uid(String uid);1455101486;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T, O> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,o,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> uid(String uid);1456247173;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public SingleOutputStreamOperator<T, O> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,single,output,stream,operator,t,o,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewChain();1445418103;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewChain();1446112342;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewChain();1452526242;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewResourceGroup();1454679829;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise._<p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;experimental,public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewResourceGroup();1454933011;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise._<p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;experimental,public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> startNewResourceGroup();1454933011;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise._<p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;@Experimental_	public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;experimental,public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1445418103;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1452526242;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1455101486;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<T> typeClass);1456247173;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<T> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<T> ti = (TypeInformation<T>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,t,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,t,ti,type,information,t,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1471362593;Sets the parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1472663071;Sets the parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1485181339;Sets the parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1485269495;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1488304750;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1488304750;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1489671807;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1489819457;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1489819457;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1493195810;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1493195810;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1493195810;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1495484544;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1514902843;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1517393323;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1525452496;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1525933573;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> forceNonParallel();1526630738;Sets the parallelism and maximum parallelism of this operator to one._And mark this operator cannot set a non-1 degree of parallelism.__@return The operator with only one parallelism.;@PublicEvolving_	public SingleOutputStreamOperator<T> forceNonParallel() {_		transformation.setParallelism(1)__		transformation.setMaxParallelism(1)__		nonParallel = true__		return this__	};sets,the,parallelism,and,maximum,parallelism,of,this,operator,to,one,and,mark,this,operator,cannot,set,a,non,1,degree,of,parallelism,return,the,operator,with,only,one,parallelism;public,evolving,public,single,output,stream,operator,t,force,non,parallel,transformation,set,parallelism,1,transformation,set,max,parallelism,1,non,parallel,true,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1456778239;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1456848177;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1471362593;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1472663071;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1485181339;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1485269495;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1488304750;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1488304750;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1489671807;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1489819457;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1489819457;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1493195810;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1493195810;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1493195810;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1495484544;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1514902843;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1517393323;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1525452496;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1525933573;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy);1526630738;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@PublicEvolving_	private SingleOutputStreamOperator<T> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;public,evolving,private,single,output,stream,operator,t,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1456778239;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1456848177;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1471362593;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1472663071;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1485181339;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1485269495;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1488304750;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1488304750;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1489671807;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1489819457;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1489819457;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p> Chaining can be turned off for the whole_job by {@link StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1493195810;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1493195810;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1493195810;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1495484544;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1514902843;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1517393323;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1525452496;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1525933573;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> disableChaining();1526630738;Turns off chaining for this operator so thread co-location will not be used as an_optimization.__<p>Chaining can be turned off for the whole job by_{@link StreamExecutionEnvironment#disableOperatorChaining()} however it is not advised for_performance considerations.__@return The operator with chaining disabled;@PublicEvolving_	public SingleOutputStreamOperator<T> disableChaining() {_		return setChainingStrategy(ChainingStrategy.NEVER)__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,operator,with,chaining,disabled;public,evolving,public,single,output,stream,operator,t,disable,chaining,return,set,chaining,strategy,chaining,strategy,never
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1445418103;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1446112342;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1452526242;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1456778239;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1456848177;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1471362593;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1472663071;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1485181339;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1485269495;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1489671807;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1489819457;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1489819457;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1495484544;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1514902843;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1517393323;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1525452496;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1525933573;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup);1526630738;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public SingleOutputStreamOperator<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,single,output,stream,operator,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1471362593;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1472663071;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1485181339;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1485269495;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1489671807;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1495484544;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1514902843;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1517393323;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1525933573;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint);1526630738;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataStream<Tuple2<String, Double>> result =_stream.flatMap(new FunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public SingleOutputStreamOperator<T> returns(TypeHint<T> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,stream,tuple2,string,double,result,stream,flat,map,new,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,single,output,stream,operator,t,returns,type,hint,t,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1445418103;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1446112342;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1452526242;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1454679829;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1454933011;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1454933011;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1455101486;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> name(String name);1456247173;Sets the name of the current data stream. This name is_used by the visualization and logging during runtime.__@return The named operator.;public SingleOutputStreamOperator<T, O> name(String name){_		transformation.setName(name)__		return this__	};sets,the,name,of,the,current,data,stream,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,operator;public,single,output,stream,operator,t,o,name,string,name,transformation,set,name,name,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewResourceGroup();1445418103;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise. </p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewResourceGroup();1446112342;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise._<p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> startNewResourceGroup();1452526242;By default all operators in a streaming job share the same resource_group. Each resource group takes as many task manager slots as the_maximum parallelism operator in that group. Task chaining is only_possible within one resource group. By calling this method, this_operators starts a new resource group and all subsequent operators will_be added to this group unless specified otherwise._<p> Please note that_local executions have by default as many available task slots as the_environment parallelism, so in order to start a new resource group the_degree of parallelism for the operators must be decreased from the_default.__@return The operator as a part of a new resource group.;public SingleOutputStreamOperator<T, O> startNewResourceGroup() {_		transformation.setResourceStrategy(ResourceStrategy.NEWGROUP)__		return this__	};by,default,all,operators,in,a,streaming,job,share,the,same,resource,group,each,resource,group,takes,as,many,task,manager,slots,as,the,maximum,parallelism,operator,in,that,group,task,chaining,is,only,possible,within,one,resource,group,by,calling,this,method,this,operators,starts,a,new,resource,group,and,all,subsequent,operators,will,be,added,to,this,group,unless,specified,otherwise,p,please,note,that,local,executions,have,by,default,as,many,available,task,slots,as,the,environment,parallelism,so,in,order,to,start,a,new,resource,group,the,degree,of,parallelism,for,the,operators,must,be,decreased,from,the,default,return,the,operator,as,a,part,of,a,new,resource,group;public,single,output,stream,operator,t,o,start,new,resource,group,transformation,set,resource,strategy,resource,strategy,newgroup,return,this
SingleOutputStreamOperator -> @Experimental 	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1454679829;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@Experimental_	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;experimental,private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @Experimental 	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1454933011;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@Experimental_	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;experimental,private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> @Experimental 	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy);1454933011;Sets the {@link ChainingStrategy} for the given operator affecting the_way operators will possibly be co-located on the same thread for_increased performance.__@param strategy_The selected {@link ChainingStrategy}_@return The operator with the modified chaining strategy;@Experimental_	private SingleOutputStreamOperator<T, O> setChainingStrategy(ChainingStrategy strategy) {_		this.transformation.setChainingStrategy(strategy)__		return this__	};sets,the,link,chaining,strategy,for,the,given,operator,affecting,the,way,operators,will,possibly,be,co,located,on,the,same,thread,for,increased,performance,param,strategy,the,selected,link,chaining,strategy,return,the,operator,with,the,modified,chaining,strategy;experimental,private,single,output,stream,operator,t,o,set,chaining,strategy,chaining,strategy,strategy,this,transformation,set,chaining,strategy,strategy,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1489671807;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1489819457;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1489819457;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1493195810;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1493195810;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1493195810;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1495484544;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1514902843;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1517393323;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1525452496;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1525933573;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> private SingleOutputStreamOperator<T> setResources(ResourceSpec resources);1526630738;Sets the resources for this operator, the minimum and preferred resources are the same by default.__@param resources The resources for this operator._@return The operator with set minimum and preferred resources.;private SingleOutputStreamOperator<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,operator,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,operator,return,the,operator,with,set,minimum,and,preferred,resources;private,single,output,stream,operator,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> startNewChain();1455101486;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @PublicEvolving 	public SingleOutputStreamOperator<T, O> startNewChain();1456247173;Starts a new task chain beginning at this operator. This operator will_not be chained (thread co-located for increased performance) to any_previous tasks even if possible.__@return The operator with chaining set.;@PublicEvolving_	public SingleOutputStreamOperator<T, O> startNewChain() {_		return setChainingStrategy(ChainingStrategy.HEAD)__	};starts,a,new,task,chain,beginning,at,this,operator,this,operator,will,not,be,chained,thread,co,located,for,increased,performance,to,any,previous,tasks,even,if,possible,return,the,operator,with,chaining,set;public,evolving,public,single,output,stream,operator,t,o,start,new,chain,return,set,chaining,strategy,chaining,strategy,head
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> uid(String uid);1454679829;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@Experimental_	public SingleOutputStreamOperator<T, O> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;experimental,public,single,output,stream,operator,t,o,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> uid(String uid);1454933011;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@Experimental_	public SingleOutputStreamOperator<T, O> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;experimental,public,single,output,stream,operator,t,o,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> @Experimental 	public SingleOutputStreamOperator<T, O> uid(String uid);1454933011;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@Experimental_	public SingleOutputStreamOperator<T, O> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;experimental,public,single,output,stream,operator,t,o,uid,string,uid,transformation,set,uid,uid,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1445418103;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1446112342;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1452526242;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1454679829;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1454933011;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1454933011;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1455101486;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> setParallelism(int parallelism);1456247173;Sets the parallelism for this operator. The degree must be 1 or more.__@param parallelism_The parallelism for this operator._@return The operator with set parallelism.;public SingleOutputStreamOperator<T, O> setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}__		transformation.setParallelism(parallelism)___		return this__	};sets,the,parallelism,for,this,operator,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,operator,return,the,operator,with,set,parallelism;public,single,output,stream,operator,t,o,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,transformation,set,parallelism,parallelism,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1471362593;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1472663071;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1485181339;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1485269495;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1488304750;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1489671807;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1489819457;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1493195810;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1495484544;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1514902843;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1517393323;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1525933573;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> returns(Class<T> typeClass);1526630738;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public SingleOutputStreamOperator<T> returns(Class<T> typeClass) {_		requireNonNull(typeClass, "type class must not be null.")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,single,output,stream,operator,t,returns,class,t,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> isolateResources();1445418103;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator </p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> isolateResources();1446112342;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator._<p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T, O> isolateResources();1452526242;Isolates the operator in its own resource group. This will cause the_operator to grab as many task slots as its degree of parallelism. If_there are no free resources available, the job will fail to start. It_also disables chaining for this operator._<p>All subsequent operators are_assigned to the default resource group.__@return The operator with isolated resource group.;public SingleOutputStreamOperator<T, O> isolateResources() {_		transformation.setResourceStrategy(ResourceStrategy.ISOLATE)__		return this__	};isolates,the,operator,in,its,own,resource,group,this,will,cause,the,operator,to,grab,as,many,task,slots,as,its,degree,of,parallelism,if,there,are,no,free,resources,available,the,job,will,fail,to,start,it,also,disables,chaining,for,this,operator,p,all,subsequent,operators,are,assigned,to,the,default,resource,group,return,the,operator,with,isolated,resource,group;public,single,output,stream,operator,t,o,isolate,resources,transformation,set,resource,strategy,resource,strategy,isolate,return,this
SingleOutputStreamOperator -> public O returns(String typeInfoString);1445418103;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1452526242;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1454933011;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1455101486;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public O returns(String typeInfoString);1456247173;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<T>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,t,parse,type,info,string
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1456778239;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1456848177;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1471362593;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1472663071;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1485181339;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1485269495;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1488304750;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1488304750;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1489671807;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1489819457;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1489819457;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1493195810;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1493195810;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1493195810;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1495484544;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1514902843;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1517393323;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1525452496;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1525933573;Sets the maximum time frequency (ms) for the flushing of the output_buffer. By default the output buffers flush only when they are full.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,maximum,time,frequency,ms,for,the,flushing,of,the,output,buffer,by,default,the,output,buffers,flush,only,when,they,are,full,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,transformation,set,buffer,timeout,timeout,millis,return,this
SingleOutputStreamOperator -> public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis);1526630738;Sets the buffering timeout for data produced by this operation._The timeout defines how long data may linger in a partially full buffer_before being sent over the network.__<p>Lower timeouts lead to lower tail latencies, but may affect throughput._Timeouts of 1 ms still sustain high throughput, even for jobs with high parallelism.__<p>A value of '-1' means that the default buffer timeout should be used. A value_of '0' indicates that no buffering should happen, and all records/events should be_immediately sent through the network, without additional buffering.__@param timeoutMillis_The maximum time between two output flushes._@return The operator with buffer timeout set.;public SingleOutputStreamOperator<T> setBufferTimeout(long timeoutMillis) {_		checkArgument(timeoutMillis >= -1, "timeout must be >= -1")__		transformation.setBufferTimeout(timeoutMillis)__		return this__	};sets,the,buffering,timeout,for,data,produced,by,this,operation,the,timeout,defines,how,long,data,may,linger,in,a,partially,full,buffer,before,being,sent,over,the,network,p,lower,timeouts,lead,to,lower,tail,latencies,but,may,affect,throughput,timeouts,of,1,ms,still,sustain,high,throughput,even,for,jobs,with,high,parallelism,p,a,value,of,1,means,that,the,default,buffer,timeout,should,be,used,a,value,of,0,indicates,that,no,buffering,should,happen,and,all,records,events,should,be,immediately,sent,through,the,network,without,additional,buffering,param,timeout,millis,the,maximum,time,between,two,output,flushes,return,the,operator,with,buffer,timeout,set;public,single,output,stream,operator,t,set,buffer,timeout,long,timeout,millis,check,argument,timeout,millis,1,timeout,must,be,1,transformation,set,buffer,timeout,timeout,millis,return,this
