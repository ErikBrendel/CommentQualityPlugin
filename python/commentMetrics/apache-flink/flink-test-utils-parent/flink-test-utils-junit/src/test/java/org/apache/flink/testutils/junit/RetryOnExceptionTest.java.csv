commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@AfterClass public static void verify() {     assertEquals(NUMBER_OF_RUNS + 1, runsForTestWithMatchingException).     assertEquals(NUMBER_OF_RUNS + 1, runsForTestWithSubclassException).     assertEquals(1, runsForSuccessfulTest).     assertEquals(2, runsForPassAfterOneFailure). }
false;public;0;5;;@Test @RetryOnException(times = NUMBER_OF_RUNS, exception = IllegalArgumentException.class) public void testSuccessfulTest() {     runsForSuccessfulTest++. }
false;public;0;8;;@Test @RetryOnException(times = NUMBER_OF_RUNS, exception = IllegalArgumentException.class) public void testMatchingException() {     runsForTestWithMatchingException++.     if (runsForTestWithMatchingException <= NUMBER_OF_RUNS) {         throw new IllegalArgumentException().     } }
false;public;0;8;;@Test @RetryOnException(times = NUMBER_OF_RUNS, exception = RuntimeException.class) public void testSubclassException() {     runsForTestWithSubclassException++.     if (runsForTestWithSubclassException <= NUMBER_OF_RUNS) {         throw new IllegalArgumentException().     } }
false;public;0;8;;@Test @RetryOnException(times = NUMBER_OF_RUNS, exception = IllegalArgumentException.class) public void testPassAfterOneFailure() {     runsForPassAfterOneFailure++.     if (runsForPassAfterOneFailure == 1) {         throw new IllegalArgumentException().     } }
