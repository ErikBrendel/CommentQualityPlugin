commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * This method needs to be overwritten to contain the main work logic.  * It takes the role of {@link Thread#run()}, but should propagate exceptions.  *  * @throws Exception The exceptions thrown here will be re-thrown in the {@link #sync()} method.  */ ;/**  * This method needs to be overwritten to contain the main work logic.  * It takes the role of {@link Thread#run()}, but should propagate exceptions.  *  * @throws Exception The exceptions thrown here will be re-thrown in the {@link #sync()} method.  */ public abstract void go() throws Exception.
true;public,final;0;9;/**  * This method is final - thread work should go into the {@link #go()} method instead.  */ ;// ------------------------------------------------------------------------ /**  * This method is final - thread work should go into the {@link #go()} method instead.  */ @Override public final void run() {     try {         go().     } catch (Throwable t) {         error = t.     } }
true;public;0;3;/**  * Waits until the thread is completed and checks whether any error occurred during  * the execution.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ ;/**  * Waits until the thread is completed and checks whether any error occurred during  * the execution.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ public void sync() throws Exception {     sync(0). }
true;public;1;4;/**  * Waits with timeout until the thread is completed and checks whether any error  * occurred during the execution. In case of timeout an {@link Exception} is thrown.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ ;/**  * Waits with timeout until the thread is completed and checks whether any error  * occurred during the execution. In case of timeout an {@link Exception} is thrown.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ public void sync(long timeout) throws Exception {     trySync(timeout).     checkFinished(). }
true;public;1;4;/**  * Waits with timeout until the thread is completed and checks whether any error  * occurred during the execution.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ ;/**  * Waits with timeout until the thread is completed and checks whether any error  * occurred during the execution.  *  * <p>This method blocks like {@link #join()}, but performs an additional check for  * exceptions thrown from the {@link #go()} method.  */ public void trySync(long timeout) throws Exception {     join(timeout).     checkError(). }
false;private;0;14;;private void checkError() throws Exception {     // propagate the error     if (error != null) {         if (error instanceof Error) {             throw (Error) error.         } else if (error instanceof Exception) {             throw (Exception) error.         } else {             throw new Exception(error.getMessage(), error).         }     } }
false;private;0;8;;private void checkFinished() throws Exception {     if (getState() != State.TERMINATED) {         throw new Exception(String.format("%s[name = %s] has not finished!", this.getClass().getSimpleName(), getName())).     } }
