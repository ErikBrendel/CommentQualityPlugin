commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Checks whether S3 test credentials are available in the environment variables  * of this JVM.  */ ;// ------------------------------------------------------------------------ /**  * Checks whether S3 test credentials are available in the environment variables  * of this JVM.  */ public static boolean credentialsAvailable() {     return S3_TEST_BUCKET != null && S3_TEST_ACCESS_KEY != null && S3_TEST_SECRET_KEY != null. }
true;public,static;0;3;/**  * Checks whether credentials are available in the environment variables of this JVM.  * If not, throws an {@link AssumptionViolatedException} which causes JUnit tests to be  * skipped.  */ ;/**  * Checks whether credentials are available in the environment variables of this JVM.  * If not, throws an {@link AssumptionViolatedException} which causes JUnit tests to be  * skipped.  */ public static void assumeCredentialsAvailable() {     Assume.assumeTrue("No S3 credentials available in this test's environment", credentialsAvailable()). }
true;public,static;0;8;/**  * Gets the S3 Access Key.  *  * <p>This method throws an exception if the key is not available. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ ;/**  * Gets the S3 Access Key.  *  * <p>This method throws an exception if the key is not available. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ public static String getS3AccessKey() {     if (S3_TEST_ACCESS_KEY != null) {         return S3_TEST_ACCESS_KEY.     } else {         throw new IllegalStateException("S3 test access key not available").     } }
true;public,static;0;8;/**  * Gets the S3 Secret Key.  *  * <p>This method throws an exception if the key is not available. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ ;/**  * Gets the S3 Secret Key.  *  * <p>This method throws an exception if the key is not available. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ public static String getS3SecretKey() {     if (S3_TEST_SECRET_KEY != null) {         return S3_TEST_SECRET_KEY.     } else {         throw new IllegalStateException("S3 test secret key not available").     } }
true;public,static;0;3;/**  * Gets the URI for the path under which all tests should put their data.  *  * <p>This method throws an exception if the bucket was not configured. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ ;/**  * Gets the URI for the path under which all tests should put their data.  *  * <p>This method throws an exception if the bucket was not configured. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ public static String getTestBucketUri() {     return getTestBucketUriWithScheme("s3"). }
true;public,static;1;8;/**  * Gets the URI for the path under which all tests should put their data.  *  * <p>This method throws an exception if the bucket was not configured. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ ;/**  * Gets the URI for the path under which all tests should put their data.  *  * <p>This method throws an exception if the bucket was not configured. Tests should  * use {@link #assumeCredentialsAvailable()} to skip tests when credentials are not  * available.  */ public static String getTestBucketUriWithScheme(String scheme) {     if (S3_TEST_BUCKET != null) {         return scheme + "://" + S3_TEST_BUCKET + "/temp/".     } else {         throw new IllegalStateException("S3 test bucket not available").     } }
