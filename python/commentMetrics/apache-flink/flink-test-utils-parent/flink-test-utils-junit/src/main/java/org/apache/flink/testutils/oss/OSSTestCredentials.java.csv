commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;// ------------------------------------------------------------------------ public static boolean credentialsAvailable() {     return ENDPOINT != null && BUCKET != null && ACCESS_KEY != null && SECRET_KEY != null. }
false;public,static;0;3;;public static void assumeCredentialsAvailable() {     Assume.assumeTrue("No OSS credentials available in this test's environment", credentialsAvailable()). }
true;public,static;0;7;/**  * Get OSS endpoint used to connect.  * @return OSS endpoint  */ ;/**  * Get OSS endpoint used to connect.  * @return OSS endpoint  */ public static String getOSSEndpoint() {     if (ENDPOINT != null) {         return ENDPOINT.     } else {         throw new IllegalStateException("OSS endpoint is not available").     } }
true;public,static;0;7;/**  * Get OSS access key.  * @return OSS access key  */ ;/**  * Get OSS access key.  * @return OSS access key  */ public static String getOSSAccessKey() {     if (ACCESS_KEY != null) {         return ACCESS_KEY.     } else {         throw new IllegalStateException("OSS access key is not available").     } }
true;public,static;0;7;/**  * Get OSS secret key.  * @return OSS secret key  */ ;/**  * Get OSS secret key.  * @return OSS secret key  */ public static String getOSSSecretKey() {     if (SECRET_KEY != null) {         return SECRET_KEY.     } else {         throw new IllegalStateException("OSS secret key is not available").     } }
false;public,static;0;3;;public static String getTestBucketUri() {     return getTestBucketUriWithScheme("oss"). }
false;public,static;1;8;;public static String getTestBucketUriWithScheme(String scheme) {     if (BUCKET != null) {         return scheme + "://" + BUCKET + "/".     } else {         throw new IllegalStateException("OSS test bucket is not available").     } }
