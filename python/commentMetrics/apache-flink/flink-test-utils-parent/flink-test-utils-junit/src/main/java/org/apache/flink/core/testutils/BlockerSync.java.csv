commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * Waits until the blocking thread has entered the method {@link #block()}  * or {@link #blockNonInterruptible()}.  */ ;/**  * Waits until the blocking thread has entered the method {@link #block()}  * or {@link #blockNonInterruptible()}.  */ public void awaitBlocker() throws InterruptedException {     synchronized (lock) {         while (!blockerReady) {             lock.wait().         }     } }
true;public;0;10;/**  * Blocks until {@link #releaseBlocker()} is called or this thread is interrupted.  * Notifies the awaiting thread that waits in the method {@link #awaitBlocker()}.  */ ;/**  * Blocks until {@link #releaseBlocker()} is called or this thread is interrupted.  * Notifies the awaiting thread that waits in the method {@link #awaitBlocker()}.  */ public void block() throws InterruptedException {     synchronized (lock) {         blockerReady = true.         lock.notifyAll().         while (!blockerReleased) {             lock.wait().         }     } }
true;public;0;12;/**  * Blocks until {@link #releaseBlocker()} is called.  * Notifies the awaiting thread that waits in the method {@link #awaitBlocker()}.  */ ;/**  * Blocks until {@link #releaseBlocker()} is called.  * Notifies the awaiting thread that waits in the method {@link #awaitBlocker()}.  */ public void blockNonInterruptible() {     synchronized (lock) {         blockerReady = true.         lock.notifyAll().         while (!blockerReleased) {             try {                 lock.wait().             } catch (InterruptedException ignored) {             }         }     } }
true;public;0;6;/**  * Lets the blocked thread continue.  */ ;/**  * Lets the blocked thread continue.  */ public void releaseBlocker() {     synchronized (lock) {         blockerReleased = true.         lock.notifyAll().     } }
