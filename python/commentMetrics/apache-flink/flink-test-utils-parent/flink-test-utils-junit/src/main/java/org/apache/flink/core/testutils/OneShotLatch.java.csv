commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * Fires the latch. Code that is blocked on {@link #await()} will now return.  */ ;/**  * Fires the latch. Code that is blocked on {@link #await()} will now return.  */ public void trigger() {     synchronized (lock) {         triggered = true.         lock.notifyAll().     } }
true;public;0;13;/**  * Waits until {@link OneShotLatch#trigger()} is called. Once {@code trigger()} has been called this  * call will always return immediately.  *  * @throws InterruptedException Thrown if the thread is interrupted while waiting.  */ ;/**  * Waits until {@link OneShotLatch#trigger()} is called. Once {@code trigger()} has been called this  * call will always return immediately.  *  * @throws InterruptedException Thrown if the thread is interrupted while waiting.  */ public void await() throws InterruptedException {     synchronized (lock) {         while (!triggered) {             Thread thread = Thread.currentThread().             try {                 waitersSet.add(thread).                 lock.wait().             } finally {                 waitersSet.remove(thread).             }         }     } }
true;public;2;25;/**  * Waits until {@link OneShotLatch#trigger()} is called. Once {@code #trigger()} has been called this  * call will always return immediately.  *  * <p>If the latch is not triggered within the given timeout, a {@code TimeoutException}  * will be thrown after the timeout.  *  * <p>A timeout value of zero means infinite timeout and make this equivalent to {@link #await()}.  *  * @param timeout   The value of the timeout, a value of zero indicating infinite timeout.  * @param timeUnit  The unit of the timeout  *  * @throws InterruptedException Thrown if the thread is interrupted while waiting.  * @throws TimeoutException Thrown, if the latch is not triggered within the timeout time.  */ ;/**  * Waits until {@link OneShotLatch#trigger()} is called. Once {@code #trigger()} has been called this  * call will always return immediately.  *  * <p>If the latch is not triggered within the given timeout, a {@code TimeoutException}  * will be thrown after the timeout.  *  * <p>A timeout value of zero means infinite timeout and make this equivalent to {@link #await()}.  *  * @param timeout   The value of the timeout, a value of zero indicating infinite timeout.  * @param timeUnit  The unit of the timeout  *  * @throws InterruptedException Thrown if the thread is interrupted while waiting.  * @throws TimeoutException Thrown, if the latch is not triggered within the timeout time.  */ public void await(long timeout, TimeUnit timeUnit) throws InterruptedException, TimeoutException {     if (timeout < 0) {         throw new IllegalArgumentException("time may not be negative").     }     if (timeUnit == null) {         throw new NullPointerException("timeUnit").     }     if (timeout == 0) {         await().     } else {         final long deadline = System.nanoTime() + timeUnit.toNanos(timeout).         long millisToWait.         synchronized (lock) {             while (!triggered && (millisToWait = (deadline - System.nanoTime()) / 1_000_000) > 0) {                 lock.wait(millisToWait).             }             if (!triggered) {                 throw new TimeoutException().             }         }     } }
true;public;0;3;/**  * Checks if the latch was triggered.  *  * @return True, if the latch was triggered, false if not.  */ ;/**  * Checks if the latch was triggered.  *  * @return True, if the latch was triggered, false if not.  */ public boolean isTriggered() {     return triggered. }
false;public;0;5;;public int getWaitersCount() {     synchronized (lock) {         return waitersSet.size().     } }
true;public;0;5;/**  * Resets the latch so that {@link #isTriggered()} returns false.  */ ;/**  * Resets the latch so that {@link #isTriggered()} returns false.  */ public void reset() {     synchronized (lock) {         triggered = false.     } }
false;public;0;4;;@Override public String toString() {     return "Latch " + (triggered ? "TRIGGERED" : "PENDING"). }
