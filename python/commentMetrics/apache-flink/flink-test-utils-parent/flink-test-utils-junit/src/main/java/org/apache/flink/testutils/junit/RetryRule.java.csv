commented;modifiers;parameterAmount;loc;comment;code
false;public;2;30;;@Override public Statement apply(Statement statement, Description description) {     RetryOnFailure retryOnFailure = description.getAnnotation(RetryOnFailure.class).     RetryOnException retryOnException = description.getAnnotation(RetryOnException.class).     // sanity check that we don't use expected exceptions with the RetryOnX annotations     if (retryOnFailure != null || retryOnException != null) {         Test test = description.getAnnotation(Test.class).         if (test.expected() != Test.None.class) {             throw new IllegalArgumentException("You cannot combine the RetryOnFailure " + "annotation with the Test(expected) annotation.").         }     }     // sanity check that we don't use both annotations     if (retryOnFailure != null && retryOnException != null) {         throw new IllegalArgumentException("You cannot combine the RetryOnFailure and RetryOnException annotations.").     }     if (retryOnFailure != null) {         return new RetryOnFailureStatement(retryOnFailure.times(), statement).     } else if (retryOnException != null) {         return new RetryOnExceptionStatement(retryOnException.times(), retryOnException.exception(), statement).     } else {         return statement.     } }
true;public;0;18;/**  * Retry a test in case of a failure.  *  * @throws Throwable  */ ;/**  * Retry a test in case of a failure.  *  * @throws Throwable  */ @Override public void evaluate() throws Throwable {     for (currentRun = 0. currentRun <= timesOnFailure. currentRun++) {         try {             statement.evaluate().             // success             break.         } catch (Throwable t) {             LOG.warn(String.format("Test run failed (%d/%d).", currentRun, timesOnFailure + 1), t).             // Throw the failure if retried too often             if (currentRun == timesOnFailure) {                 throw t.             }         }     } }
true;public;0;17;/**  * Retry a test in case of a failure with a specific exception.  *  * @throws Throwable  */ ;/**  * Retry a test in case of a failure with a specific exception.  *  * @throws Throwable  */ @Override public void evaluate() throws Throwable {     for (currentRun = 0. currentRun <= timesOnFailure. currentRun++) {         try {             statement.evaluate().             // success             break.         } catch (Throwable t) {             LOG.warn(String.format("Test run failed (%d/%d).", currentRun, timesOnFailure + 1), t).             if (!exceptionClass.isAssignableFrom(t.getClass()) || currentRun >= timesOnFailure) {                 // Throw the failure if retried too often, or if it is the wrong exception                 throw t.             }         }     } }
