commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public JobExecutionResult execute(String jobName) throws Exception {     final StreamGraph streamGraph = getStreamGraph().     streamGraph.setJobName(jobName).     final JobGraph jobGraph = streamGraph.getJobGraph().     for (Path jarFile : jarFiles) {         jobGraph.addJar(jarFile).     }     jobGraph.setClasspaths(new ArrayList<>(classPaths)).     return jobExecutor.executeJobBlocking(jobGraph). }
false;public;0;8;;@Override public StreamExecutionEnvironment createExecutionEnvironment() {     return new TestStreamEnvironment(jobExecutor, parallelism, jarFiles, classpaths). }
true;public,static;4;19;/**  * Sets the streaming context environment to a TestStreamEnvironment that runs its programs on  * the given cluster with the given default parallelism and the specified jar files and class  * paths.  *  * @param jobExecutor The executor to execute the jobs on  * @param parallelism The default parallelism for the test programs.  * @param jarFiles Additional jar files to execute the job with  * @param classpaths Additional class paths to execute the job with  */ ;// ------------------------------------------------------------------------ /**  * Sets the streaming context environment to a TestStreamEnvironment that runs its programs on  * the given cluster with the given default parallelism and the specified jar files and class  * paths.  *  * @param jobExecutor The executor to execute the jobs on  * @param parallelism The default parallelism for the test programs.  * @param jarFiles Additional jar files to execute the job with  * @param classpaths Additional class paths to execute the job with  */ public static void setAsContext(final JobExecutor jobExecutor, final int parallelism, final Collection<Path> jarFiles, final Collection<URL> classpaths) {     StreamExecutionEnvironmentFactory factory = new StreamExecutionEnvironmentFactory() {          @Override         public StreamExecutionEnvironment createExecutionEnvironment() {             return new TestStreamEnvironment(jobExecutor, parallelism, jarFiles, classpaths).         }     }.     initializeContextEnvironment(factory). }
true;public,static;2;7;/**  * Sets the streaming context environment to a TestStreamEnvironment that runs its programs on  * the given cluster with the given default parallelism.  *  * @param jobExecutor The executor to execute the jobs on  * @param parallelism The default parallelism for the test programs.  */ ;/**  * Sets the streaming context environment to a TestStreamEnvironment that runs its programs on  * the given cluster with the given default parallelism.  *  * @param jobExecutor The executor to execute the jobs on  * @param parallelism The default parallelism for the test programs.  */ public static void setAsContext(final JobExecutor jobExecutor, final int parallelism) {     setAsContext(jobExecutor, parallelism, Collections.emptyList(), Collections.emptyList()). }
true;public,static;0;3;/**  * Resets the streaming context environment to null.  */ ;/**  * Resets the streaming context environment to null.  */ public static void unsetAsContext() {     resetContextEnvironment(). }
