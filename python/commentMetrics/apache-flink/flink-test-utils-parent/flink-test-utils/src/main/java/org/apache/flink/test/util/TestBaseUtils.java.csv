# id;timestamp;commentText;codeText;commentWords;codeWords
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1467726586;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1467729094;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1472033364;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1472033371;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1473347848;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1476095826;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1480980565;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1481309930;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1481564140;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1481715812;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1481715812;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1487548883;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1491500150;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1494363408;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1495477702;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1495790937;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1501059801;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1502438562;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1505860453;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1506499511;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1515481551;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1518605788;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1520584778;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1524570317;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1529682304;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1530798894;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1538127997;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
TestBaseUtils -> public static <T> void containsResultAsText(List<T> result, String expected);1539445985;The expected string contains all expected results separate with line break, check whether all elements in result_are contained in the expected string._@param result The test result._@param expected The expected string value combination._@param <T> The result type.;public static <T> void containsResultAsText(List<T> result, String expected) {_		String[] expectedStrings = expected.split("\n")__		List<String> resultStrings = new ArrayList<>()___		for (T val : result) {_			String str = (val == null) ? "null" : val.toString()__			resultStrings.add(str)__		}__		List<String> expectedStringList = Arrays.asList(expectedStrings)___		for (String element : resultStrings) {_			assertTrue(expectedStringList.contains(element))__		}_	};the,expected,string,contains,all,expected,results,separate,with,line,break,check,whether,all,elements,in,result,are,contained,in,the,expected,string,param,result,the,test,result,param,expected,the,expected,string,value,combination,param,t,the,result,type;public,static,t,void,contains,result,as,text,list,t,result,string,expected,string,expected,strings,expected,split,n,list,string,result,strings,new,array,list,for,t,val,result,string,str,val,null,null,val,to,string,result,strings,add,str,list,string,expected,string,list,arrays,as,list,expected,strings,for,string,element,result,strings,assert,true,expected,string,list,contains,element
