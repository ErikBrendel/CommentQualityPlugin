commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;65;;public static void prepare(TemporaryFolder tempFolder) {     try {         File baseDirForSecureRun = tempFolder.newFolder().         LOG.info("Base Directory for Secure Environment: {}", baseDirForSecureRun).         String hostName = "localhost".         Properties kdcConf = MiniKdc.createConf().         if (LOG.isDebugEnabled()) {             kdcConf.setProperty(MiniKdc.DEBUG, "true").         }         kdcConf.setProperty(MiniKdc.KDC_BIND_ADDRESS, hostName).         kdc = new MiniKdc(kdcConf, baseDirForSecureRun).         kdc.start().         LOG.info("Started Mini KDC").         File keytabFile = new File(baseDirForSecureRun, "test-users.keytab").         testKeytab = keytabFile.getAbsolutePath().         testZkServerPrincipal = "zookeeper/127.0.0.1".         testZkClientPrincipal = "zk-client/127.0.0.1".         testKafkaServerPrincipal = "kafka/" + hostName.         hadoopServicePrincipal = "hadoop/" + hostName.         testPrincipal = "client/" + hostName.         kdc.createPrincipal(keytabFile, testPrincipal, testZkServerPrincipal, hadoopServicePrincipal, testZkClientPrincipal, testKafkaServerPrincipal).         testPrincipal = testPrincipal + "@" + kdc.getRealm().         testZkServerPrincipal = testZkServerPrincipal + "@" + kdc.getRealm().         testZkClientPrincipal = testZkClientPrincipal + "@" + kdc.getRealm().         testKafkaServerPrincipal = testKafkaServerPrincipal + "@" + kdc.getRealm().         hadoopServicePrincipal = hadoopServicePrincipal + "@" + kdc.getRealm().         LOG.info("-------------------------------------------------------------------").         LOG.info("Test Principal: {}", testPrincipal).         LOG.info("Test ZK Server Principal: {}", testZkServerPrincipal).         LOG.info("Test ZK Client Principal: {}", testZkClientPrincipal).         LOG.info("Test Kafka Server Principal: {}", testKafkaServerPrincipal).         LOG.info("Test Hadoop Service Principal: {}", hadoopServicePrincipal).         LOG.info("Test Keytab: {}", testKeytab).         LOG.info("-------------------------------------------------------------------").         // Security Context is established to allow non hadoop applications that requires JAAS         // based SASL/Kerberos authentication to work. However, for Hadoop specific applications         // the context can be reinitialized with Hadoop configuration by calling         // ctx.setHadoopConfiguration() for the UGI implementation to work properly.         // See Yarn test case module for reference         Configuration flinkConfig = GlobalConfiguration.loadConfiguration().         flinkConfig.setBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE, false).         flinkConfig.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, testKeytab).         flinkConfig.setBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE, false).         flinkConfig.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, testPrincipal).         flinkConfig.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, "Client,KafkaClient").         SecurityConfiguration ctx = new SecurityConfiguration(flinkConfig).         TestingSecurityContext.install(ctx, getClientSecurityConfigurationMap()).         populateJavaPropertyVariables().     } catch (Exception e) {         throw new RuntimeException("Exception occured while preparing secure environment.", e).     } }
false;public,static;0;17;;public static void cleanup() {     LOG.info("Cleaning up Secure Environment").     if (kdc != null) {         kdc.stop().         LOG.info("Stopped KDC server").     }     resetSystemEnvVariables().     testKeytab = null.     testPrincipal = null.     testZkServerPrincipal = null.     hadoopServicePrincipal = null. }
false;private,static;0;12;;private static void populateJavaPropertyVariables() {     if (LOG.isDebugEnabled()) {         System.setProperty("sun.security.krb5.debug", "true").     }     System.setProperty("java.security.krb5.conf", kdc.getKrb5conf().getAbsolutePath()).     System.setProperty("zookeeper.authProvider.1", "org.apache.zookeeper.server.auth.SASLAuthenticationProvider").     System.setProperty("zookeeper.kerberos.removeHostFromPrincipal", "true").     System.setProperty("zookeeper.kerberos.removeRealmFromPrincipal", "true"). }
false;private,static;0;8;;private static void resetSystemEnvVariables() {     System.clearProperty("java.security.krb5.conf").     System.clearProperty("sun.security.krb5.debug").     System.clearProperty("zookeeper.authProvider.1").     System.clearProperty("zookeeper.kerberos.removeHostFromPrincipal").     System.clearProperty("zookeeper.kerberos.removeRealmFromPrincipal"). }
false;public,static;1;16;;public static org.apache.flink.configuration.Configuration populateFlinkSecureConfigurations(@Nullable org.apache.flink.configuration.Configuration flinkConf) {     org.apache.flink.configuration.Configuration conf.     if (flinkConf == null) {         conf = new org.apache.flink.configuration.Configuration().     } else {         conf = flinkConf.     }     conf.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, testKeytab).     conf.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, testPrincipal).     return conf. }
false;public,static;0;24;;public static Map<String, TestingSecurityContext.ClientSecurityConfiguration> getClientSecurityConfigurationMap() {     Map<String, TestingSecurityContext.ClientSecurityConfiguration> clientSecurityConfigurationMap = new HashMap<>().     if (testZkServerPrincipal != null) {         TestingSecurityContext.ClientSecurityConfiguration zkServer = new TestingSecurityContext.ClientSecurityConfiguration(testZkServerPrincipal, testKeytab).         clientSecurityConfigurationMap.put("Server", zkServer).     }     if (testZkClientPrincipal != null) {         TestingSecurityContext.ClientSecurityConfiguration zkClient = new TestingSecurityContext.ClientSecurityConfiguration(testZkClientPrincipal, testKeytab).         clientSecurityConfigurationMap.put("Client", zkClient).     }     if (testKafkaServerPrincipal != null) {         TestingSecurityContext.ClientSecurityConfiguration kafkaServer = new TestingSecurityContext.ClientSecurityConfiguration(testKafkaServerPrincipal, testKeytab).         clientSecurityConfigurationMap.put("KafkaServer", kafkaServer).     }     return clientSecurityConfigurationMap. }
false;public,static;0;3;;public static String getTestKeytab() {     return testKeytab. }
false;public,static;0;3;;public static String getHadoopServicePrincipal() {     return hadoopServicePrincipal. }
