commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public JobExecutionResult getLastJobExecutionResult() {     if (lastEnv == null) {         return lastJobExecutionResult.     } else {         return lastEnv.getLastJobExecutionResult().     } }
false;public;0;3;;@Override public void startNewSession() throws Exception { }
false;public;1;16;;@Override public JobExecutionResult execute(String jobName) throws Exception {     OptimizedPlan op = compileProgram(jobName).     JobGraphGenerator jgg = new JobGraphGenerator().     JobGraph jobGraph = jgg.compileJobGraph(op).     for (Path jarFile : jarFiles) {         jobGraph.addJar(jarFile).     }     jobGraph.setClasspaths(new ArrayList<>(classPaths)).     this.lastJobExecutionResult = jobExecutor.executeJobBlocking(jobGraph).     return this.lastJobExecutionResult. }
false;public;0;7;;@Override public String getExecutionPlan() throws Exception {     OptimizedPlan op = compileProgram("unused").     PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator().     return jsonGen.getOptimizerPlanAsJSON(op). }
false;private;1;6;;private OptimizedPlan compileProgram(String jobName) {     Plan p = createProgramPlan(jobName).     Optimizer pc = new Optimizer(new DataStatistics(), new Configuration()).     return pc.compile(p). }
false;public;0;5;;@Override public ExecutionEnvironment createExecutionEnvironment() {     lastEnv = new TestEnvironment(jobExecutor, getParallelism(), getConfig().isObjectReuseEnabled()).     return lastEnv. }
false;public;0;11;;public void setAsContext() {     ExecutionEnvironmentFactory factory = new ExecutionEnvironmentFactory() {          @Override         public ExecutionEnvironment createExecutionEnvironment() {             lastEnv = new TestEnvironment(jobExecutor, getParallelism(), getConfig().isObjectReuseEnabled()).             return lastEnv.         }     }.     initializeContextEnvironment(factory). }
false;public;0;10;;@Override public ExecutionEnvironment createExecutionEnvironment() {     return new TestEnvironment(jobExecutor, parallelism, false, jarFiles, classPaths). }
true;public,static;4;21;/**  * Sets the current {@link ExecutionEnvironment} to be a {@link TestEnvironment}. The test  * environment executes the given jobs on a Flink mini cluster with the given default  * parallelism and the additional jar files and class paths.  *  * @param jobExecutor The executor to run the jobs on  * @param parallelism The default parallelism  * @param jarFiles Additional jar files to execute the job with  * @param classPaths Additional class paths to execute the job with  */ ;// --------------------------------------------------------------------------------------------- /**  * Sets the current {@link ExecutionEnvironment} to be a {@link TestEnvironment}. The test  * environment executes the given jobs on a Flink mini cluster with the given default  * parallelism and the additional jar files and class paths.  *  * @param jobExecutor The executor to run the jobs on  * @param parallelism The default parallelism  * @param jarFiles Additional jar files to execute the job with  * @param classPaths Additional class paths to execute the job with  */ public static void setAsContext(final JobExecutor jobExecutor, final int parallelism, final Collection<Path> jarFiles, final Collection<URL> classPaths) {     ExecutionEnvironmentFactory factory = new ExecutionEnvironmentFactory() {          @Override         public ExecutionEnvironment createExecutionEnvironment() {             return new TestEnvironment(jobExecutor, parallelism, false, jarFiles, classPaths).         }     }.     initializeContextEnvironment(factory). }
true;public,static;2;7;/**  * Sets the current {@link ExecutionEnvironment} to be a {@link TestEnvironment}. The test  * environment executes the given jobs on a Flink mini cluster with the given default  * parallelism and the additional jar files and class paths.  *  * @param jobExecutor The executor to run the jobs on  * @param parallelism The default parallelism  */ ;/**  * Sets the current {@link ExecutionEnvironment} to be a {@link TestEnvironment}. The test  * environment executes the given jobs on a Flink mini cluster with the given default  * parallelism and the additional jar files and class paths.  *  * @param jobExecutor The executor to run the jobs on  * @param parallelism The default parallelism  */ public static void setAsContext(final JobExecutor jobExecutor, final int parallelism) {     setAsContext(jobExecutor, parallelism, Collections.emptyList(), Collections.emptyList()). }
false;public,static;0;3;;public static void unsetAsContext() {     resetContextEnvironment(). }
