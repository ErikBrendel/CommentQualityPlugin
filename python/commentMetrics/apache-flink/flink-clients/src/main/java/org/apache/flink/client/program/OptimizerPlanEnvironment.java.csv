commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;// ------------------------------------------------------------------------ // Execution Environment methods // ------------------------------------------------------------------------ @Override public JobExecutionResult execute(String jobName) throws Exception {     Plan plan = createProgramPlan(jobName).     this.optimizerPlan = compiler.compile(plan).     // do not go on with anything now!     throw new ProgramAbortException(). }
false;public;0;8;;@Override public String getExecutionPlan() throws Exception {     Plan plan = createProgramPlan(null, false).     this.optimizerPlan = compiler.compile(plan).     // do not go on with anything now!     throw new ProgramAbortException(). }
false;public;0;4;;@Override public void startNewSession() { // do nothing }
false;public;1;39;;public FlinkPlan getOptimizedPlan(PackagedProgram prog) throws ProgramInvocationException {     // temporarily write syserr and sysout to a byte array.     PrintStream originalOut = System.out.     PrintStream originalErr = System.err.     ByteArrayOutputStream baos = new ByteArrayOutputStream().     System.setOut(new PrintStream(baos)).     ByteArrayOutputStream baes = new ByteArrayOutputStream().     System.setErr(new PrintStream(baes)).     setAsContext().     try {         prog.invokeInteractiveModeForExecution().     } catch (ProgramInvocationException e) {         throw e.     } catch (Throwable t) {         // the invocation gets aborted with the preview plan         if (optimizerPlan != null) {             return optimizerPlan.         } else {             throw new ProgramInvocationException("The program caused an error: ", t).         }     } finally {         unsetAsContext().         System.setOut(originalOut).         System.setErr(originalErr).     }     String stdout = baos.toString().     String stderr = baes.toString().     throw new ProgramInvocationException("The program plan could not be fetched - the program aborted pre-maturely." + "\n\nSystem.err: " + (stdout.length() == 0 ? "(none)" : stdout) + "\n\nSystem.out: " + (stderr.length() == 0 ? "(none)" : stderr)). }
false;public;0;4;;@Override public ExecutionEnvironment createExecutionEnvironment() {     return OptimizerPlanEnvironment.this. }
false;private;0;10;;// ------------------------------------------------------------------------ private void setAsContext() {     ExecutionEnvironmentFactory factory = new ExecutionEnvironmentFactory() {          @Override         public ExecutionEnvironment createExecutionEnvironment() {             return OptimizerPlanEnvironment.this.         }     }.     initializeContextEnvironment(factory). }
false;private;0;3;;private void unsetAsContext() {     resetContextEnvironment(). }
false;public;1;3;;// ------------------------------------------------------------------------ public void setPlan(FlinkPlan plan) {     this.optimizerPlan = plan. }
