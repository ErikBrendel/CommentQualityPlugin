commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;6;;private static Options buildGeneralOptions(Options options) {     options.addOption(HELP_OPTION).     // backwards compatibility: ignore verbose flag (-v)     options.addOption(new Option("v", "verbose", false, "This option is deprecated.")).     return options. }
false;private,static;1;12;;private static Options getProgramSpecificOptions(Options options) {     options.addOption(JAR_OPTION).     options.addOption(CLASS_OPTION).     options.addOption(CLASSPATH_OPTION).     options.addOption(PARALLELISM_OPTION).     options.addOption(ARGS_OPTION).     options.addOption(LOGGING_OPTION).     options.addOption(DETACHED_OPTION).     options.addOption(SHUTDOWN_IF_ATTACHED_OPTION).     options.addOption(YARN_DETACHED_OPTION).     return options. }
false;private,static;1;9;;private static Options getProgramSpecificOptionsWithoutDeprecatedOptions(Options options) {     options.addOption(CLASS_OPTION).     options.addOption(CLASSPATH_OPTION).     options.addOption(PARALLELISM_OPTION).     options.addOption(LOGGING_OPTION).     options.addOption(DETACHED_OPTION).     options.addOption(SHUTDOWN_IF_ATTACHED_OPTION).     return options. }
false;public,static;0;6;;public static Options getRunCommandOptions() {     Options options = buildGeneralOptions(new Options()).     options = getProgramSpecificOptions(options).     options.addOption(SAVEPOINT_PATH_OPTION).     return options.addOption(SAVEPOINT_ALLOW_NON_RESTORED_OPTION). }
false;static;0;4;;static Options getInfoCommandOptions() {     Options options = buildGeneralOptions(new Options()).     return getProgramSpecificOptions(options). }
false;static;0;6;;static Options getListCommandOptions() {     Options options = buildGeneralOptions(new Options()).     options.addOption(ALL_OPTION).     options.addOption(RUNNING_OPTION).     return options.addOption(SCHEDULED_OPTION). }
false;static;0;4;;static Options getCancelCommandOptions() {     Options options = buildGeneralOptions(new Options()).     return options.addOption(CANCEL_WITH_SAVEPOINT_OPTION). }
false;static;0;3;;static Options getStopCommandOptions() {     return buildGeneralOptions(new Options()). }
false;static;0;5;;static Options getSavepointCommandOptions() {     Options options = buildGeneralOptions(new Options()).     options.addOption(SAVEPOINT_DISPOSE_OPTION).     return options.addOption(JAR_OPTION). }
false;static;0;5;;static Options getModifyOptions() {     final Options options = buildGeneralOptions(new Options()).     options.addOption(MODIFY_PARALLELISM_OPTION).     return options. }
false;private,static;1;5;;// -------------------------------------------------------------------------------------------- // Help // -------------------------------------------------------------------------------------------- private static Options getRunOptionsWithoutDeprecatedOptions(Options options) {     Options o = getProgramSpecificOptionsWithoutDeprecatedOptions(options).     o.addOption(SAVEPOINT_PATH_OPTION).     return o.addOption(SAVEPOINT_ALLOW_NON_RESTORED_OPTION). }
false;private,static;1;5;;private static Options getInfoOptionsWithoutDeprecatedOptions(Options options) {     options.addOption(CLASS_OPTION).     options.addOption(PARALLELISM_OPTION).     return options. }
false;private,static;1;4;;private static Options getListOptionsWithoutDeprecatedOptions(Options options) {     options.addOption(RUNNING_OPTION).     return options.addOption(SCHEDULED_OPTION). }
false;private,static;1;3;;private static Options getCancelOptionsWithoutDeprecatedOptions(Options options) {     return options.addOption(CANCEL_WITH_SAVEPOINT_OPTION). }
false;private,static;1;3;;private static Options getStopOptionsWithoutDeprecatedOptions(Options options) {     return options. }
false;private,static;1;5;;private static Options getSavepointOptionsWithoutDeprecatedOptions(Options options) {     options.addOption(SAVEPOINT_DISPOSE_OPTION).     options.addOption(JAR_OPTION).     return options. }
true;public,static;1;15;/**  * Prints the help for the client.  */ ;/**  * Prints the help for the client.  */ public static void printHelp(Collection<CustomCommandLine<?>> customCommandLines) {     System.out.println("./flink <ACTION> [OPTIONS] [ARGUMENTS]").     System.out.println().     System.out.println("The following actions are available:").     printHelpForRun(customCommandLines).     printHelpForInfo().     printHelpForList(customCommandLines).     printHelpForStop(customCommandLines).     printHelpForCancel(customCommandLines).     printHelpForSavepoint(customCommandLines).     printHelpForModify(customCommandLines).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForRun(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"run\" compiles and runs a program.").     System.out.println("\n  Syntax: run [OPTIONS] <jar-file> <arguments>").     formatter.setSyntaxPrefix("  \"run\" action options:").     formatter.printHelp(" ", getRunOptionsWithoutDeprecatedOptions(new Options())).     printCustomCliOptions(customCommandLines, formatter, true).     System.out.println(). }
false;public,static;0;12;;public static void printHelpForInfo() {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"info\" shows the optimized execution plan of the program (JSON).").     System.out.println("\n  Syntax: info [OPTIONS] <jar-file> <arguments>").     formatter.setSyntaxPrefix("  \"info\" action options:").     formatter.printHelp(" ", getInfoOptionsWithoutDeprecatedOptions(new Options())).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForList(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"list\" lists running and scheduled programs.").     System.out.println("\n  Syntax: list [OPTIONS]").     formatter.setSyntaxPrefix("  \"list\" action options:").     formatter.printHelp(" ", getListOptionsWithoutDeprecatedOptions(new Options())).     printCustomCliOptions(customCommandLines, formatter, false).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForStop(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"stop\" stops a running program (streaming jobs only).").     System.out.println("\n  Syntax: stop [OPTIONS] <Job ID>").     formatter.setSyntaxPrefix("  \"stop\" action options:").     formatter.printHelp(" ", getStopOptionsWithoutDeprecatedOptions(new Options())).     printCustomCliOptions(customCommandLines, formatter, false).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForCancel(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"cancel\" cancels a running program.").     System.out.println("\n  Syntax: cancel [OPTIONS] <Job ID>").     formatter.setSyntaxPrefix("  \"cancel\" action options:").     formatter.printHelp(" ", getCancelOptionsWithoutDeprecatedOptions(new Options())).     printCustomCliOptions(customCommandLines, formatter, false).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForSavepoint(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"savepoint\" triggers savepoints for a running job or disposes existing ones.").     System.out.println("\n  Syntax: savepoint [OPTIONS] <Job ID> [<target directory>]").     formatter.setSyntaxPrefix("  \"savepoint\" action options:").     formatter.printHelp(" ", getSavepointOptionsWithoutDeprecatedOptions(new Options())).     printCustomCliOptions(customCommandLines, formatter, false).     System.out.println(). }
false;public,static;1;14;;public static void printHelpForModify(Collection<CustomCommandLine<?>> customCommandLines) {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nAction \"modify\" modifies a running job (e.g. change of parallelism).").     System.out.println("\n  Syntax: modify <Job ID> [OPTIONS]").     formatter.setSyntaxPrefix("  \"modify\" action options:").     formatter.printHelp(" ", getModifyOptions()).     printCustomCliOptions(customCommandLines, formatter, false).     System.out.println(). }
true;private,static;3;16;/**  * Prints custom cli options.  * @param formatter The formatter to use for printing  * @param runOptions True if the run options should be printed, False to print only general options  */ ;/**  * Prints custom cli options.  * @param formatter The formatter to use for printing  * @param runOptions True if the run options should be printed, False to print only general options  */ private static void printCustomCliOptions(Collection<CustomCommandLine<?>> customCommandLines, HelpFormatter formatter, boolean runOptions) {     // prints options from all available command-line classes     for (CustomCommandLine cli : customCommandLines) {         formatter.setSyntaxPrefix("  Options for " + cli.getId() + " mode:").         Options customOpts = new Options().         cli.addGeneralOptions(customOpts).         if (runOptions) {             cli.addRunOptions(customOpts).         }         formatter.printHelp(" ", customOpts).         System.out.println().     } }
false;public,static;1;9;;public static SavepointRestoreSettings createSavepointRestoreSettings(CommandLine commandLine) {     if (commandLine.hasOption(SAVEPOINT_PATH_OPTION.getOpt())) {         String savepointPath = commandLine.getOptionValue(SAVEPOINT_PATH_OPTION.getOpt()).         boolean allowNonRestoredState = commandLine.hasOption(SAVEPOINT_ALLOW_NON_RESTORED_OPTION.getOpt()).         return SavepointRestoreSettings.forPath(savepointPath, allowNonRestoredState).     } else {         return SavepointRestoreSettings.none().     } }
false;public,static;1;10;;// -------------------------------------------------------------------------------------------- // Line Parsing // -------------------------------------------------------------------------------------------- public static RunOptions parseRunCommand(String[] args) throws CliArgsException {     try {         DefaultParser parser = new DefaultParser().         CommandLine line = parser.parse(RUN_OPTIONS, args, true).         return new RunOptions(line).     } catch (ParseException e) {         throw new CliArgsException(e.getMessage()).     } }
false;public,static;3;9;;public static CommandLine parse(Options options, String[] args, boolean stopAtNonOptions) throws CliArgsException {     final DefaultParser parser = new DefaultParser().     try {         return parser.parse(options, args, stopAtNonOptions).     } catch (ParseException e) {         throw new CliArgsException(e.getMessage()).     } }
true;public,static;2;16;/**  * Merges the given {@link Options} into a new Options object.  *  * @param optionsA options to merge, can be null if none  * @param optionsB options to merge, can be null if none  * @return  */ ;/**  * Merges the given {@link Options} into a new Options object.  *  * @param optionsA options to merge, can be null if none  * @param optionsB options to merge, can be null if none  * @return  */ public static Options mergeOptions(@Nullable Options optionsA, @Nullable Options optionsB) {     final Options resultOptions = new Options().     if (optionsA != null) {         for (Option option : optionsA.getOptions()) {             resultOptions.addOption(option).         }     }     if (optionsB != null) {         for (Option option : optionsB.getOptions()) {             resultOptions.addOption(option).         }     }     return resultOptions. }
