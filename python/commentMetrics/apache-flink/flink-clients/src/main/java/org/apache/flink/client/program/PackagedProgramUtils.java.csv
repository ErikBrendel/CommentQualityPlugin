# id;timestamp;commentText;codeText;commentWords;codeWords
PackagedProgramUtils -> public static JobGraph createJobGraph( 		PackagedProgram packagedProgram, 		Configuration configuration, 		int defaultParallelism) throws ProgramInvocationException;1538386941;Creates a {@link JobGraph} with a random {@link JobID}_from the given {@link PackagedProgram}.__@param packagedProgram to extract the JobGraph from_@param configuration to use for the optimizer and job graph generator_@param defaultParallelism for the JobGraph_@return JobGraph extracted from the PackagedProgram_@throws ProgramInvocationException if the JobGraph generation failed;public static JobGraph createJobGraph(_		PackagedProgram packagedProgram,_		Configuration configuration,_		int defaultParallelism) throws ProgramInvocationException {_		return createJobGraph(packagedProgram, configuration, defaultParallelism, null)__	};creates,a,link,job,graph,with,a,random,link,job,id,from,the,given,link,packaged,program,param,packaged,program,to,extract,the,job,graph,from,param,configuration,to,use,for,the,optimizer,and,job,graph,generator,param,default,parallelism,for,the,job,graph,return,job,graph,extracted,from,the,packaged,program,throws,program,invocation,exception,if,the,job,graph,generation,failed;public,static,job,graph,create,job,graph,packaged,program,packaged,program,configuration,configuration,int,default,parallelism,throws,program,invocation,exception,return,create,job,graph,packaged,program,configuration,default,parallelism,null
PackagedProgramUtils -> public static JobGraph createJobGraph( 		PackagedProgram packagedProgram, 		Configuration configuration, 		int defaultParallelism) throws ProgramInvocationException;1550138784;Creates a {@link JobGraph} with a random {@link JobID}_from the given {@link PackagedProgram}.__@param packagedProgram to extract the JobGraph from_@param configuration to use for the optimizer and job graph generator_@param defaultParallelism for the JobGraph_@return JobGraph extracted from the PackagedProgram_@throws ProgramInvocationException if the JobGraph generation failed;public static JobGraph createJobGraph(_		PackagedProgram packagedProgram,_		Configuration configuration,_		int defaultParallelism) throws ProgramInvocationException {_		return createJobGraph(packagedProgram, configuration, defaultParallelism, null)__	};creates,a,link,job,graph,with,a,random,link,job,id,from,the,given,link,packaged,program,param,packaged,program,to,extract,the,job,graph,from,param,configuration,to,use,for,the,optimizer,and,job,graph,generator,param,default,parallelism,for,the,job,graph,return,job,graph,extracted,from,the,packaged,program,throws,program,invocation,exception,if,the,job,graph,generation,failed;public,static,job,graph,create,job,graph,packaged,program,packaged,program,configuration,configuration,int,default,parallelism,throws,program,invocation,exception,return,create,job,graph,packaged,program,configuration,default,parallelism,null
PackagedProgramUtils -> public static JobGraph createJobGraph( 			PackagedProgram packagedProgram, 			Configuration configuration, 			int defaultParallelism) throws ProgramInvocationException;1519057653;Creates a {@link JobGraph} from the given {@link PackagedProgram}.__@param packagedProgram to extract the JobGraph from_@param configuration to use for the optimizer and job graph generator_@param defaultParallelism for the JobGraph_@return JobGraph extracted from the PackagedProgram_@throws ProgramInvocationException if the JobGraph generation failed;public static JobGraph createJobGraph(_			PackagedProgram packagedProgram,_			Configuration configuration,_			int defaultParallelism) throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(packagedProgram.getUserCodeClassLoader())__		final Optimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__		final FlinkPlan flinkPlan___		if (packagedProgram.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars = packagedProgram.getPlanWithJars()___			final Plan plan = jobWithJars.getPlan()___			if (plan.getDefaultParallelism() <= 0) {_				plan.setDefaultParallelism(defaultParallelism)__			}__			flinkPlan = optimizer.compile(jobWithJars.getPlan())__		} else if (packagedProgram.isUsingInteractiveMode()) {_			final OptimizerPlanEnvironment optimizerPlanEnvironment = new OptimizerPlanEnvironment(optimizer)___			optimizerPlanEnvironment.setParallelism(defaultParallelism)___			flinkPlan = optimizerPlanEnvironment.getOptimizedPlan(packagedProgram)__		} else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}__		final JobGraph jobGraph___		if (flinkPlan instanceof StreamingPlan) {_			jobGraph = ((StreamingPlan) flinkPlan).getJobGraph()__			jobGraph.setSavepointRestoreSettings(packagedProgram.getSavepointSettings())__		} else {_			final JobGraphGenerator jobGraphGenerator = new JobGraphGenerator(configuration)__			jobGraph = jobGraphGenerator.compileJobGraph((OptimizedPlan) flinkPlan)__		}__		for (URL url : packagedProgram.getAllLibraries()) {_			try {_				jobGraph.addJar(new Path(url.toURI()))__			} catch (URISyntaxException e) {_				throw new ProgramInvocationException("Invalid URL for jar file: " + url + '.', e)__			}_		}__		jobGraph.setClasspaths(packagedProgram.getClasspaths())___		return jobGraph__	};creates,a,link,job,graph,from,the,given,link,packaged,program,param,packaged,program,to,extract,the,job,graph,from,param,configuration,to,use,for,the,optimizer,and,job,graph,generator,param,default,parallelism,for,the,job,graph,return,job,graph,extracted,from,the,packaged,program,throws,program,invocation,exception,if,the,job,graph,generation,failed;public,static,job,graph,create,job,graph,packaged,program,packaged,program,configuration,configuration,int,default,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,packaged,program,get,user,code,class,loader,final,optimizer,optimizer,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,final,flink,plan,flink,plan,if,packaged,program,is,using,program,entry,point,final,job,with,jars,job,with,jars,packaged,program,get,plan,with,jars,final,plan,plan,job,with,jars,get,plan,if,plan,get,default,parallelism,0,plan,set,default,parallelism,default,parallelism,flink,plan,optimizer,compile,job,with,jars,get,plan,else,if,packaged,program,is,using,interactive,mode,final,optimizer,plan,environment,optimizer,plan,environment,new,optimizer,plan,environment,optimizer,optimizer,plan,environment,set,parallelism,default,parallelism,flink,plan,optimizer,plan,environment,get,optimized,plan,packaged,program,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode,final,job,graph,job,graph,if,flink,plan,instanceof,streaming,plan,job,graph,streaming,plan,flink,plan,get,job,graph,job,graph,set,savepoint,restore,settings,packaged,program,get,savepoint,settings,else,final,job,graph,generator,job,graph,generator,new,job,graph,generator,configuration,job,graph,job,graph,generator,compile,job,graph,optimized,plan,flink,plan,for,url,url,packaged,program,get,all,libraries,try,job,graph,add,jar,new,path,url,to,uri,catch,urisyntax,exception,e,throw,new,program,invocation,exception,invalid,url,for,jar,file,url,e,job,graph,set,classpaths,packaged,program,get,classpaths,return,job,graph
PackagedProgramUtils -> public static JobGraph createJobGraph( 			PackagedProgram packagedProgram, 			Configuration configuration, 			int defaultParallelism) throws ProgramInvocationException;1529046538;Creates a {@link JobGraph} from the given {@link PackagedProgram}.__@param packagedProgram to extract the JobGraph from_@param configuration to use for the optimizer and job graph generator_@param defaultParallelism for the JobGraph_@return JobGraph extracted from the PackagedProgram_@throws ProgramInvocationException if the JobGraph generation failed;public static JobGraph createJobGraph(_			PackagedProgram packagedProgram,_			Configuration configuration,_			int defaultParallelism) throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(packagedProgram.getUserCodeClassLoader())__		final Optimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__		final FlinkPlan flinkPlan___		if (packagedProgram.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars = packagedProgram.getPlanWithJars()___			final Plan plan = jobWithJars.getPlan()___			if (plan.getDefaultParallelism() <= 0) {_				plan.setDefaultParallelism(defaultParallelism)__			}__			flinkPlan = optimizer.compile(jobWithJars.getPlan())__		} else if (packagedProgram.isUsingInteractiveMode()) {_			final OptimizerPlanEnvironment optimizerPlanEnvironment = new OptimizerPlanEnvironment(optimizer)___			optimizerPlanEnvironment.setParallelism(defaultParallelism)___			flinkPlan = optimizerPlanEnvironment.getOptimizedPlan(packagedProgram)__		} else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}__		final JobGraph jobGraph___		if (flinkPlan instanceof StreamingPlan) {_			jobGraph = ((StreamingPlan) flinkPlan).getJobGraph()__			jobGraph.setSavepointRestoreSettings(packagedProgram.getSavepointSettings())__		} else {_			final JobGraphGenerator jobGraphGenerator = new JobGraphGenerator(configuration)__			jobGraph = jobGraphGenerator.compileJobGraph((OptimizedPlan) flinkPlan)__		}__		for (URL url : packagedProgram.getAllLibraries()) {_			try {_				jobGraph.addJar(new Path(url.toURI()))__			} catch (URISyntaxException e) {_				throw new ProgramInvocationException("Invalid URL for jar file: " + url + '.', jobGraph.getJobID(), e)__			}_		}__		jobGraph.setClasspaths(packagedProgram.getClasspaths())___		return jobGraph__	};creates,a,link,job,graph,from,the,given,link,packaged,program,param,packaged,program,to,extract,the,job,graph,from,param,configuration,to,use,for,the,optimizer,and,job,graph,generator,param,default,parallelism,for,the,job,graph,return,job,graph,extracted,from,the,packaged,program,throws,program,invocation,exception,if,the,job,graph,generation,failed;public,static,job,graph,create,job,graph,packaged,program,packaged,program,configuration,configuration,int,default,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,packaged,program,get,user,code,class,loader,final,optimizer,optimizer,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,final,flink,plan,flink,plan,if,packaged,program,is,using,program,entry,point,final,job,with,jars,job,with,jars,packaged,program,get,plan,with,jars,final,plan,plan,job,with,jars,get,plan,if,plan,get,default,parallelism,0,plan,set,default,parallelism,default,parallelism,flink,plan,optimizer,compile,job,with,jars,get,plan,else,if,packaged,program,is,using,interactive,mode,final,optimizer,plan,environment,optimizer,plan,environment,new,optimizer,plan,environment,optimizer,optimizer,plan,environment,set,parallelism,default,parallelism,flink,plan,optimizer,plan,environment,get,optimized,plan,packaged,program,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode,final,job,graph,job,graph,if,flink,plan,instanceof,streaming,plan,job,graph,streaming,plan,flink,plan,get,job,graph,job,graph,set,savepoint,restore,settings,packaged,program,get,savepoint,settings,else,final,job,graph,generator,job,graph,generator,new,job,graph,generator,configuration,job,graph,job,graph,generator,compile,job,graph,optimized,plan,flink,plan,for,url,url,packaged,program,get,all,libraries,try,job,graph,add,jar,new,path,url,to,uri,catch,urisyntax,exception,e,throw,new,program,invocation,exception,invalid,url,for,jar,file,url,job,graph,get,job,id,e,job,graph,set,classpaths,packaged,program,get,classpaths,return,job,graph
