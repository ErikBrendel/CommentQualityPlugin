commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Signals whether the custom command-line wants to execute or not.  * @param commandLine The command-line options  * @return True if the command-line wants to run, False otherwise  */ ;/**  * Signals whether the custom command-line wants to execute or not.  * @param commandLine The command-line options  * @return True if the command-line wants to run, False otherwise  */ boolean isActive(CommandLine commandLine).
true;;0;1;/**  * Gets the unique identifier of this CustomCommandLine.  * @return A unique identifier  */ ;/**  * Gets the unique identifier of this CustomCommandLine.  * @return A unique identifier  */ String getId().
true;;1;1;/**  * Adds custom options to the existing run options.  * @param baseOptions The existing options.  */ ;/**  * Adds custom options to the existing run options.  * @param baseOptions The existing options.  */ void addRunOptions(Options baseOptions).
true;;1;1;/**  * Adds custom options to the existing general options.  *  * @param baseOptions The existing options.  */ ;/**  * Adds custom options to the existing general options.  *  * @param baseOptions The existing options.  */ void addGeneralOptions(Options baseOptions).
true;;1;1;/**  * Create a {@link ClusterDescriptor} from the given configuration, configuration directory  * and the command line.  *  * @param commandLine containing command line options relevant for the ClusterDescriptor  * @return ClusterDescriptor  * @throws FlinkException if the ClusterDescriptor could not be created  */ ;/**  * Create a {@link ClusterDescriptor} from the given configuration, configuration directory  * and the command line.  *  * @param commandLine containing command line options relevant for the ClusterDescriptor  * @return ClusterDescriptor  * @throws FlinkException if the ClusterDescriptor could not be created  */ ClusterDescriptor<T> createClusterDescriptor(CommandLine commandLine) throws FlinkException.
true;;1;2;/**  * Returns the cluster id if a cluster id was specified on the command line, otherwise it  * returns null.  *  * <p>A cluster id identifies a running cluster, e.g. the Yarn application id for a Flink  * cluster running on Yarn.  *  * @param commandLine containing command line options relevant for the cluster id retrieval  * @return Cluster id identifying the cluster to deploy jobs to or null  */ ;/**  * Returns the cluster id if a cluster id was specified on the command line, otherwise it  * returns null.  *  * <p>A cluster id identifies a running cluster, e.g. the Yarn application id for a Flink  * cluster running on Yarn.  *  * @param commandLine containing command line options relevant for the cluster id retrieval  * @return Cluster id identifying the cluster to deploy jobs to or null  */ @Nullable T getClusterId(CommandLine commandLine).
true;;1;1;/**  * Returns the {@link ClusterSpecification} specified by the configuration and the command  * line options. This specification can be used to deploy a new Flink cluster.  *  * @param commandLine containing command line options relevant for the ClusterSpecification  * @return ClusterSpecification for a new Flink cluster  * @throws FlinkException if the ClusterSpecification could not be created  */ ;/**  * Returns the {@link ClusterSpecification} specified by the configuration and the command  * line options. This specification can be used to deploy a new Flink cluster.  *  * @param commandLine containing command line options relevant for the ClusterSpecification  * @return ClusterSpecification for a new Flink cluster  * @throws FlinkException if the ClusterSpecification could not be created  */ ClusterSpecification getClusterSpecification(CommandLine commandLine) throws FlinkException.
false;default;2;6;;default CommandLine parseCommandLineOptions(String[] args, boolean stopAtNonOptions) throws CliArgsException {     final Options options = new Options().     addGeneralOptions(options).     addRunOptions(options).     return CliFrontendParser.parse(options, args, stopAtNonOptions). }
