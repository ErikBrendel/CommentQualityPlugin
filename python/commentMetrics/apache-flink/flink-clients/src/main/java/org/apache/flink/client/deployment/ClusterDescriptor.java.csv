commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns a String containing details about the cluster (NodeManagers, available memory, ...).  */ ;/**  * Returns a String containing details about the cluster (NodeManagers, available memory, ...).  */ String getClusterDescription().
true;;1;1;/**  * Retrieves an existing Flink Cluster.  * @param clusterId The unique identifier of the running cluster  * @return Client for the cluster  * @throws ClusterRetrieveException if the cluster client could not be retrieved  */ ;/**  * Retrieves an existing Flink Cluster.  * @param clusterId The unique identifier of the running cluster  * @return Client for the cluster  * @throws ClusterRetrieveException if the cluster client could not be retrieved  */ ClusterClient<T> retrieve(T clusterId) throws ClusterRetrieveException.
true;;1;1;/**  * Triggers deployment of a cluster.  * @param clusterSpecification Cluster specification defining the cluster to deploy  * @return Client for the cluster  * @throws ClusterDeploymentException if the cluster could not be deployed  */ ;/**  * Triggers deployment of a cluster.  * @param clusterSpecification Cluster specification defining the cluster to deploy  * @return Client for the cluster  * @throws ClusterDeploymentException if the cluster could not be deployed  */ ClusterClient<T> deploySessionCluster(ClusterSpecification clusterSpecification) throws ClusterDeploymentException.
true;;3;4;/**  * Deploys a per-job cluster with the given job on the cluster.  *  * @param clusterSpecification Initial cluster specification with which the Flink cluster is launched  * @param jobGraph JobGraph with which the job cluster is started  * @param detached true if the cluster should be stopped after the job completion without serving the result,  *                 otherwise false  * @return Cluster client to talk to the Flink cluster  * @throws ClusterDeploymentException if the cluster could not be deployed  */ ;/**  * Deploys a per-job cluster with the given job on the cluster.  *  * @param clusterSpecification Initial cluster specification with which the Flink cluster is launched  * @param jobGraph JobGraph with which the job cluster is started  * @param detached true if the cluster should be stopped after the job completion without serving the result,  *                 otherwise false  * @return Cluster client to talk to the Flink cluster  * @throws ClusterDeploymentException if the cluster could not be deployed  */ ClusterClient<T> deployJobCluster(final ClusterSpecification clusterSpecification, final JobGraph jobGraph, final boolean detached) throws ClusterDeploymentException.
true;;1;1;/**  * Terminates the cluster with the given cluster id.  *  * @param clusterId identifying the cluster to shut down  * @throws FlinkException if the cluster could not be terminated  */ ;/**  * Terminates the cluster with the given cluster id.  *  * @param clusterId identifying the cluster to shut down  * @throws FlinkException if the cluster could not be terminated  */ void killCluster(T clusterId) throws FlinkException.
