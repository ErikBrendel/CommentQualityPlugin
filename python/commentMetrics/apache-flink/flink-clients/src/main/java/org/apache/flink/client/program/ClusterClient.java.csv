# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1515699606;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1515700517;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1515770043;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1515770044;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1516028608;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1517237717;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1518855442;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1519317159;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1519977153;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1520246439;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1520248329;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1520268868;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1521396720;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1521741862;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1522049586;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1522066224;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1522132482;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1523641106;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1525116069;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1529046538;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1529682304;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1529682304;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1533029410;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1533829432;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1539176686;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1549897311;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1550594263;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws FlinkException;1550594263;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws FlinkException {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,flink,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1466152678;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1466152678;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1466780434;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1467379351;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1467379351;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1468944004;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1472030970;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1472132775;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1472485736;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1472487067;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1475676445;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1476696544;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1477319634;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1477570902;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1478068438;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1481907119;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1493821466;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1493975155;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1493975167;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1495284870;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1495441965;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1495441965;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1495778594;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1502355550;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1504172257;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1507569104;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1507715934;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1508078631;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1509004145;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1510063664;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515177486;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515686383;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515699606;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515700517;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515770043;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1515770044;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1516028608;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1517237717;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1518855442;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1519317159;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1519977153;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;protected abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;protected,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1472132775;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1472485736;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1472487067;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1475676445;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1476696544;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1477319634;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1477570902;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1478068438;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1481907119;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1493821466;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1493975155;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1493975167;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystemLoader.get(),_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1495284870;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystemLoader.get(),_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1495441965;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystemLoader.get(),_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1495441965;Reattaches to a running from from the supplied job id_@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1495778594;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway")__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1502355550;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1504172257;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1507569104;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1507715934;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1508078631;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1509004145;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1510063664;Reattaches to a running from from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515177486;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515686383;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515699606;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515700517;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515770043;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1515770044;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1516028608;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1517237717;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1518855442;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1519317159;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1519977153;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1520246439;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1520248329;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1520268868;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1521396720;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1521741862;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1522049586;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1522066224;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1522132482;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1523641106;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1525116069;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1529046538;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1529682304;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1529682304;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1533029410;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1533829432;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException;1539176686;Reattaches to a running from the supplied job id._@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobExecutionResult retrieveJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		final JobListeningContext listeningContext = JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)___		return JobClient.awaitJobResult(listeningContext)__	};reattaches,to,a,running,from,the,supplied,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,execution,result,retrieve,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,final,job,listening,context,listening,context,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution,return,job,client,await,job,result,listening,context
ClusterClient -> protected abstract void finalizeCluster()_;1466152678;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1466152678;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1466780434;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1467379351;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1467379351;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1468944004;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1472030970;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1472132775;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1472485736;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1472487067;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1475676445;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1476696544;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1477319634;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1477570902;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1478068438;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1481907119;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1493821466;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1493975155;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1493975167;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1495284870;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1495441965;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1495441965;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1495778594;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1502355550;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1504172257;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1507569104;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1507715934;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1508078631;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1509004145;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1510063664;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1515177486;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1515686383;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1515699606;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> protected abstract void finalizeCluster()_;1515700517;Request the cluster to shut down or disconnect.;protected abstract void finalizeCluster()_;request,the,cluster,to,shut,down,or,disconnect;protected,abstract,void,finalize,cluster
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1466152678;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1466152678;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1466780434;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1467379351;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1467379351;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1468944004;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1472030970;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1472132775;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1472485736;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1472487067;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1475676445;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1476696544;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1477319634;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1477570902;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1478068438;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1481907119;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1493821466;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1493975155;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1493975167;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1495284870;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1495441965;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1495441965;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1495778594;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1502355550;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1504172257;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1507569104;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1507715934;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1508078631;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1509004145;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1510063664;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515177486;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515686383;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515699606;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515700517;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515770043;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1515770044;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1516028608;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1517237717;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1518855442;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1519317159;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1519977153;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1520246439;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1520248329;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1520268868;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1521396720;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID) throws Exception;1521741862;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1466152678;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystem = createActorSystem()__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,create,actor,system
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1466152678;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystem = createActorSystem()__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,create,actor,system
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1466780434;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystem = createActorSystem()__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,create,actor,system
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1467379351;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystem = createActorSystem()__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,create,actor,system
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1467379351;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1468944004;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1472030970;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1472132775;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1472485736;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1472487067;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1475676445;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1476696544;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1477319634;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1477570902;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1478068438;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1481907119;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1493821466;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws IOException;1493975155;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws java.io.IOException Thrown, if the client's actor system could not be started.;public ClusterClient(Configuration flinkConfig) throws IOException {__		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,java,io,ioexception,thrown,if,the,client,s,actor,system,could,not,be,started;public,cluster,client,configuration,flink,config,throws,ioexception,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1493975167;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1495284870;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1495441965;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1495441965;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1495778594;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1502355550;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1504172257;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1507569104;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1507715934;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1508078631;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1509004145;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1510063664;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515177486;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515686383;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515699606;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515700517;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515770043;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1515770044;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1516028608;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1517237717;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1518855442;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1519317159;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION))__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1519977153;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1520246439;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1520248329;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1520268868;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1521396720;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1521741862;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1522049586;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1522066224;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1522132482;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1523641106;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1525116069;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1529046538;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1529682304;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1529682304;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1533029410;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1533829432;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1539176686;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1549897311;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1550594263;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public ClusterClient(Configuration flinkConfig) throws Exception;1550594263;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer.__@throws Exception we cannot create the high availability services;public ClusterClient(Configuration flinkConfig) throws Exception {_		this(_			flinkConfig,_			HighAvailabilityServicesUtils.createHighAvailabilityServices(_				flinkConfig,_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION),_			false)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,throws,exception,we,cannot,create,the,high,availability,services;public,cluster,client,configuration,flink,config,throws,exception,this,flink,config,high,availability,services,utils,create,high,availability,services,flink,config,executors,direct,executor,high,availability,services,utils,address,resolution,false
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1466152678;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1466152678;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1466780434;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1467379351;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1467379351;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1468944004;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1472030970;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1472132775;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1472485736;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1472487067;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1475676445;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1476696544;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1477319634;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1477570902;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1478068438;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1481907119;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1493821466;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1493975155;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1493975167;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1495284870;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1495441965;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1495441965;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1495778594;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1502355550;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1504172257;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1507569104;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1507715934;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1508078631;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1509004145;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1510063664;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515177486;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515686383;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515699606;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515700517;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515770043;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1515770044;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1516028608;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1517237717;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1518855442;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1519317159;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1519977153;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1520246439;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1520248329;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1520268868;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1521396720;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1521741862;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1522049586;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1522066224;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1522132482;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1523641106;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1525116069;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1529046538;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1529682304;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1529682304;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1533029410;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1533829432;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1539176686;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1549897311;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1550594263;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public void setPrintStatusDuringExecution(boolean print);1550594263;Configures whether the client should print progress updates during the execution to {@code System.out}._All updates are logged via the SLF4J loggers regardless of this setting.__@param print True to print updates to standard out during execution, false to not print them.;public void setPrintStatusDuringExecution(boolean print) {_		this.printStatusDuringExecution = print__	};configures,whether,the,client,should,print,progress,updates,during,the,execution,to,code,system,out,all,updates,are,logged,via,the,slf4j,loggers,regardless,of,this,setting,param,print,true,to,print,updates,to,standard,out,during,execution,false,to,not,print,them;public,void,set,print,status,during,execution,boolean,print,this,print,status,during,execution,print
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1520246439;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1520248329;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1520268868;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1521396720;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1521741862;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1522049586;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1522066224;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1522132482;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1523641106;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1525116069;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1529046538;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1529682304;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1529682304;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1533029410;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1533829432;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1539176686;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1549897311;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1550594263;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader) 		throws ProgramInvocationException_;1550594263;Calls the subclasses' submitJob method. It may decide to simply call one of the run methods or it may perform_some custom job submission logic._@param jobGraph The JobGraph to be submitted_@return JobSubmissionResult;public abstract JobSubmissionResult submitJob(JobGraph jobGraph, ClassLoader classLoader)_		throws ProgramInvocationException_;calls,the,subclasses,submit,job,method,it,may,decide,to,simply,call,one,of,the,run,methods,or,it,may,perform,some,custom,job,submission,logic,param,job,graph,the,job,graph,to,be,submitted,return,job,submission,result;public,abstract,job,submission,result,submit,job,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1520248329;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1520268868;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1521396720;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1521741862;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1522049586;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1522066224;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1522132482;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1523641106;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1525116069;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1529046538;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1529682304;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1529682304;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1533029410;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1533829432;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.<Object>toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,object,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1539176686;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1549897311;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1550594263;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<JobStatus> getJobStatus(JobID jobId);1550594263;Requests the {@link JobStatus} of the job with the given {@link JobID}.;public CompletableFuture<JobStatus> getJobStatus(JobID jobId) {_		final ActorGateway jobManager__		try {_			jobManager = getJobManagerGateway()__		} catch (FlinkException e) {_			throw new RuntimeException("Could not retrieve JobManage gateway.", e)__		}__		Future<Object> response = jobManager.ask(JobManagerMessages.getRequestJobStatus(jobId), timeout)___		CompletableFuture<Object> javaFuture = FutureUtils.toJava(response)___		return javaFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.CurrentJobStatus) {_				return ((JobManagerMessages.CurrentJobStatus) responseMessage).status()__			} else if (responseMessage instanceof JobManagerMessages.JobNotFound) {_				throw new CompletionException(_					new IllegalStateException("Could not find job with JobId " + jobId))__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};requests,the,link,job,status,of,the,job,with,the,given,link,job,id;public,completable,future,job,status,get,job,status,job,id,job,id,final,actor,gateway,job,manager,try,job,manager,get,job,manager,gateway,catch,flink,exception,e,throw,new,runtime,exception,could,not,retrieve,job,manage,gateway,e,future,object,response,job,manager,ask,job,manager,messages,get,request,job,status,job,id,timeout,completable,future,object,java,future,future,utils,to,java,response,return,java,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,current,job,status,return,job,manager,messages,current,job,status,response,message,status,else,if,response,message,instanceof,job,manager,messages,job,not,found,throw,new,completion,exception,new,illegal,state,exception,could,not,find,job,with,job,id,job,id,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public abstract T getClusterId()_;1515770044;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1516028608;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1517237717;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1518855442;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1519317159;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1519977153;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1520246439;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1520248329;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1520268868;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1521396720;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1521741862;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1522049586;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1522066224;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1522132482;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1523641106;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1525116069;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1529046538;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1529682304;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1529682304;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1533029410;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1533829432;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1539176686;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1549897311;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1550594263;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract T getClusterId()_;1550594263;Returns the cluster id identifying the cluster to which the client is connected.__@return cluster id of the connected cluster;public abstract T getClusterId()_;returns,the,cluster,id,identifying,the,cluster,to,which,the,client,is,connected,return,cluster,id,of,the,connected,cluster;public,abstract,t,get,cluster,id
ClusterClient -> public abstract void waitForClusterToBeReady()_;1472485736;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1472487067;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1475676445;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1476696544;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1477319634;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1477570902;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1478068438;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1481907119;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1493821466;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1493975155;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1493975167;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1495284870;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1495441965;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1495441965;Blocks until the client has determined that the cluster is ready for Job submission.__This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1495778594;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1502355550;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1504172257;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1507569104;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1507715934;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1508078631;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1509004145;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1510063664;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515177486;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515686383;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515699606;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515700517;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515770043;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1515770044;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1516028608;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1517237717;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1518855442;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1519317159;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1519977153;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1520246439;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1520248329;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1520268868;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1521396720;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1521741862;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1522049586;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1522066224;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1522132482;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1523641106;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1525116069;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1529046538;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1529682304;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1529682304;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1533029410;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1533829432;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1539176686;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1549897311;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1550594263;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public abstract void waitForClusterToBeReady()_;1550594263;Blocks until the client has determined that the cluster is ready for Job submission.__<p>This is delayed until right before job submission to report any other errors first_(e.g. invalid job definitions/errors in the user jar);public abstract void waitForClusterToBeReady()_;blocks,until,the,client,has,determined,that,the,cluster,is,ready,for,job,submission,p,this,is,delayed,until,right,before,job,submission,to,report,any,other,errors,first,e,g,invalid,job,definitions,errors,in,the,user,jar;public,abstract,void,wait,for,cluster,to,be,ready
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1522049586;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1522066224;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1522132482;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1523641106;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1525116069;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1529046538;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1529682304;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1529682304;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1533029410;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1533829432;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1539176686;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1549897311;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1550594263;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1550594263;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<OptionalFailure<Object>>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,optional,failure,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1466152678;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1466152678;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1466780434;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1467379351;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1467379351;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1468944004;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1472030970;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1472132775;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1472485736;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1472487067;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1475676445;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1476696544;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1477319634;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1477570902;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1478068438;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1481907119;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1493821466;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1493975155;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1493975167;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1495284870;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1495441965;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1495441965;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1495778594;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1502355550;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1504172257;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1507569104;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1507715934;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1508078631;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1509004145;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1510063664;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515177486;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515686383;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515699606;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515700517;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515770043;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1515770044;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1516028608;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1517237717;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1518855442;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1519317159;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1519977153;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1520246439;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1520248329;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1520268868;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1521396720;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1521741862;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1522049586;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1522066224;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1522132482;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1523641106;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1525116069;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1529046538;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1529682304;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1529682304;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1533029410;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1533829432;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1539176686;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1549897311;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1550594263;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism) 			throws CompilerException, ProgramInvocationException;1550594263;Creates the optimized plan for a given program, using this client's compiler.__@param prog The program to be compiled._@return The compiled and optimized plan, as returned by the compiler._@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file.;private static OptimizedPlan getOptimizedPlan(Optimizer compiler, JobWithJars prog, int parallelism)_			throws CompilerException, ProgramInvocationException {_		return getOptimizedPlan(compiler, prog.getPlan(), parallelism)__	};creates,the,optimized,plan,for,a,given,program,using,this,client,s,compiler,param,prog,the,program,to,be,compiled,return,the,compiled,and,optimized,plan,as,returned,by,the,compiler,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file;private,static,optimized,plan,get,optimized,plan,optimizer,compiler,job,with,jars,prog,int,parallelism,throws,compiler,exception,program,invocation,exception,return,get,optimized,plan,compiler,prog,get,plan,parallelism
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1478068438;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1481907119;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1493821466;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1493975155;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1493975167;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1495284870;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1495441965;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1495441965;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1495778594;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1502355550;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1504172257;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1507569104;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1507715934;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1508078631;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1509004145;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1510063664;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515177486;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515686383;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515699606;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515700517;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515770043;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1515770044;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1516028608;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1517237717;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1518855442;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1519317159;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1519977153;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1520246439;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1520248329;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1520268868;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1521396720;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1521741862;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1522049586;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1522066224;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1522132482;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1523641106;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1525116069;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1529046538;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1529682304;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1529682304;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1533029410;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1533829432;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1539176686;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1549897311;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1550594263;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings) 			throws CompilerException, ProgramInvocationException;1550594263;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param jobWithJars The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars jobWithJars, int parallelism, SavepointRestoreSettings savepointSettings)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = jobWithJars.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, jobWithJars, parallelism)__		return run(optPlan, jobWithJars.getJarFiles(), jobWithJars.getClasspaths(), classLoader, savepointSettings)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,job,with,jars,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,job,with,jars,int,parallelism,savepoint,restore,settings,savepoint,settings,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,job,with,jars,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,job,with,jars,parallelism,return,run,opt,plan,job,with,jars,get,jar,files,job,with,jars,get,classpaths,class,loader,savepoint,settings
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1507715934;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1508078631;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1509004145;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1510063664;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515177486;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515686383;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws Exception if  no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1466152678;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystem,_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1466780434;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystem,_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1467379351;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystem,_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1467379351;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1468944004;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1472030970;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1472132775;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1472485736;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.info("Looking up JobManager")___		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,info,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1472487067;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1475676445;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1476696544;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1477319634;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1477570902;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1478068438;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1481907119;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1493821466;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1493975155;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1493975167;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1495284870;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")__		return LeaderRetrievalUtils.retrieveLeaderGateway(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			actorSystemLoader.get(),_			lookupTimeout)__	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1495441965;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1495441965;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		LOG.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1495778594;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1502355550;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1504172257;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1507569104;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1507715934;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1508078631;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1509004145;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1510063664;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1515177486;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ActorGateway getJobManagerGateway() throws Exception;1515686383;Returns the {@link ActorGateway} of the current job manager leader using_the {@link LeaderRetrievalService}.__@return ActorGateway of the current job manager leader_@throws Exception;public ActorGateway getJobManagerGateway() throws Exception {_		log.debug("Looking up JobManager")___		try {_			return LeaderRetrievalUtils.retrieveLeaderGateway(_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				actorSystemLoader.get(),_				lookupTimeout)__		} catch (LeaderRetrievalException lre) {_			throw new FlinkException("Could not connect to the leading JobManager. Please check that the " +_				"JobManager is running.", lre)__		}_	};returns,the,link,actor,gateway,of,the,current,job,manager,leader,using,the,link,leader,retrieval,service,return,actor,gateway,of,the,current,job,manager,leader,throws,exception;public,actor,gateway,get,job,manager,gateway,throws,exception,log,debug,looking,up,job,manager,try,return,leader,retrieval,utils,retrieve,leader,gateway,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,loader,get,lookup,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,connect,to,the,leading,job,manager,please,check,that,the,job,manager,is,running,lre
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1519977153;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1520246439;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1520248329;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1520268868;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1521396720;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1521741862;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1522049586;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1522066224;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1522132482;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1523641106;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1525116069;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices);1529046538;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices, boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> protected ActorSystem createActorSystem() throws IOException;1466152678;Method to create the ActorSystem of the Client. May be overriden in subclasses._@return ActorSystem_@throws IOException;protected ActorSystem createActorSystem() throws IOException {__		if (actorSystem != null) {_			throw new RuntimeException("This method may only be called once.")__		}__		_		LOG.info("Starting client actor system.")___		String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__		int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__		if (hostName == null || port == -1) {_			throw new IOException("The initial JobManager address has not been set correctly.")__		}_		InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___		_		_		InetAddress ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__		return AkkaUtils.createActorSystem(flinkConfig,_			new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__	};method,to,create,the,actor,system,of,the,client,may,be,overriden,in,subclasses,return,actor,system,throws,ioexception;protected,actor,system,create,actor,system,throws,ioexception,if,actor,system,null,throw,new,runtime,exception,this,method,may,only,be,called,once,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,ioexception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,return,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0
ClusterClient -> protected ActorSystem createActorSystem() throws IOException;1466152678;Method to create the ActorSystem of the Client. May be overriden in subclasses._@return ActorSystem_@throws IOException;protected ActorSystem createActorSystem() throws IOException {__		if (actorSystem != null) {_			throw new RuntimeException("This method may only be called once.")__		}__		_		LOG.info("Starting client actor system.")___		String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__		int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__		if (hostName == null || port == -1) {_			throw new IOException("The initial JobManager address has not been set correctly.")__		}_		InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___		_		_		InetAddress ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__		return AkkaUtils.createActorSystem(flinkConfig,_			new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__	};method,to,create,the,actor,system,of,the,client,may,be,overriden,in,subclasses,return,actor,system,throws,ioexception;protected,actor,system,create,actor,system,throws,ioexception,if,actor,system,null,throw,new,runtime,exception,this,method,may,only,be,called,once,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,ioexception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,return,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0
ClusterClient -> protected ActorSystem createActorSystem() throws IOException;1466780434;Method to create the ActorSystem of the Client. May be overriden in subclasses._@return ActorSystem_@throws IOException;protected ActorSystem createActorSystem() throws IOException {__		if (actorSystem != null) {_			throw new RuntimeException("This method may only be called once.")__		}__		_		LOG.info("Starting client actor system.")___		String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__		int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__		if (hostName == null || port == -1) {_			throw new IOException("The initial JobManager address has not been set correctly.")__		}_		InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___		_		_		InetAddress ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__		return AkkaUtils.createActorSystem(flinkConfig,_			new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__	};method,to,create,the,actor,system,of,the,client,may,be,overriden,in,subclasses,return,actor,system,throws,ioexception;protected,actor,system,create,actor,system,throws,ioexception,if,actor,system,null,throw,new,runtime,exception,this,method,may,only,be,called,once,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,ioexception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,return,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0
ClusterClient -> protected ActorSystem createActorSystem() throws IOException;1467379351;Method to create the ActorSystem of the Client. May be overriden in subclasses._@return ActorSystem_@throws IOException;protected ActorSystem createActorSystem() throws IOException {__		if (actorSystem != null) {_			throw new RuntimeException("This method may only be called once.")__		}__		_		LOG.info("Starting client actor system.")___		String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__		int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__		if (hostName == null || port == -1) {_			throw new IOException("The initial JobManager address has not been set correctly.")__		}_		InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___		_		_		InetAddress ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__		return AkkaUtils.createActorSystem(flinkConfig,_			new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__	};method,to,create,the,actor,system,of,the,client,may,be,overriden,in,subclasses,return,actor,system,throws,ioexception;protected,actor,system,create,actor,system,throws,ioexception,if,actor,system,null,throw,new,runtime,exception,this,method,may,only,be,called,once,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,ioexception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,return,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1507569104;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1507715934;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1508078631;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1509004145;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1510063664;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515177486;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515686383;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515699606;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515700517;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515770043;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1515770044;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1516028608;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1517237717;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1518855442;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1519317159;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1519977153;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1520246439;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1520248329;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1520268868;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1521396720;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1521741862;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1522049586;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1522066224;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1522132482;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1523641106;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1525116069;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1529046538;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1529682304;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1529682304;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error cocurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,cocurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1533029410;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1533829432;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1539176686;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1549897311;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1550594263;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception;1550594263;Cancels a job identified by the job id and triggers a savepoint._@param jobId the job id_@param savepointDirectory directory the savepoint should be written to_@return path where the savepoint is located_@throws Exception In case an error occurred.;public String cancelWithSavepoint(JobID jobId, @Nullable String savepointDirectory) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJobWithSavepoint(jobId, savepointDirectory)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			JobManagerMessages.CancellationSuccess success = (JobManagerMessages.CancellationSuccess) rc__			return success.savepointPath()__		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Cancel & savepoint for the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,and,triggers,a,savepoint,param,job,id,the,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,where,the,savepoint,is,located,throws,exception,in,case,an,error,occurred;public,string,cancel,with,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,with,savepoint,job,id,savepoint,directory,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,job,manager,messages,cancellation,success,success,job,manager,messages,cancellation,success,rc,return,success,savepoint,path,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,cancel,savepoint,for,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public boolean isDetached();1466152678;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1466152678;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1466780434;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1467379351;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1467379351;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1468944004;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1472030970;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1472132775;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1472485736;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1472487067;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1475676445;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1476696544;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1477319634;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1477570902;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1478068438;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1481907119;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1493821466;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1493975155;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1493975167;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1495284870;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1495441965;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1495441965;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1495778594;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1502355550;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1504172257;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1507569104;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1507715934;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1508078631;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1509004145;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1510063664;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515177486;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515686383;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515699606;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515700517;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515770043;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1515770044;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1516028608;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1517237717;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1518855442;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1519317159;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1519977153;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1520246439;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1520248329;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1520268868;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1521396720;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1521741862;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1522049586;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1522066224;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1522132482;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1523641106;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1525116069;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1529046538;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1529682304;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1529682304;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1533029410;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1533829432;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1539176686;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1549897311;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1550594263;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public boolean isDetached();1550594263;A flag to indicate whether this clients submits jobs detached._@return True if the Client submits detached, false otherwise;public boolean isDetached() {_		return detachedJobSubmission__	};a,flag,to,indicate,whether,this,clients,submits,jobs,detached,return,true,if,the,client,submits,detached,false,otherwise;public,boolean,is,detached,return,detached,job,submission
ClusterClient -> public Configuration getFlinkConfiguration();1466152678;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1466152678;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1466780434;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1467379351;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1467379351;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1468944004;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1472030970;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1472132775;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1472485736;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1472487067;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1475676445;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1476696544;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1477319634;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1477570902;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1478068438;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1481907119;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1493821466;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1493975155;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1493975167;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1495284870;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1495441965;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1495441965;Return the Flink configuration object_@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1495778594;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1502355550;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1504172257;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1507569104;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1507715934;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1508078631;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1509004145;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1510063664;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515177486;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515686383;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515699606;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515700517;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515770043;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1515770044;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1516028608;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1517237717;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1518855442;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1519317159;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1519977153;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1520246439;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1520248329;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1520268868;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1521396720;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1521741862;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1522049586;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1522066224;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1522132482;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1523641106;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1525116069;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1529046538;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1529682304;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1529682304;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1533029410;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1533829432;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1539176686;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1549897311;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1550594263;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public Configuration getFlinkConfiguration();1550594263;Return the Flink configuration object._@return The Flink configuration object;public Configuration getFlinkConfiguration() {_		return flinkConfig.clone()__	};return,the,flink,configuration,object,return,the,flink,configuration,object;public,configuration,get,flink,configuration,return,flink,config,clone
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1466152678;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return new JobSubmissionResult(lastJobID)__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,new,job,submission,result,last,job,id,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1466152678;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return new JobSubmissionResult(lastJobID)__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,new,job,submission,result,last,job,id,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1466780434;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return new JobSubmissionResult(lastJobID)__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,new,job,submission,result,last,job,id,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1467379351;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return new JobSubmissionResult(lastJobID)__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,new,job,submission,result,last,job,id,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1467379351;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return new JobSubmissionResult(lastJobID)__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,new,job,submission,result,last,job,id,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1468944004;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1472030970;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1472132775;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1472485736;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1472487067;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new RuntimeException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,runtime,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1475676445;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramInvocationException("The program didn't contain Flink jobs. " +_						"Perhaps you forgot to call execute() on the execution environment.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,invocation,exception,the,program,didn,t,contain,flink,jobs,perhaps,you,forgot,to,call,execute,on,the,execution,environment,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException;1476696544;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramInvocationException("The program didn't contain Flink jobs. " +_						"Perhaps you forgot to call execute() on the execution environment.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,invocation,exception,the,program,didn,t,contain,flink,jobs,perhaps,you,forgot,to,call,execute,on,the,execution,environment,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1466152678;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1466152678;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1466780434;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1467379351;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1467379351;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1468944004;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1472030970;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1472132775;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1472485736;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1472487067;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1475676445;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1476696544;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath) 			throws CompilerException, ProgramInvocationException;1477319634;Runs a program on the Flink cluster to which this client is connected. The call blocks until the_execution is complete, and returns afterwards.__@param program The program to be executed._@param parallelism The default parallelism to use when running the program. The default parallelism is used_when the program does not set a parallelism by itself.__@throws CompilerException Thrown, if the compiler encounters an illegal situation._@throws ProgramInvocationException Thrown, if the program could not be instantiated from its jar file,_or if the submission failed. That might be either due to an I/O problem,_i.e. the job-manager is unreachable, or due to the fact that the_parallel execution failed.;public JobSubmissionResult run(JobWithJars program, int parallelism, String savepointPath)_			throws CompilerException, ProgramInvocationException {_		ClassLoader classLoader = program.getUserCodeClassLoader()__		if (classLoader == null) {_			throw new IllegalArgumentException("The given JobWithJars does not provide a usercode class loader.")__		}__		OptimizedPlan optPlan = getOptimizedPlan(compiler, program, parallelism)__		return run(optPlan, program.getJarFiles(), program.getClasspaths(), classLoader, savepointPath)__	};runs,a,program,on,the,flink,cluster,to,which,this,client,is,connected,the,call,blocks,until,the,execution,is,complete,and,returns,afterwards,param,program,the,program,to,be,executed,param,parallelism,the,default,parallelism,to,use,when,running,the,program,the,default,parallelism,is,used,when,the,program,does,not,set,a,parallelism,by,itself,throws,compiler,exception,thrown,if,the,compiler,encounters,an,illegal,situation,throws,program,invocation,exception,thrown,if,the,program,could,not,be,instantiated,from,its,jar,file,or,if,the,submission,failed,that,might,be,either,due,to,an,i,o,problem,i,e,the,job,manager,is,unreachable,or,due,to,the,fact,that,the,parallel,execution,failed;public,job,submission,result,run,job,with,jars,program,int,parallelism,string,savepoint,path,throws,compiler,exception,program,invocation,exception,class,loader,class,loader,program,get,user,code,class,loader,if,class,loader,null,throw,new,illegal,argument,exception,the,given,job,with,jars,does,not,provide,a,usercode,class,loader,optimized,plan,opt,plan,get,optimized,plan,compiler,program,parallelism,return,run,opt,plan,program,get,jar,files,program,get,classpaths,class,loader,savepoint,path
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1466152678;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1466152678;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1466780434;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1467379351;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1467379351;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1468944004;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1472030970;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1472132775;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1472485736;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1472487067;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1475676445;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1476696544;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1477319634;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1477570902;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1478068438;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1481907119;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1493821466;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1493975155;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1493975167;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1495284870;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1495441965;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1495441965;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1495778594;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1502355550;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1504172257;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1507569104;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1507715934;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1508078631;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1509004145;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1510063664;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515177486;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515686383;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515699606;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515700517;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515770043;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1515770044;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1516028608;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1517237717;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1518855442;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1519317159;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1519977153;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1520246439;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1520248329;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1520268868;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1521396720;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception;1521741862;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished._@param jobID The job identifier of a job._@param loader The class loader for deserializing the accumulator results._@return A Map containing the accumulator's name and its value.;public Map<String, Object> getAccumulators(JobID jobID, ClassLoader loader) throws Exception {_		ActorGateway jobManagerGateway = getJobManagerGateway()___		Future<Object> response__		try {_			response = jobManagerGateway.ask(new RequestAccumulatorResults(jobID), timeout)__		} catch (Exception e) {_			throw new Exception("Failed to query the job manager gateway for accumulators.", e)__		}__		Object result = Await.result(response, timeout)___		if (result instanceof AccumulatorResultsFound) {_			Map<String, SerializedValue<Object>> serializedAccumulators =_					((AccumulatorResultsFound) result).result()___			return AccumulatorHelper.deserializeAccumulators(serializedAccumulators, loader)___		} else if (result instanceof AccumulatorResultsErroneous) {_			throw ((AccumulatorResultsErroneous) result).cause()__		} else {_			throw new Exception("Failed to fetch accumulators for the job " + jobID + ".")__		}_	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,param,job,id,the,job,identifier,of,a,job,param,loader,the,class,loader,for,deserializing,the,accumulator,results,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,object,get,accumulators,job,id,job,id,class,loader,loader,throws,exception,actor,gateway,job,manager,gateway,get,job,manager,gateway,future,object,response,try,response,job,manager,gateway,ask,new,request,accumulator,results,job,id,timeout,catch,exception,e,throw,new,exception,failed,to,query,the,job,manager,gateway,for,accumulators,e,object,result,await,result,response,timeout,if,result,instanceof,accumulator,results,found,map,string,serialized,value,object,serialized,accumulators,accumulator,results,found,result,result,return,accumulator,helper,deserialize,accumulators,serialized,accumulators,loader,else,if,result,instanceof,accumulator,results,erroneous,throw,accumulator,results,erroneous,result,cause,else,throw,new,exception,failed,to,fetch,accumulators,for,the,job,job,id
ClusterClient -> public void shutdown() throws Exception;1493975167;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
ClusterClient -> public void shutdown() throws Exception;1495284870;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1495441965;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1495441965;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1495778594;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1502355550;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1504172257;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1507569104;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1507715934;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1508078631;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1509004145;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1510063664;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515177486;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515686383;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515699606;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515700517;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				actorSystemLoader.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,try,finalize,cluster,finally,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515770043;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1515770044;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1516028608;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1517237717;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1518855442;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1519317159;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1519977153;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1520246439;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1520248329;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1520268868;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1521396720;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1521741862;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1522049586;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1522066224;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1522132482;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1523641106;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1525116069;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1529046538;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.shutdown()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,shutdown,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1529682304;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1529682304;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1533029410;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1533829432;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1539176686;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1549897311;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1550594263;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public void shutdown() throws Exception;1550594263;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() throws Exception {_		synchronized (this) {_			actorSystemLoader.close()___			if (!sharedHaServices && highAvailabilityServices != null) {_				highAvailabilityServices.close()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,throws,exception,synchronized,this,actor,system,loader,close,if,shared,ha,services,high,availability,services,null,high,availability,services,close
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1493975167;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1495284870;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1495441965;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(flinkConfig, LOG)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1495441965;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			LOG)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1495778594;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1502355550;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1504172257;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1507569104;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1507715934;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1508078631;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1509004145;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1510063664;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515177486;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515686383;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515699606;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515700517;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515770043;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1515770044;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1516028608;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1517237717;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1518855442;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices);1519317159;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval;public ClusterClient(Configuration flinkConfig, HighAvailabilityServices highAvailabilityServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1517237717;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1518855442;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1519317159;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1519977153;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1520246439;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1520248329;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1520268868;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1521396720;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1521741862;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1522049586;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1522066224;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1522132482;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1523641106;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1525116069;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1529046538;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1529682304;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1529682304;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1533029410;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1533829432;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1539176686;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1549897311;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1550594263;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException;1550594263;Gets the current cluster connection info (may change in case of a HA setup).__@return The the connection info to the leader component of the cluster_@throws LeaderRetrievalException if the leader could not be retrieved;public LeaderConnectionInfo getClusterConnectionInfo() throws LeaderRetrievalException {_		return LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_			highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_			timeout)__	};gets,the,current,cluster,connection,info,may,change,in,case,of,a,ha,setup,return,the,the,connection,info,to,the,leader,component,of,the,cluster,throws,leader,retrieval,exception,if,the,leader,could,not,be,retrieved;public,leader,connection,info,get,cluster,connection,info,throws,leader,retrieval,exception,return,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1466152678;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_		String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__		int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__		return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1466152678;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_			String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__			int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__			return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1466780434;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_			String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__			int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__			return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1467379351;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_			String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__			int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__			return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1467379351;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager when it was last retrieved (may be outdated);public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_			String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__			int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__			return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager,when,it,was,last,retrieved,may,be,outdated;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddressFromConfig();1468944004;Gets the current JobManager address from the Flink configuration (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager when it was last retrieved (may be outdated);public InetSocketAddress getJobManagerAddressFromConfig() {_		try {_			String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__			int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__			return new InetSocketAddress(hostName, port)__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,from,the,flink,configuration,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager,when,it,was,last,retrieved,may,be,outdated;public,inet,socket,address,get,job,manager,address,from,config,try,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,return,new,inet,socket,address,host,name,port,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1466152678;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1466152678;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1466780434;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1467379351;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1467379351;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1468944004;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			final ActorRef jmActor = getJobManagerGateway().actor()__			return AkkaUtils.getInetSockeAddressFromAkkaURL(jmActor.path().toSerializationFormat())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,final,actor,ref,jm,actor,get,job,manager,gateway,actor,return,akka,utils,get,inet,socke,address,from,akka,url,jm,actor,path,to,serialization,format,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1472030970;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1472132775;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1472485736;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1472487067;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1475676445;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1476696544;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1477319634;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1477570902;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1478068438;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1481907119;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1493821466;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1493975155;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true), timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1493975167;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1495284870;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1495441965;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1495441965;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1495778594;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1502355550;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1504172257;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1507569104;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1507715934;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1508078631;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1509004145;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1510063664;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515177486;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515686383;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515699606;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515700517;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515770043;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1515770044;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSockeAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socke,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> public InetSocketAddress getJobManagerAddress();1516028608;Gets the current JobManager address (may change in case of a HA setup)._@return The address (host and port) of the leading JobManager;public InetSocketAddress getJobManagerAddress() {_		try {_			LeaderConnectionInfo leaderConnectionInfo =_				LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_					highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_					timeout)___			return AkkaUtils.getInetSocketAddressFromAkkaURL(leaderConnectionInfo.getAddress())__		} catch (Exception e) {_			throw new RuntimeException("Failed to retrieve JobManager address", e)__		}_	};gets,the,current,job,manager,address,may,change,in,case,of,a,ha,setup,return,the,address,host,and,port,of,the,leading,job,manager;public,inet,socket,address,get,job,manager,address,try,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,return,akka,utils,get,inet,socket,address,from,akka,url,leader,connection,info,get,address,catch,exception,e,throw,new,runtime,exception,failed,to,retrieve,job,manager,address,e
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1467379351;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1468944004;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1472030970;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1472132775;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1472485736;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1472487067;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1475676445;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1476696544;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1477319634;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1477570902;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1478068438;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1481907119;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1493821466;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1493975155;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1493975167;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1495284870;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get();1495441965;Creates a new ActorSystem or returns an existing one._@return ActorSystem;public ActorSystem get() {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				String hostName = flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null)__				int port = flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, -1)__				if (hostName == null || port == -1) {_					throw new RuntimeException("The initial JobManager address has not been set correctly.")__				}_				InetSocketAddress initialJobManagerAddress = new InetSocketAddress(hostName, port)___				_				_				InetAddress ownHostname__				try {_					ownHostname = ConnectionUtils.findConnectingAddress(initialJobManagerAddress, 2000, 400)__				} catch (IOException e) {_					throw new RuntimeException("Failed to resolve JobManager address at " + initialJobManagerAddress, e)__				}_				actorSystem = AkkaUtils.createActorSystem(flinkConfig,_					new Some<>(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system;public,actor,system,get,if,is,loaded,log,info,starting,client,actor,system,string,host,name,flink,config,get,string,config,constants,null,int,port,flink,config,get,integer,config,constants,1,if,host,name,null,port,1,throw,new,runtime,exception,the,initial,job,manager,address,has,not,been,set,correctly,inet,socket,address,initial,job,manager,address,new,inet,socket,address,host,name,port,inet,address,own,hostname,try,own,hostname,connection,utils,find,connecting,address,initial,job,manager,address,2000,400,catch,ioexception,e,throw,new,runtime,exception,failed,to,resolve,job,manager,address,at,initial,job,manager,address,e,actor,system,akka,utils,create,actor,system,flink,config,new,some,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,return,actor,system
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1466152678;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1466152678;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1466780434;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1467379351;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1467379351;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1468944004;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1472030970;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1472132775;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1472485736;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1472487067;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1475676445;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1476696544;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1477319634;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1477570902;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1478068438;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1481907119;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1493821466;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1493975155;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1493975167;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1495284870;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1495441965;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1495441965;Returns the latest cluster status, with number of Taskmanagers and slots;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1495778594;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1502355550;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1504172257;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1507569104;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1507715934;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1508078631;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1509004145;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1510063664;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515177486;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515686383;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515699606;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515700517;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515770043;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1515770044;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1516028608;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1517237717;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1518855442;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1519317159;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1519977153;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1520246439;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1520248329;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1520268868;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1521396720;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1521741862;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1522049586;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1522066224;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1522132482;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1523641106;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1525116069;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1529046538;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1529682304;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1529682304;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1533029410;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1533829432;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1539176686;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1549897311;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1550594263;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public abstract GetClusterStatusResponse getClusterStatus()_;1550594263;Returns the latest cluster status, with number of Taskmanagers and slots.;public abstract GetClusterStatusResponse getClusterStatus()_;returns,the,latest,cluster,status,with,number,of,taskmanagers,and,slots;public,abstract,get,cluster,status,response,get,cluster,status
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1515699606;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1515700517;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1515770043;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1515770044;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1516028608;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1517237717;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1518855442;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1519317159;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1519977153;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1520246439;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1520248329;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CoreOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,core,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1520268868;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1521396720;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1521741862;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1522049586;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1522066224;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1522132482;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1523641106;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1525116069;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1529046538;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1529682304;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1529682304;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1533029410;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1533829432;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1539176686;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1549897311;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1550594263;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException;1550594263;Triggers a savepoint for the job identified by the job id. The savepoint will be written to the given savepoint_directory, or {@link org.apache.flink.configuration.CheckpointingOptions#SAVEPOINT_DIRECTORY} if it is null.__@param jobId job id_@param savepointDirectory directory the savepoint should be written to_@return path future where the savepoint is located_@throws FlinkException if no connection to the cluster could be established;public CompletableFuture<String> triggerSavepoint(JobID jobId, @Nullable String savepointDirectory) throws FlinkException {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.TriggerSavepoint(jobId, Option.<String>apply(savepointDirectory)),_			new FiniteDuration(1, TimeUnit.HOURS))__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof JobManagerMessages.TriggerSavepointSuccess) {_				JobManagerMessages.TriggerSavepointSuccess success = (JobManagerMessages.TriggerSavepointSuccess) responseMessage__				return success.savepointPath()__			} else if (responseMessage instanceof JobManagerMessages.TriggerSavepointFailure) {_				JobManagerMessages.TriggerSavepointFailure failure = (JobManagerMessages.TriggerSavepointFailure) responseMessage__				throw new CompletionException(failure.cause())__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};triggers,a,savepoint,for,the,job,identified,by,the,job,id,the,savepoint,will,be,written,to,the,given,savepoint,directory,or,link,org,apache,flink,configuration,checkpointing,options,if,it,is,null,param,job,id,job,id,param,savepoint,directory,directory,the,savepoint,should,be,written,to,return,path,future,where,the,savepoint,is,located,throws,flink,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,string,trigger,savepoint,job,id,job,id,nullable,string,savepoint,directory,throws,flink,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,trigger,savepoint,job,id,option,string,apply,savepoint,directory,new,finite,duration,1,time,unit,hours,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,job,manager,messages,trigger,savepoint,success,job,manager,messages,trigger,savepoint,success,success,job,manager,messages,trigger,savepoint,success,response,message,return,success,savepoint,path,else,if,response,message,instanceof,job,manager,messages,trigger,savepoint,failure,job,manager,messages,trigger,savepoint,failure,failure,job,manager,messages,trigger,savepoint,failure,response,message,throw,new,completion,exception,failure,cause,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1493821466;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1493975155;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true)__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not create the leader retrieval service", e)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				leaderRetrievalService,_				timeout,_				printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,create,the,leader,retrieval,service,e,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,leader,retrieval,service,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1493975167;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				highAvailabilityServices,_				timeout,_				printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1495284870;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				highAvailabilityServices,_				timeout,_				printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1495441965;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_				jobID,_				jobManagerGateway,_				flinkConfig,_				actorSystemLoader.get(),_				highAvailabilityServices,_				timeout,_				printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,loader,get,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1495441965;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1495778594;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new JobRetrievalException(jobID, "Could not retrieve the JobManager Gateway", e)__		}__		return JobClient.attachToRunningJob(_			jobID,_			jobManagerGateway,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,job,retrieval,exception,job,id,could,not,retrieve,the,job,manager,gateway,e,return,job,client,attach,to,running,job,job,id,job,manager,gateway,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1502355550;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1504172257;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1507569104;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1507715934;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1508078631;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1509004145;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1510063664;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515177486;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515686383;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515699606;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515700517;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515770043;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1515770044;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1516028608;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1517237717;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1518855442;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1519317159;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1519977153;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1520246439;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1520248329;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1520268868;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1521396720;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1521741862;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1522049586;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1522066224;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1522132482;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1523641106;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1525116069;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1529046538;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1529682304;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1529682304;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1533029410;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1533829432;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException;1539176686;Reattaches to a running job with the given job id.__@param jobID The job id of the job to attach to_@return The JobExecutionResult for the jobID_@throws JobExecutionException if an error occurs during monitoring the job execution;public JobListeningContext connectToJob(JobID jobID) throws JobExecutionException {_		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new JobExecutionException(_				jobID,_				"Could not start the ActorSystem needed to talk to the JobManager.",_				fe)__		}__		return JobClient.attachToRunningJob(_			jobID,_			flinkConfig,_			actorSystem,_			highAvailabilityServices,_			timeout,_			printStatusDuringExecution)__	};reattaches,to,a,running,job,with,the,given,job,id,param,job,id,the,job,id,of,the,job,to,attach,to,return,the,job,execution,result,for,the,job,id,throws,job,execution,exception,if,an,error,occurs,during,monitoring,the,job,execution;public,job,listening,context,connect,to,job,job,id,job,id,throws,job,execution,exception,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,job,execution,exception,job,id,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,return,job,client,attach,to,running,job,job,id,flink,config,actor,system,high,availability,services,timeout,print,status,during,execution
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466152678;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			this.lastJobID = jobGraph.getJobID()__			return JobClient.submitJobAndWait(actorSystem,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,this,last,job,id,job,graph,get,job,id,return,job,client,submit,job,and,wait,actor,system,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466152678;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			this.lastJobID = jobGraph.getJobID()__			return JobClient.submitJobAndWait(actorSystem,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,this,last,job,id,job,graph,get,job,id,return,job,client,submit,job,and,wait,actor,system,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466780434;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			this.lastJobID = jobGraph.getJobID()__			return JobClient.submitJobAndWait(actorSystem,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,this,last,job,id,job,graph,get,job,id,return,job,client,submit,job,and,wait,actor,system,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1467379351;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobID = jobGraph.getJobID()__			return JobClient.submitJobAndWait(actorSystem,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,id,job,graph,get,job,id,return,job,client,submit,job,and,wait,actor,system,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1467379351;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobID = jobGraph.getJobID()__			return JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,id,job,graph,get,job,id,return,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1468944004;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472030970;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472132775;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472485736;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472487067;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1475676445;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(),_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1476696544;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1477319634;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1477570902;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1478068438;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1481907119;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493821466;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493975155;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final LeaderRetrievalService leaderRetrievalService__		try {_			leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(flinkConfig, true)__		} catch (Exception e) {_			throw new ProgramInvocationException("Could not create the leader retrieval service", e)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(actorSystemLoader.get(), flinkConfig,_				leaderRetrievalService, jobGraph, timeout, printStatusDuringExecution, classLoader)__			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,leader,retrieval,service,leader,retrieval,service,try,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,flink,config,true,catch,exception,e,throw,new,program,invocation,exception,could,not,create,the,leader,retrieval,service,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,leader,retrieval,service,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493975167;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystemLoader.get(),_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495284870;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystemLoader.get(),_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495441965;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystemLoader.get(),_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return this.lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,loader,get,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,this,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495441965;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495778594;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1502355550;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1504172257;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1507569104;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1507715934;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1508078631;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1509004145;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1510063664;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515177486;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515686383;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515699606;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515700517;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515770043;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515770044;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1516028608;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1517237717;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1518855442;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1519317159;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1519977153;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520246439;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520248329;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520268868;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1521396720;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1521741862;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522049586;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522066224;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522132482;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1523641106;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1525116069;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529046538;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529682304;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529682304;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1533029410;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1533829432;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1539176686;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1549897311;Submits a JobGraph blocking._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobExecutionResult_@throws ProgramInvocationException;public JobExecutionResult run(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorSystem actorSystem___		try {_			actorSystem = actorSystemLoader.get()__		} catch (FlinkException fe) {_			throw new ProgramInvocationException("Could not start the ActorSystem needed to talk to the " +_				"JobManager.", jobGraph.getJobID(), fe)__		}__		try {_			logAndSysout("Submitting job with JobID: " + jobGraph.getJobID() + ". Waiting for job completion.")__			this.lastJobExecutionResult = JobClient.submitJobAndWait(_				actorSystem,_				flinkConfig,_				highAvailabilityServices,_				jobGraph,_				timeout,_				printStatusDuringExecution,_				classLoader)___			return lastJobExecutionResult__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,blocking,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,execution,result,throws,program,invocation,exception;public,job,execution,result,run,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,system,actor,system,try,actor,system,actor,system,loader,get,catch,flink,exception,fe,throw,new,program,invocation,exception,could,not,start,the,actor,system,needed,to,talk,to,the,job,manager,job,graph,get,job,id,fe,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,waiting,for,job,completion,this,last,job,execution,result,job,client,submit,job,and,wait,actor,system,flink,config,high,availability,services,job,graph,timeout,print,status,during,execution,class,loader,return,last,job,execution,result,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1466152678;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1466152678;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1466780434;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1467379351;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1467379351;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1468944004;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1472030970;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1472132775;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1472485736;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1472487067;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1475676445;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1476696544;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1477319634;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1477570902;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1478068438;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1481907119;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1493821466;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1493975155;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1493975167;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1495284870;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1495441965;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1495441965;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()__		_		for (JobID jid : jobIds) {_			if (jid != null) {_				LOG.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1495778594;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1502355550;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1504172257;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1507569104;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1507715934;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1508078631;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1509004145;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1510063664;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515177486;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515686383;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515699606;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515700517;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515770043;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1515770044;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1516028608;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1517237717;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1518855442;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1519317159;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1519977153;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1520246439;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1520248329;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1520268868;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1521396720;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1521741862;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1522049586;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1522066224;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1522132482;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1523641106;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1525116069;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1529046538;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1529682304;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1529682304;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1533029410;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1533829432;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1539176686;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1549897311;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1550594263;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public void endSessions(List<JobID> jobIds) throws Exception;1550594263;Tells the JobManager to finish the sessions (jobs) defined by the given IDs.__@param jobIds The IDs that identify the sessions.;public void endSessions(List<JobID> jobIds) throws Exception {_		if (jobIds == null) {_			throw new IllegalArgumentException("The JobIDs must not be null")__		}__		ActorGateway jobManagerGateway = getJobManagerGateway()___		for (JobID jid : jobIds) {_			if (jid != null) {_				log.info("Telling job manager to end the session {}.", jid)__				jobManagerGateway.tell(new JobManagerMessages.RemoveCachedJob(jid))__			}_		}_	};tells,the,job,manager,to,finish,the,sessions,jobs,defined,by,the,given,ids,param,job,ids,the,ids,that,identify,the,sessions;public,void,end,sessions,list,job,id,job,ids,throws,exception,if,job,ids,null,throw,new,illegal,argument,exception,the,job,ids,must,not,be,null,actor,gateway,job,manager,gateway,get,job,manager,gateway,for,job,id,jid,job,ids,if,jid,null,log,info,telling,job,manager,to,end,the,session,jid,job,manager,gateway,tell,new,job,manager,messages,remove,cached,job,jid
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1477570902;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1478068438;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1481907119;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1493821466;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1493975155;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1493975167;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1495284870;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1495441965;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1495441965;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1495778594;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1502355550;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1504172257;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1507569104;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1507715934;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1508078631;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1509004145;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1510063664;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515177486;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515686383;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515699606;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515700517;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515770043;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1515770044;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1516028608;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1517237717;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1518855442;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1519317159;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1519977153;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1520246439;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1520248329;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1520268868;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1521396720;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1521741862;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1522049586;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1522066224;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1522132482;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1523641106;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1525116069;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1529046538;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1529682304;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1529682304;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1533029410;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1533829432;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1539176686;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1549897311;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1550594263;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;1550594263;Returns true if the client already has the user jar and providing it again would_result in duplicate uploading of the jar.;public abstract boolean hasUserJarsInClassPath(List<URL> userJarFiles)_;returns,true,if,the,client,already,has,the,user,jar,and,providing,it,again,would,result,in,duplicate,uploading,of,the,jar;public,abstract,boolean,has,user,jars,in,class,path,list,url,user,jar,files
ClusterClient -> public void endSession(JobID jobId) throws Exception;1466152678;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1466152678;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1466780434;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1467379351;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1467379351;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1468944004;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1472030970;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1472132775;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1472485736;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1472487067;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1475676445;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1476696544;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1477319634;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1477570902;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1478068438;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1481907119;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1493821466;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1493975155;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1493975167;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1495284870;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1495441965;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1495441965;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1495778594;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1502355550;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1504172257;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1507569104;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1507715934;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1508078631;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1509004145;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1510063664;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515177486;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515686383;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515699606;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515700517;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515770043;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1515770044;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1516028608;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1517237717;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1518855442;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1519317159;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1519977153;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1520246439;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1520248329;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1520268868;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1521396720;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1521741862;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1522049586;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1522066224;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1522132482;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1523641106;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1525116069;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1529046538;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1529682304;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1529682304;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1533029410;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1533829432;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1539176686;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1549897311;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1550594263;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void endSession(JobID jobId) throws Exception;1550594263;Tells the JobManager to finish the session (job) defined by the given ID.__@param jobId The ID that identifies the session.;public void endSession(JobID jobId) throws Exception {_		if (jobId == null) {_			throw new IllegalArgumentException("The JobID must not be null.")__		}_		endSessions(Collections.singletonList(jobId))__	};tells,the,job,manager,to,finish,the,session,job,defined,by,the,given,id,param,job,id,the,id,that,identifies,the,session;public,void,end,session,job,id,job,id,throws,exception,if,job,id,null,throw,new,illegal,argument,exception,the,job,id,must,not,be,null,end,sessions,collections,singleton,list,job,id
ClusterClient -> public void setDetached(boolean isDetached);1466152678;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1466152678;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1466780434;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1467379351;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1467379351;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1468944004;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1472030970;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1472132775;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1472485736;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1472487067;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1475676445;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1476696544;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1477319634;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1477570902;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1478068438;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1481907119;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1493821466;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1493975155;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1493975167;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1495284870;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1495441965;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1495441965;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1495778594;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1502355550;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1504172257;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1507569104;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1507715934;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1508078631;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1509004145;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1510063664;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515177486;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515686383;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515699606;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515700517;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515770043;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1515770044;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1516028608;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1517237717;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1518855442;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1519317159;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1519977153;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1520246439;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1520248329;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1520268868;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1521396720;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1521741862;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1522049586;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1522066224;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1522132482;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1523641106;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1525116069;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1529046538;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1529682304;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1529682304;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1533029410;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1533829432;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1539176686;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1549897311;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1550594263;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void setDetached(boolean isDetached);1550594263;Set the mode of this client (detached or blocking job execution)._@param isDetached If true, the client will submit programs detached via the {@code run} method;public void setDetached(boolean isDetached) {_		this.detachedJobSubmission = isDetached__	};set,the,mode,of,this,client,detached,or,blocking,job,execution,param,is,detached,if,true,the,client,will,submit,programs,detached,via,the,code,run,method;public,void,set,detached,boolean,is,detached,this,detached,job,submission,is,detached
ClusterClient -> public void shutdown();1466152678;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		try {_			finalizeCluster()__		} finally {_			if (!this.actorSystem.isTerminated()) {_				this.actorSystem.shutdown()__				this.actorSystem.awaitTermination()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,try,finalize,cluster,finally,if,this,actor,system,is,terminated,this,actor,system,shutdown,this,actor,system,await,termination
ClusterClient -> public void shutdown();1466152678;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		try {_			finalizeCluster()__		} finally {_			if (!this.actorSystem.isTerminated()) {_				this.actorSystem.shutdown()__				this.actorSystem.awaitTermination()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,try,finalize,cluster,finally,if,this,actor,system,is,terminated,this,actor,system,shutdown,this,actor,system,await,termination
ClusterClient -> public void shutdown();1466780434;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				if (!this.actorSystem.isTerminated()) {_					this.actorSystem.shutdown()__					this.actorSystem.awaitTermination()__				}_			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,if,this,actor,system,is,terminated,this,actor,system,shutdown,this,actor,system,await,termination
ClusterClient -> public void shutdown();1467379351;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				if (!this.actorSystem.isTerminated()) {_					this.actorSystem.shutdown()__					this.actorSystem.awaitTermination()__				}_			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,if,this,actor,system,is,terminated,this,actor,system,shutdown,this,actor,system,await,termination
ClusterClient -> public void shutdown();1467379351;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1468944004;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1472030970;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1472132775;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1472485736;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1472487067;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1475676445;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1476696544;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1477319634;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1477570902;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1478068438;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1481907119;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1493821466;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> public void shutdown();1493975155;Shuts down the client. This stops the internal actor system and actors.;public void shutdown() {_		synchronized (this) {_			try {_				finalizeCluster()__			} finally {_				this.actorSystemLoader.shutdown()__			}_		}_	};shuts,down,the,client,this,stops,the,internal,actor,system,and,actors;public,void,shutdown,synchronized,this,try,finalize,cluster,finally,this,actor,system,loader,shutdown
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1467379351;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1468944004;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1472030970;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1472132775;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1472485736;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1472487067;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1475676445;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1476696544;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1477319634;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1477570902;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1478068438;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1481907119;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1493821466;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1493975155;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1493975167;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1495284870;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1495441965;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1495441965;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1495778594;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1502355550;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1504172257;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1507569104;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1507715934;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1508078631;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1509004145;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1510063664;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515177486;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515686383;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515699606;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515700517;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515770043;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1515770044;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1516028608;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1517237717;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1518855442;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1519317159;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1519977153;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1520246439;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1520248329;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1520268868;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1521396720;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1521741862;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1522049586;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1522066224;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1522132482;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1523641106;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1525116069;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1529046538;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1529682304;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1529682304;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1533029410;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1533829432;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1539176686;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1549897311;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1550594263;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> LazyActorSystemLoader -> public boolean isLoaded();1550594263;Indicates whether the ActorSystem has already been instantiated._@return boolean True if it exists, False otherwise;public boolean isLoaded() {_			return actorSystem != null__		};indicates,whether,the,actor,system,has,already,been,instantiated,return,boolean,true,if,it,exists,false,otherwise;public,boolean,is,loaded,return,actor,system,null
ClusterClient -> public abstract String getClusterIdentifier()_;1467379351;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1468944004;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1472030970;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1472132775;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1472485736;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1472487067;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1475676445;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1476696544;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1477319634;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1477570902;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1478068438;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1481907119;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1493821466;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1493975155;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1493975167;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1495284870;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1495441965;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1495441965;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1495778594;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1502355550;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1504172257;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1507569104;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1507715934;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1508078631;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1509004145;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1510063664;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1515177486;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1515686383;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1515699606;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1515700517;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public abstract String getClusterIdentifier()_;1515770043;Returns a string representation of the cluster.;public abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;public,abstract,string,get,cluster,identifier
ClusterClient -> public void cancel(JobID jobId) throws Exception;1466152678;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1466152678;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1466780434;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1467379351;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1467379351;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1468944004;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1472030970;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			LOG.info("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			LOG.info("Job cancellation with ID " + jobId + " failed.", t)__			throw new Exception("Failed to cancel the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,info,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,info,job,cancellation,with,id,job,id,failed,t,throw,new,exception,failed,to,cancel,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1472132775;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1472485736;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1472487067;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1475676445;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1476696544;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1477319634;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1477570902;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1478068438;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1481907119;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1493821466;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1493975155;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1493975167;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1495284870;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1495441965;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1495441965;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1495778594;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1502355550;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1504172257;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.CancelJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.CancellationSuccess) {_			logAndSysout("Job cancellation with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.CancellationFailure) {_			final Throwable t = ((JobManagerMessages.CancellationFailure) result).cause()__			logAndSysout("Job cancellation with ID " + jobId + " failed because of " + t.getMessage())__			throw new Exception("Failed to cancel the job with id " + jobId, t)__		} else {_			throw new Exception("Unknown message received while cancelling: " + result.getClass().getName())__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,cancel,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,cancellation,success,log,and,sysout,job,cancellation,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,cancellation,failure,final,throwable,t,job,manager,messages,cancellation,failure,result,cause,log,and,sysout,job,cancellation,with,id,job,id,failed,because,of,t,get,message,throw,new,exception,failed,to,cancel,the,job,with,id,job,id,t,else,throw,new,exception,unknown,message,received,while,cancelling,result,get,class,get,name
ClusterClient -> public void cancel(JobID jobId) throws Exception;1507569104;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1507715934;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1508078631;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1509004145;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1510063664;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515177486;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515686383;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515699606;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515700517;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515770043;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1515770044;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1516028608;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1517237717;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1518855442;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1519317159;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1519977153;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1520246439;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1520248329;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1520268868;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1521396720;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1521741862;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1522049586;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1522066224;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1522132482;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1523641106;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1525116069;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1529046538;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1529682304;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1529682304;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1533029410;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1533829432;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1539176686;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1549897311;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1550594263;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void cancel(JobID jobId) throws Exception;1550594263;Cancels a job identified by the job id._@param jobId the job id_@throws Exception In case an error occurred.;public void cancel(JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Object cancelMsg = new JobManagerMessages.CancelJob(jobId)___		Future<Object> response = jobManager.ask(cancelMsg, timeout)__		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.CancellationSuccess) {_			_		} else if (rc instanceof JobManagerMessages.CancellationFailure) {_			throw new Exception("Canceling the job with ID " + jobId + " failed.",_				((JobManagerMessages.CancellationFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};cancels,a,job,identified,by,the,job,id,param,job,id,the,job,id,throws,exception,in,case,an,error,occurred;public,void,cancel,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,object,cancel,msg,new,job,manager,messages,cancel,job,job,id,future,object,response,job,manager,ask,cancel,msg,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,cancellation,success,else,if,rc,instanceof,job,manager,messages,cancellation,failure,throw,new,exception,canceling,the,job,with,id,job,id,failed,job,manager,messages,cancellation,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public abstract List<String> getNewMessages()_;1515770043;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1515770044;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1516028608;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1517237717;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1518855442;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1519317159;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1519977153;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1520246439;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1520248329;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1520268868;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1521396720;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1521741862;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1522049586;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1522066224;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1522132482;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1523641106;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1525116069;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1529046538;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1529682304;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1529682304;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1533029410;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1533829432;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1539176686;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1549897311;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1550594263;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public abstract List<String> getNewMessages()_;1550594263;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;public abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;public,abstract,list,string,get,new,messages
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1477319634;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {_			return run(prog.getPlanWithJars(), parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, prog.getAllLibraries(),_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,return,run,prog,get,plan,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,context,environment,factory,factory,new,context,environment,factory,this,prog,get,all,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1477570902;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointPath())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointPath())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,path,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,path,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1478068438;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1481907119;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1493821466;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1493975155;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1493975167;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1495284870;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1495441965;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1495441965;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException_	{_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			LOG.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1495778594;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1502355550;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException()__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1504172257;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1507569104;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1507715934;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1508078631;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1509004145;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1510063664;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515177486;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515686383;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515699606;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515700517;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515770043;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1515770044;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1516028608;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1517237717;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1518855442;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1519317159;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1519977153;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1520246439;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1520248329;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1520268868;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1521396720;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1521741862;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1522049586;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1522066224;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1522132482;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode")___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1523641106;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1525116069;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1529046538;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1529682304;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1529682304;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1533029410;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1533829432;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1539176686;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1549897311;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1550594263;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult run(PackagedProgram prog, int parallelism) 			throws ProgramInvocationException, ProgramMissingJobException;1550594263;General purpose method to run a user jar from the CliFrontend in either blocking or detached mode, depending_on whether {@code setDetached(true)} or {@code setDetached(false)}._@param prog the packaged program_@param parallelism the parallelism to execute the contained Flink job_@return The result of the execution_@throws ProgramMissingJobException_@throws ProgramInvocationException;public JobSubmissionResult run(PackagedProgram prog, int parallelism)_			throws ProgramInvocationException, ProgramMissingJobException {_		Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader())__		if (prog.isUsingProgramEntryPoint()) {__			final JobWithJars jobWithJars__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				jobWithJars = prog.getPlanWithoutJars()__			} else {_				jobWithJars = prog.getPlanWithJars()__			}__			return run(jobWithJars, parallelism, prog.getSavepointSettings())__		}_		else if (prog.isUsingInteractiveMode()) {_			log.info("Starting program in interactive mode (detached: {})", isDetached())___			final List<URL> libraries__			if (hasUserJarsInClassPath(prog.getAllLibraries())) {_				libraries = Collections.emptyList()__			} else {_				libraries = prog.getAllLibraries()__			}__			ContextEnvironmentFactory factory = new ContextEnvironmentFactory(this, libraries,_					prog.getClasspaths(), prog.getUserCodeClassLoader(), parallelism, isDetached(),_					prog.getSavepointSettings())__			ContextEnvironment.setAsContext(factory)___			try {_				_				prog.invokeInteractiveModeForExecution()__				if (lastJobExecutionResult == null && factory.getLastEnvCreated() == null) {_					throw new ProgramMissingJobException("The program didn't contain a Flink job.")__				}_				if (isDetached()) {_					_					return ((DetachedEnvironment) factory.getLastEnvCreated()).finalizeExecute()__				}_				else {_					_					return this.lastJobExecutionResult__				}_			}_			finally {_				ContextEnvironment.unsetContext()__			}_		}_		else {_			throw new ProgramInvocationException("PackagedProgram does not have a valid invocation mode.")__		}_	};general,purpose,method,to,run,a,user,jar,from,the,cli,frontend,in,either,blocking,or,detached,mode,depending,on,whether,code,set,detached,true,or,code,set,detached,false,param,prog,the,packaged,program,param,parallelism,the,parallelism,to,execute,the,contained,flink,job,return,the,result,of,the,execution,throws,program,missing,job,exception,throws,program,invocation,exception;public,job,submission,result,run,packaged,program,prog,int,parallelism,throws,program,invocation,exception,program,missing,job,exception,thread,current,thread,set,context,class,loader,prog,get,user,code,class,loader,if,prog,is,using,program,entry,point,final,job,with,jars,job,with,jars,if,has,user,jars,in,class,path,prog,get,all,libraries,job,with,jars,prog,get,plan,without,jars,else,job,with,jars,prog,get,plan,with,jars,return,run,job,with,jars,parallelism,prog,get,savepoint,settings,else,if,prog,is,using,interactive,mode,log,info,starting,program,in,interactive,mode,detached,is,detached,final,list,url,libraries,if,has,user,jars,in,class,path,prog,get,all,libraries,libraries,collections,empty,list,else,libraries,prog,get,all,libraries,context,environment,factory,factory,new,context,environment,factory,this,libraries,prog,get,classpaths,prog,get,user,code,class,loader,parallelism,is,detached,prog,get,savepoint,settings,context,environment,set,as,context,factory,try,prog,invoke,interactive,mode,for,execution,if,last,job,execution,result,null,factory,get,last,env,created,null,throw,new,program,missing,job,exception,the,program,didn,t,contain,a,flink,job,if,is,detached,return,detached,environment,factory,get,last,env,created,finalize,execute,else,return,this,last,job,execution,result,finally,context,environment,unset,context,else,throw,new,program,invocation,exception,packaged,program,does,not,have,a,valid,invocation,mode
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466152678;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466152678;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1466780434;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1467379351;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1467379351;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1468944004;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472030970;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472132775;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {_		ActorGateway jobManagerGateway___		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472485736;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1472487067;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1475676445;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1476696544;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1477319634;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1477570902;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1478068438;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1481907119;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493821466;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493975155;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1493975167;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495284870;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495441965;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495441965;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1495778594;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(jobManagerGateway, flinkConfig, jobGraph, timeout, classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,job,manager,gateway,flink,config,job,graph,timeout,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1502355550;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1504172257;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1507569104;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1507715934;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1508078631;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1509004145;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1510063664;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515177486;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515686383;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515699606;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515700517;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515770043;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1515770044;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1516028608;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1517237717;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1518855442;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1519317159;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1519977153;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520246439;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520248329;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1520268868;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1521396720;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1521741862;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522049586;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522066224;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1522132482;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1523641106;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1525116069;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.", e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529046538;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529682304;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1529682304;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1533029410;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1533829432;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1539176686;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1549897311;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException;1550594263;Submits a JobGraph detached._@param jobGraph The JobGraph_@param classLoader User code class loader to deserialize the results and errors (may contain custom classes)._@return JobSubmissionResult_@throws ProgramInvocationException;public JobSubmissionResult runDetached(JobGraph jobGraph, ClassLoader classLoader) throws ProgramInvocationException {__		waitForClusterToBeReady()___		final ActorGateway jobManagerGateway__		try {_			jobManagerGateway = getJobManagerGateway()__		} catch (Exception e) {_			throw new ProgramInvocationException("Failed to retrieve the JobManager gateway.",_				jobGraph.getJobID(), e)__		}__		try {_			logAndSysout("Submitting Job with JobID: " + jobGraph.getJobID() + ". Returning after job submission.")__			JobClient.submitJobDetached(_				new AkkaJobManagerGateway(jobManagerGateway),_				flinkConfig,_				jobGraph,_				Time.milliseconds(timeout.toMillis()),_				classLoader)__			return new JobSubmissionResult(jobGraph.getJobID())__		} catch (JobExecutionException e) {_			throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),_				jobGraph.getJobID(), e)__		}_	};submits,a,job,graph,detached,param,job,graph,the,job,graph,param,class,loader,user,code,class,loader,to,deserialize,the,results,and,errors,may,contain,custom,classes,return,job,submission,result,throws,program,invocation,exception;public,job,submission,result,run,detached,job,graph,job,graph,class,loader,class,loader,throws,program,invocation,exception,wait,for,cluster,to,be,ready,final,actor,gateway,job,manager,gateway,try,job,manager,gateway,get,job,manager,gateway,catch,exception,e,throw,new,program,invocation,exception,failed,to,retrieve,the,job,manager,gateway,job,graph,get,job,id,e,try,log,and,sysout,submitting,job,with,job,id,job,graph,get,job,id,returning,after,job,submission,job,client,submit,job,detached,new,akka,job,manager,gateway,job,manager,gateway,flink,config,job,graph,time,milliseconds,timeout,to,millis,class,loader,return,new,job,submission,result,job,graph,get,job,id,catch,job,execution,exception,e,throw,new,program,invocation,exception,the,program,execution,failed,e,get,message,job,graph,get,job,id,e
ClusterClient -> protected abstract List<String> getNewMessages()_;1466152678;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1466152678;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1466780434;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1467379351;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1467379351;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1468944004;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1472030970;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1472132775;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1472485736;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1472487067;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1475676445;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1476696544;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1477319634;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1477570902;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1478068438;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1481907119;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1493821466;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1493975155;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1493975167;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1495284870;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1495441965;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1495441965;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1495778594;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1502355550;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1504172257;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1507569104;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1507715934;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1508078631;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1509004145;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1510063664;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1515177486;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1515686383;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1515699606;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract List<String> getNewMessages()_;1515700517;May return new messages from the cluster._Messages can be for example about failed containers or container launch requests.;protected abstract List<String> getNewMessages()_;may,return,new,messages,from,the,cluster,messages,can,be,for,example,about,failed,containers,or,container,launch,requests;protected,abstract,list,string,get,new,messages
ClusterClient -> protected abstract String getClusterIdentifier()_;1466152678;Returns a string representation of the cluster.;protected abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;protected,abstract,string,get,cluster,identifier
ClusterClient -> protected abstract String getClusterIdentifier()_;1466152678;Returns a string representation of the cluster.;protected abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;protected,abstract,string,get,cluster,identifier
ClusterClient -> protected abstract String getClusterIdentifier()_;1466780434;Returns a string representation of the cluster.;protected abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;protected,abstract,string,get,cluster,identifier
ClusterClient -> protected abstract String getClusterIdentifier()_;1467379351;Returns a string representation of the cluster.;protected abstract String getClusterIdentifier()_;returns,a,string,representation,of,the,cluster;protected,abstract,string,get,cluster,identifier
ClusterClient -> public abstract int getMaxSlots()_;1466152678;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1466152678;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1466780434;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1467379351;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1467379351;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1468944004;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1472030970;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1472132775;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1472485736;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1472487067;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1475676445;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1476696544;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1477319634;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1477570902;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1478068438;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1481907119;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1493821466;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1493975155;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1493975167;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1495284870;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1495441965;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1495441965;The client may define an upper limit on the number of slots to use_@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1495778594;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1502355550;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1504172257;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1507569104;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1507715934;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1508078631;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1509004145;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1510063664;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515177486;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515686383;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515699606;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515700517;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515770043;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1515770044;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1516028608;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1517237717;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1518855442;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1519317159;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1519977153;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1520246439;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1520248329;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1520268868;The client may define an upper limit on the number of slots to use._@return -1 if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,1,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1521396720;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1521741862;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1522049586;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1522066224;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1522132482;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1523641106;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1525116069;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1529046538;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1529682304;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1529682304;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1533029410;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1533829432;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1539176686;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1549897311;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1550594263;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public abstract int getMaxSlots()_;1550594263;The client may define an upper limit on the number of slots to use._@return <tt>-1</tt> ({@link #MAX_SLOTS_UNKNOWN}) if unknown;public abstract int getMaxSlots()_;the,client,may,define,an,upper,limit,on,the,number,of,slots,to,use,return,tt,1,tt,link,if,unknown;public,abstract,int,get,max,slots
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1519317159;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1519977153;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1520246439;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1520248329;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1520268868;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1521396720;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1521741862;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1522049586;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1522066224;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1522132482;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1523641106;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1525116069;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1529046538;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1529682304;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1529682304;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1533029410;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1533829432;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1539176686;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1549897311;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1550594263;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism);1550594263;Rescales the specified job such that it will have the new parallelism.__@param jobId specifying the job to modify_@param newParallelism specifying the new parallelism of the rescaled job_@return Future which is completed once the rescaling has been completed;public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {_		throw new UnsupportedOperationException("The " + getClass().getSimpleName() + " does not support rescaling.")__	};rescales,the,specified,job,such,that,it,will,have,the,new,parallelism,param,job,id,specifying,the,job,to,modify,param,new,parallelism,specifying,the,new,parallelism,of,the,rescaled,job,return,future,which,is,completed,once,the,rescaling,has,been,completed;public,completable,future,acknowledge,rescale,job,job,id,job,id,int,new,parallelism,throw,new,unsupported,operation,exception,the,get,class,get,simple,name,does,not,support,rescaling
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1508078631;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(details.getRunning().size() + details.getFinished().size())__				details.getRunning().forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				details.getFinished().forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,collection,job,status,message,flattened,details,new,array,list,details,get,running,size,details,get,finished,size,details,get,running,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,details,get,finished,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1509004145;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(details.getRunning().size() + details.getFinished().size())__				details.getRunning().forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				details.getFinished().forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,collection,job,status,message,flattened,details,new,array,list,details,get,running,size,details,get,finished,size,details,get,running,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,details,get,finished,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1510063664;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515177486;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515686383;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515699606;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515700517;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515770043;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1515770044;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1516028608;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1517237717;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1518855442;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1519317159;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1519977153;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1520246439;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1520248329;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1520268868;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1521396720;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1521741862;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1522049586;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1522066224;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1522132482;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1523641106;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1525116069;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1529046538;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1529682304;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1529682304;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1533029410;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1533829432;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.<Object>toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,object,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1539176686;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1549897311;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1550594263;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception;1550594263;Lists the currently running and finished jobs on the cluster.__@return future collection of running and finished jobs_@throws Exception if no connection to the cluster could be established;public CompletableFuture<Collection<JobStatusMessage>> listJobs() throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new RequestJobDetails(true, false), timeout)__		CompletableFuture<Object> responseFuture = FutureUtils.toJava(response)___		return responseFuture.thenApply((responseMessage) -> {_			if (responseMessage instanceof MultipleJobsDetails) {_				MultipleJobsDetails details = (MultipleJobsDetails) responseMessage___				final Collection<JobDetails> jobDetails = details.getJobs()__				Collection<JobStatusMessage> flattenedDetails = new ArrayList<>(jobDetails.size())__				jobDetails.forEach(detail -> flattenedDetails.add(new JobStatusMessage(detail.getJobId(), detail.getJobName(), detail.getStatus(), detail.getStartTime())))__				return flattenedDetails__			} else {_				throw new CompletionException(_					new IllegalStateException("Unknown JobManager response of type " + responseMessage.getClass()))__			}_		})__	};lists,the,currently,running,and,finished,jobs,on,the,cluster,return,future,collection,of,running,and,finished,jobs,throws,exception,if,no,connection,to,the,cluster,could,be,established;public,completable,future,collection,job,status,message,list,jobs,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,request,job,details,true,false,timeout,completable,future,object,response,future,future,utils,to,java,response,return,response,future,then,apply,response,message,if,response,message,instanceof,multiple,jobs,details,multiple,jobs,details,details,multiple,jobs,details,response,message,final,collection,job,details,job,details,details,get,jobs,collection,job,status,message,flattened,details,new,array,list,job,details,size,job,details,for,each,detail,flattened,details,add,new,job,status,message,detail,get,job,id,detail,get,job,name,detail,get,status,detail,get,start,time,return,flattened,details,else,throw,new,completion,exception,new,illegal,state,exception,unknown,job,manager,response,of,type,response,message,get,class
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1529682304;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1529682304;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1533029410;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1533829432;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1539176686;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1549897311;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1550594263;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> @Override 		public ActorSystem get() throws FlinkException;1550594263;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;@Override_		public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;override,public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1495441965;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				LOG.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1495778594;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1502355550;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1504172257;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1507569104;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1507715934;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1508078631;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = AkkaUtils.createActorSystem(_						configuration,_						Option.apply(new Tuple2<String, Object>(ownHostname.getCanonicalHostName(), 0)))__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,akka,utils,create,actor,system,configuration,option,apply,new,tuple2,string,object,own,hostname,get,canonical,host,name,0,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1509004145;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1510063664;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515177486;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515686383;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515699606;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515700517;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515770043;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1515770044;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1516028608;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1517237717;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1518855442;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1519317159;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1519977153;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1520246439;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1520248329;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1520268868;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1521396720;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1521741862;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1522049586;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1522066224;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1522132482;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1523641106;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1525116069;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> LazyActorSystemLoader -> public ActorSystem get() throws FlinkException;1529046538;Creates a new ActorSystem or returns an existing one._@return ActorSystem_@throws Exception if the ActorSystem could not be created;public ActorSystem get() throws FlinkException {__			if (!isLoaded()) {_				_				log.info("Starting client actor system.")___				final InetAddress ownHostname__				try {_					ownHostname = LeaderRetrievalUtils.findConnectingAddress(_						highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_						timeout)__				} catch (LeaderRetrievalException lre) {_					throw new FlinkException("Could not find out our own hostname by connecting to the " +_						"leading JobManager. Please make sure that the Flink cluster has been started.", lre)__				}__				try {_					actorSystem = BootstrapTools.startActorSystem(_						configuration,_						ownHostname.getCanonicalHostName(),_						0,_						log)__				} catch (Exception e) {_					throw new FlinkException("Could not start the ActorSystem lazily.", e)__				}_			}__			return actorSystem__		};creates,a,new,actor,system,or,returns,an,existing,one,return,actor,system,throws,exception,if,the,actor,system,could,not,be,created;public,actor,system,get,throws,flink,exception,if,is,loaded,log,info,starting,client,actor,system,final,inet,address,own,hostname,try,own,hostname,leader,retrieval,utils,find,connecting,address,high,availability,services,get,job,manager,leader,retriever,high,availability,services,timeout,catch,leader,retrieval,exception,lre,throw,new,flink,exception,could,not,find,out,our,own,hostname,by,connecting,to,the,leading,job,manager,please,make,sure,that,the,flink,cluster,has,been,started,lre,try,actor,system,bootstrap,tools,start,actor,system,configuration,own,hostname,get,canonical,host,name,0,log,catch,exception,e,throw,new,flink,exception,could,not,start,the,actor,system,lazily,e,return,actor,system
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1529682304;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1529682304;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1533029410;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1533829432;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1539176686;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1549897311;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1550594263;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public ClusterClient( 			Configuration flinkConfig, 			HighAvailabilityServices highAvailabilityServices, 			boolean sharedHaServices);1550594263;Creates a instance that submits the programs to the JobManager defined in the_configuration. This method will try to resolve the JobManager hostname and throw an exception_if that is not possible.__@param flinkConfig The config used to obtain the job-manager's address, and used to configure the optimizer._@param highAvailabilityServices HighAvailabilityServices to use for leader retrieval_@param sharedHaServices true if the HighAvailabilityServices are shared and must not be shut down;public ClusterClient(_			Configuration flinkConfig,_			HighAvailabilityServices highAvailabilityServices,_			boolean sharedHaServices) {_		this.flinkConfig = Preconditions.checkNotNull(flinkConfig)__		this.compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), flinkConfig)___		this.timeout = AkkaUtils.getClientTimeout(flinkConfig)__		this.lookupTimeout = AkkaUtils.getLookupTimeout(flinkConfig)___		this.actorSystemLoader = new LazyActorSystemLoader(_			highAvailabilityServices,_			Time.milliseconds(lookupTimeout.toMillis()),_			flinkConfig,_			log)___		this.highAvailabilityServices = Preconditions.checkNotNull(highAvailabilityServices)__		this.sharedHaServices = sharedHaServices__	};creates,a,instance,that,submits,the,programs,to,the,job,manager,defined,in,the,configuration,this,method,will,try,to,resolve,the,job,manager,hostname,and,throw,an,exception,if,that,is,not,possible,param,flink,config,the,config,used,to,obtain,the,job,manager,s,address,and,used,to,configure,the,optimizer,param,high,availability,services,high,availability,services,to,use,for,leader,retrieval,param,shared,ha,services,true,if,the,high,availability,services,are,shared,and,must,not,be,shut,down;public,cluster,client,configuration,flink,config,high,availability,services,high,availability,services,boolean,shared,ha,services,this,flink,config,preconditions,check,not,null,flink,config,this,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,flink,config,this,timeout,akka,utils,get,client,timeout,flink,config,this,lookup,timeout,akka,utils,get,lookup,timeout,flink,config,this,actor,system,loader,new,lazy,actor,system,loader,high,availability,services,time,milliseconds,lookup,timeout,to,millis,flink,config,log,this,high,availability,services,preconditions,check,not,null,high,availability,services,this,shared,ha,services,shared,ha,services
ClusterClient -> public boolean getPrintStatusDuringExecution();1466152678;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1466152678;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1466780434;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1467379351;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1467379351;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1468944004;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1472030970;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1472132775;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1472485736;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1472487067;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1475676445;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1476696544;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1477319634;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1477570902;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1478068438;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1481907119;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1493821466;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1493975155;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1493975167;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1495284870;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1495441965;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1495441965;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1495778594;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1502355550;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1504172257;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1507569104;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1507715934;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1508078631;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1509004145;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1510063664;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515177486;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515686383;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515699606;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515700517;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515770043;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1515770044;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1516028608;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1517237717;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1518855442;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1519317159;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1519977153;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1520246439;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1520248329;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1520268868;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1521396720;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1521741862;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1522049586;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1522066224;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1522132482;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1523641106;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1525116069;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1529046538;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1529682304;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1529682304;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1533029410;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1533829432;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1539176686;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1549897311;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1550594263;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public boolean getPrintStatusDuringExecution();1550594263;@return whether the client will print progress updates during the execution to {@code System.out};public boolean getPrintStatusDuringExecution() {_		return this.printStatusDuringExecution__	};return,whether,the,client,will,print,progress,updates,during,the,execution,to,code,system,out;public,boolean,get,print,status,during,execution,return,this,print,status,during,execution
ClusterClient -> public abstract String getWebInterfaceURL()_;1466152678;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1466152678;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1466780434;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1467379351;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1467379351;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1468944004;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1472030970;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1472132775;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1472485736;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1472487067;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1475676445;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1476696544;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1477319634;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1477570902;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1478068438;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1481907119;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1493821466;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1493975155;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1493975167;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1495284870;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1495441965;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1495441965;Returns an URL (as a string) to the JobManager web interface;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1495778594;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1502355550;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1504172257;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1507569104;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1507715934;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1508078631;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1509004145;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1510063664;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515177486;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515686383;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515699606;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515700517;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515770043;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1515770044;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1516028608;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1517237717;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1518855442;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1519317159;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1519977153;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1520246439;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1520248329;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1520268868;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1521396720;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1521741862;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1522049586;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1522066224;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1522132482;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1523641106;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1525116069;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1529046538;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1529682304;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1529682304;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1533029410;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1533829432;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1539176686;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1549897311;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1550594263;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public abstract String getWebInterfaceURL()_;1550594263;Returns an URL (as a string) to the JobManager web interface.;public abstract String getWebInterfaceURL()_;returns,an,url,as,a,string,to,the,job,manager,web,interface;public,abstract,string,get,web,interface,url
ClusterClient -> public void stop(final JobID jobId) throws Exception;1466152678;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1466152678;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1466780434;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1467379351;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1467379351;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1468944004;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1472030970;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1472132775;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1472485736;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1472487067;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1475676445;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1476696544;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1477319634;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1477570902;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1478068438;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1481907119;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1493821466;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1493975155;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1493975167;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1495284870;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1495441965;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1495441965;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			LOG.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			LOG.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1495778594;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			log.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			log.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1502355550;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			log.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			log.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1504172257;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManagerGateway = getJobManagerGateway()___		final Future<Object> response__		try {_			response = jobManagerGateway.ask(new JobManagerMessages.StopJob(jobId), timeout)__		} catch (final Exception e) {_			throw new ProgramInvocationException("Failed to query the job manager gateway.", e)__		}__		final Object result = Await.result(response, timeout)___		if (result instanceof JobManagerMessages.StoppingSuccess) {_			log.info("Job stopping with ID " + jobId + " succeeded.")__		} else if (result instanceof JobManagerMessages.StoppingFailure) {_			final Throwable t = ((JobManagerMessages.StoppingFailure) result).cause()__			log.info("Job stopping with ID " + jobId + " failed.", t)__			throw new Exception("Failed to stop the job because of \n" + t.getMessage())__		} else {_			throw new Exception("Unknown message received while stopping: " + result.getClass().getName())__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,gateway,get,job,manager,gateway,final,future,object,response,try,response,job,manager,gateway,ask,new,job,manager,messages,stop,job,job,id,timeout,catch,final,exception,e,throw,new,program,invocation,exception,failed,to,query,the,job,manager,gateway,e,final,object,result,await,result,response,timeout,if,result,instanceof,job,manager,messages,stopping,success,log,info,job,stopping,with,id,job,id,succeeded,else,if,result,instanceof,job,manager,messages,stopping,failure,final,throwable,t,job,manager,messages,stopping,failure,result,cause,log,info,job,stopping,with,id,job,id,failed,t,throw,new,exception,failed,to,stop,the,job,because,of,n,t,get,message,else,throw,new,exception,unknown,message,received,while,stopping,result,get,class,get,name
ClusterClient -> public void stop(final JobID jobId) throws Exception;1507569104;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1507715934;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1508078631;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1509004145;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1510063664;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515177486;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515686383;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515699606;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515700517;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515770043;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1515770044;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1516028608;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1517237717;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1518855442;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1519317159;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1519977153;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1520246439;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1520248329;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1520268868;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1521396720;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1521741862;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1522049586;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1522066224;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1522132482;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1523641106;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1525116069;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1529046538;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1529682304;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1529682304;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1533029410;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1533829432;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1539176686;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1549897311;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1550594263;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> public void stop(final JobID jobId) throws Exception;1550594263;Stops a program on Flink cluster whose job-manager is configured in this client's configuration._Stopping works only for streaming programs. Be aware, that the program might continue to run for_a while after sending the stop command, because after sources stopped to emit data all operators_need to finish processing.__@param jobId_the job ID of the streaming program to stop_@throws Exception_If the job ID is invalid (ie, is unknown or refers to a batch job) or if sending the stop signal_failed. That might be due to an I/O problem, ie, the job-manager is unreachable.;public void stop(final JobID jobId) throws Exception {_		final ActorGateway jobManager = getJobManagerGateway()___		Future<Object> response = jobManager.ask(new JobManagerMessages.StopJob(jobId), timeout)___		final Object rc = Await.result(response, timeout)___		if (rc instanceof JobManagerMessages.StoppingSuccess) {_			_		} else if (rc instanceof JobManagerMessages.StoppingFailure) {_			throw new Exception("Stopping the job with ID " + jobId + " failed.",_				((JobManagerMessages.StoppingFailure) rc).cause())__		} else {_			throw new IllegalStateException("Unexpected response: " + rc)__		}_	};stops,a,program,on,flink,cluster,whose,job,manager,is,configured,in,this,client,s,configuration,stopping,works,only,for,streaming,programs,be,aware,that,the,program,might,continue,to,run,for,a,while,after,sending,the,stop,command,because,after,sources,stopped,to,emit,data,all,operators,need,to,finish,processing,param,job,id,the,job,id,of,the,streaming,program,to,stop,throws,exception,if,the,job,id,is,invalid,ie,is,unknown,or,refers,to,a,batch,job,or,if,sending,the,stop,signal,failed,that,might,be,due,to,an,i,o,problem,ie,the,job,manager,is,unreachable;public,void,stop,final,job,id,job,id,throws,exception,final,actor,gateway,job,manager,get,job,manager,gateway,future,object,response,job,manager,ask,new,job,manager,messages,stop,job,job,id,timeout,final,object,rc,await,result,response,timeout,if,rc,instanceof,job,manager,messages,stopping,success,else,if,rc,instanceof,job,manager,messages,stopping,failure,throw,new,exception,stopping,the,job,with,id,job,id,failed,job,manager,messages,stopping,failure,rc,cause,else,throw,new,illegal,state,exception,unexpected,response,rc
ClusterClient -> protected void logAndSysout(String message);1466152678;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1466152678;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1466780434;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1467379351;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1467379351;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1468944004;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1472030970;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1472132775;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1472485736;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1472487067;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1475676445;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1476696544;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1477319634;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1477570902;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1478068438;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1481907119;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1493821466;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1493975155;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1493975167;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1495284870;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1495441965;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1495441965;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		LOG.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1495778594;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1502355550;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1504172257;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1507569104;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1507715934;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1508078631;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1509004145;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1510063664;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515177486;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515686383;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515699606;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515700517;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515770043;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1515770044;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1516028608;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1517237717;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1518855442;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1519317159;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1519977153;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1520246439;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1520248329;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1520268868;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1521396720;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1521741862;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1522049586;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1522066224;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1522132482;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1523641106;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1525116069;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1529046538;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1529682304;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1529682304;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1533029410;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1533829432;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1539176686;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1549897311;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1550594263;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> protected void logAndSysout(String message);1550594263;Logs and prints to sysout if printing to stdout is enabled._@param message The message to log/print;protected void logAndSysout(String message) {_		log.info(message)__		if (printStatusDuringExecution) {_			System.out.println(message)__		}_	};logs,and,prints,to,sysout,if,printing,to,stdout,is,enabled,param,message,the,message,to,log,print;protected,void,log,and,sysout,string,message,log,info,message,if,print,status,during,execution,system,out,println,message
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1522049586;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1522066224;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1522132482;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1523641106;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1525116069;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1529046538;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1529682304;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1529682304;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1533029410;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1533829432;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1539176686;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1549897311;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1550594263;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
ClusterClient -> public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception;1550594263;Requests and returns the accumulators for the given job identifier. Accumulators can be_requested while a is running or after it has finished. The default class loader is used_to deserialize the incoming accumulator results._@param jobID The job identifier of a job._@return A Map containing the accumulator's name and its value.;public Map<String, OptionalFailure<Object>> getAccumulators(JobID jobID) throws Exception {_		return getAccumulators(jobID, ClassLoader.getSystemClassLoader())__	};requests,and,returns,the,accumulators,for,the,given,job,identifier,accumulators,can,be,requested,while,a,is,running,or,after,it,has,finished,the,default,class,loader,is,used,to,deserialize,the,incoming,accumulator,results,param,job,id,the,job,identifier,of,a,job,return,a,map,containing,the,accumulator,s,name,and,its,value;public,map,string,optional,failure,object,get,accumulators,job,id,job,id,throws,exception,return,get,accumulators,job,id,class,loader,get,system,class,loader
