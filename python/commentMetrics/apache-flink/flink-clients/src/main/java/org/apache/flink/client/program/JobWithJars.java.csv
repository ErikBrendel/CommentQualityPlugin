commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the plan.  */ ;/**  * Returns the plan.  */ public Plan getPlan() {     return this.plan. }
true;public;0;3;/**  * Returns list of jar files that need to be submitted with the plan.  */ ;/**  * Returns list of jar files that need to be submitted with the plan.  */ public List<URL> getJarFiles() {     return this.jarFiles. }
true;public;0;3;/**  * Returns list of classpaths that need to be submitted with the plan.  */ ;/**  * Returns list of classpaths that need to be submitted with the plan.  */ public List<URL> getClasspaths() {     return classpaths. }
true;public;0;6;/**  * Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.  *  * @return The user code ClassLoader.  */ ;/**  * Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.  *  * @return The user code ClassLoader.  */ public ClassLoader getUserCodeClassLoader() {     if (this.userCodeClassLoader == null) {         this.userCodeClassLoader = buildUserCodeClassLoader(jarFiles, classpaths, getClass().getClassLoader()).     }     return this.userCodeClassLoader. }
false;public,static;1;15;;public static void checkJarFile(URL jar) throws IOException {     File jarFile.     try {         jarFile = new File(jar.toURI()).     } catch (URISyntaxException e) {         throw new IOException("JAR file path is invalid '" + jar + "'").     }     if (!jarFile.exists()) {         throw new IOException("JAR file does not exist '" + jarFile.getAbsolutePath() + "'").     }     if (!jarFile.canRead()) {         throw new IOException("JAR file can't be read '" + jarFile.getAbsolutePath() + "'").     } // TODO: Check if proper JAR file }
false;public,static;3;10;;public static ClassLoader buildUserCodeClassLoader(List<URL> jars, List<URL> classpaths, ClassLoader parent) {     URL[] urls = new URL[jars.size() + classpaths.size()].     for (int i = 0. i < jars.size(). i++) {         urls[i] = jars.get(i).     }     for (int i = 0. i < classpaths.size(). i++) {         urls[i + jars.size()] = classpaths.get(i).     }     return FlinkUserCodeClassLoaders.parentFirst(urls, parent). }
