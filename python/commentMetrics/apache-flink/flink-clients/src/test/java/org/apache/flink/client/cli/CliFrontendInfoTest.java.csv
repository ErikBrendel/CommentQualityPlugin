commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test(expected = CliArgsException.class) public void testMissingOption() throws Exception {     String[] parameters = {}.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
false;public;0;9;;@Test(expected = CliArgsException.class) public void testUnrecognizedOption() throws Exception {     String[] parameters = { "-v", "-l" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
false;public;0;17;;@Test public void testShowExecutionPlan() throws Exception {     replaceStdOut().     try {         String[] parameters = new String[] { CliFrontendTestUtils.getTestJarPath(), "-f", "true" }.         Configuration configuration = getConfiguration().         CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).         testFrontend.info(parameters).         assertTrue(buffer.toString().contains("\"parallelism\": \"1\"")).     } finally {         restoreStdOut().     } }
false;public;0;19;;@Test public void testShowExecutionPlanWithParallelism() {     replaceStdOut().     try {         String[] parameters = { "-p", "17", CliFrontendTestUtils.getTestJarPath() }.         Configuration configuration = getConfiguration().         CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).         testFrontend.info(parameters).         assertTrue(buffer.toString().contains("\"parallelism\": \"17\"")).     } catch (Exception e) {         e.printStackTrace().         fail("Program caused an exception: " + e.getMessage()).     } finally {         restoreStdOut().     } }
false;private,static;0;6;;private static void replaceStdOut() {     stdOut = System.out.     buffer = new ByteArrayOutputStream().     capture = new PrintStream(buffer).     System.setOut(capture). }
false;private,static;0;3;;private static void restoreStdOut() {     System.setOut(stdOut). }
