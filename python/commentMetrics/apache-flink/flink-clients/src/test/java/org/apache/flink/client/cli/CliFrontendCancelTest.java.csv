commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;13;;@Test public void testCancel() throws Exception {     // test cancel properly     JobID jid = new JobID().     String[] parameters = { jid.toString() }.     final ClusterClient<String> clusterClient = createClusterClient().     MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).     testFrontend.cancel(parameters).     Mockito.verify(clusterClient, times(1)).cancel(any(JobID.class)). }
false;public;0;9;;@Test(expected = CliArgsException.class) public void testMissingJobId() throws Exception {     String[] parameters = {}.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
false;public;0;9;;@Test(expected = CliArgsException.class) public void testUnrecognizedOption() throws Exception {     String[] parameters = { "-v", "-l" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
true;public;0;28;/**  * Tests cancelling with the savepoint option.  */ ;/**  * Tests cancelling with the savepoint option.  */ @Test public void testCancelWithSavepoint() throws Exception {     {         // Cancel with savepoint (no target directory)         JobID jid = new JobID().         String[] parameters = { "-s", jid.toString() }.         final ClusterClient<String> clusterClient = createClusterClient().         MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).         testFrontend.cancel(parameters).         Mockito.verify(clusterClient, times(1)).cancelWithSavepoint(any(JobID.class), isNull(String.class)).     }     {         // Cancel with savepoint (with target directory)         JobID jid = new JobID().         String[] parameters = { "-s", "targetDirectory", jid.toString() }.         final ClusterClient<String> clusterClient = createClusterClient().         MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).         testFrontend.cancel(parameters).         Mockito.verify(clusterClient, times(1)).cancelWithSavepoint(any(JobID.class), notNull(String.class)).     } }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testCancelWithSavepointWithoutJobId() throws Exception {     // Cancel with savepoint (with target directory), but no job ID     String[] parameters = { "-s", "targetDirectory" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testCancelWithSavepointWithoutParameters() throws Exception {     // Cancel with savepoint (no target directory) and no job ID     String[] parameters = { "-s" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.cancel(parameters). }
false;private,static;0;5;;private static ClusterClient<String> createClusterClient() throws Exception {     final ClusterClient<String> clusterClient = mock(ClusterClient.class).     return clusterClient. }
