commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setUp() throws ConfigurationException {     restServerEndpointConfiguration = RestServerEndpointConfiguration.fromConfiguration(REST_CONFIG).     executor = Executors.newSingleThreadExecutor(new ExecutorThreadFactory(RestClusterClientSavepointTriggerTest.class.getSimpleName())). }
false;public,static;0;6;;@AfterClass public static void tearDown() {     if (executor != null) {         executor.shutdown().     } }
false;public;0;22;;@Test public void testTriggerSavepointDefaultDirectory() throws Exception {     final TriggerId triggerId = new TriggerId().     final String expectedReturnedSavepointDir = "hello".     try (final RestServerEndpoint restServerEndpoint = createRestServerEndpoint(request -> {         assertNull(request.getTargetDirectory()).         assertFalse(request.isCancelJob()).         return triggerId.     }, trigger -> {         assertEquals(triggerId, trigger).         return new SavepointInfo(expectedReturnedSavepointDir, null).     })) {         final RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort()).         final String savepointPath = restClusterClient.triggerSavepoint(new JobID(), null).get().         assertEquals(expectedReturnedSavepointDir, savepointPath).     } }
false;public;0;23;;@Test public void testTriggerSavepointTargetDirectory() throws Exception {     final TriggerId triggerId = new TriggerId().     final String expectedSubmittedSavepointDir = "world".     final String expectedReturnedSavepointDir = "hello".     try (final RestServerEndpoint restServerEndpoint = createRestServerEndpoint(triggerRequestBody -> {         assertEquals(expectedSubmittedSavepointDir, triggerRequestBody.getTargetDirectory()).         assertFalse(triggerRequestBody.isCancelJob()).         return triggerId.     }, statusRequestTriggerId -> {         assertEquals(triggerId, statusRequestTriggerId).         return new SavepointInfo(expectedReturnedSavepointDir, null).     })) {         final RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort()).         final String savepointPath = restClusterClient.triggerSavepoint(new JobID(), expectedSubmittedSavepointDir).get().         assertEquals(expectedReturnedSavepointDir, savepointPath).     } }
false;public;0;21;;@Test public void testTriggerSavepointCancelJob() throws Exception {     final TriggerId triggerId = new TriggerId().     final String expectedSavepointDir = "hello".     try (final RestServerEndpoint restServerEndpoint = createRestServerEndpoint(request -> {         assertTrue(request.isCancelJob()).         return triggerId.     }, trigger -> {         assertEquals(triggerId, trigger).         return new SavepointInfo(expectedSavepointDir, null).     })) {         final RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort()).         final String savepointPath = restClusterClient.cancelWithSavepoint(new JobID(), null).         assertEquals(expectedSavepointDir, savepointPath).     } }
false;public;0;21;;@Test public void testTriggerSavepointFailure() throws Exception {     final TriggerId triggerId = new TriggerId().     try (final RestServerEndpoint restServerEndpoint = createRestServerEndpoint(request -> triggerId, trigger -> new SavepointInfo(null, new SerializedThrowable(new RuntimeException("expected"))))) {         final RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort()).         try {             restClusterClient.triggerSavepoint(new JobID(), null).get().         } catch (ExecutionException e) {             final Throwable cause = e.getCause().             assertThat(cause, instanceOf(SerializedThrowable.class)).             assertThat(((SerializedThrowable) cause).deserializeError(ClassLoader.getSystemClassLoader()).getMessage(), equalTo("expected")).         }     } }
false;public;0;22;;@Test public void testTriggerSavepointRetry() throws Exception {     final TriggerId triggerId = new TriggerId().     final String expectedSavepointDir = "hello".     final AtomicBoolean failRequest = new AtomicBoolean(true).     try (final RestServerEndpoint restServerEndpoint = createRestServerEndpoint(request -> triggerId, trigger -> {         if (failRequest.compareAndSet(true, false)) {             throw new RestHandlerException("expected", HttpResponseStatus.SERVICE_UNAVAILABLE).         } else {             return new SavepointInfo(expectedSavepointDir, null).         }     })) {         final RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort()).         final String savepointPath = restClusterClient.triggerSavepoint(new JobID(), null).get().         assertEquals(expectedSavepointDir, savepointPath).     } }
false;private,static;2;8;;private static RestServerEndpoint createRestServerEndpoint(final FunctionWithException<SavepointTriggerRequestBody, TriggerId, RestHandlerException> triggerHandlerLogic, final FunctionWithException<TriggerId, SavepointInfo, RestHandlerException> savepointHandlerLogic) throws Exception {     return TestRestServerEndpoint.createAndStartRestServerEndpoint(restServerEndpointConfiguration, new TestSavepointTriggerHandler(triggerHandlerLogic), new TestSavepointHandler(savepointHandlerLogic)). }
false;protected;2;7;;@Override protected CompletableFuture<TriggerResponse> handleRequest(@Nonnull HandlerRequest<SavepointTriggerRequestBody, SavepointTriggerMessageParameters> request, @Nonnull DispatcherGateway gateway) throws RestHandlerException {     return CompletableFuture.completedFuture(new TriggerResponse(triggerHandlerLogic.apply(request.getRequestBody()))). }
false;protected;2;8;;@Override protected CompletableFuture<AsynchronousOperationResult<SavepointInfo>> handleRequest(@Nonnull HandlerRequest<EmptyRequestBody, SavepointStatusMessageParameters> request, @Nonnull DispatcherGateway gateway) throws RestHandlerException {     final TriggerId triggerId = request.getPathParameter(TriggerIdPathParameter.class).     return CompletableFuture.completedFuture(AsynchronousOperationResult.completed(savepointHandlerLogic.apply(triggerId))). }
false;private;1;10;;private RestClusterClient<StandaloneClusterId> createRestClusterClient(final int port) throws Exception {     final Configuration clientConfig = new Configuration(REST_CONFIG).     clientConfig.setInteger(RestOptions.PORT, port).     return new RestClusterClient<>(clientConfig, new RestClient(RestClientConfiguration.fromConfiguration(REST_CONFIG), executor), StandaloneClusterId.getInstance(), (attempt) -> 0, null). }
