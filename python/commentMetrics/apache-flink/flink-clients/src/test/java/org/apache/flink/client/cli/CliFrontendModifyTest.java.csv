commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testModifyJob() throws Exception {     final JobID jobId = new JobID().     final int parallelism = 42.     String[] args = { jobId.toString(), "-p", String.valueOf(parallelism) }.     Tuple2<JobID, Integer> jobIdParallelism = callModify(args).     assertThat(jobIdParallelism.f0, Matchers.is(jobId)).     assertThat(jobIdParallelism.f1, Matchers.is(parallelism)). }
false;public;0;12;;@Test public void testMissingJobId() throws Exception {     final int parallelism = 42.     final String[] args = { "-p", String.valueOf(parallelism) }.     try {         callModify(args).         fail("Expected CliArgsException").     } catch (CliArgsException expected) {     // expected     } }
false;public;0;12;;@Test public void testMissingParallelism() throws Exception {     final JobID jobId = new JobID().     final String[] args = { jobId.toString() }.     try {         callModify(args).         fail("Expected CliArgsException").     } catch (CliArgsException expected) {     // expected     } }
false;public;0;12;;@Test public void testUnparsableParalllelism() throws Exception {     final JobID jobId = new JobID().     final String[] args = { jobId.toString(), "-p", "foobar" }.     try {         callModify(args).         fail("Expected CliArgsException").     } catch (CliArgsException expected) {     // expected     } }
false;public;0;12;;@Test public void testUnparsableJobId() throws Exception {     final int parallelism = 42.     final String[] args = { "foobar", "-p", String.valueOf(parallelism) }.     try {         callModify(args).         fail("Expected CliArgsException").     } catch (CliArgsException expected) {     // expected     } }
false;private;1;11;;private Tuple2<JobID, Integer> callModify(String[] args) throws Exception {     final CompletableFuture<Tuple2<JobID, Integer>> rescaleJobFuture = new CompletableFuture<>().     final TestingClusterClient clusterClient = new TestingClusterClient(rescaleJobFuture, getConfiguration()).     final MockedCliFrontend cliFrontend = new MockedCliFrontend(clusterClient).     cliFrontend.modify(args).     assertThat(rescaleJobFuture.isDone(), Matchers.is(true)).     return rescaleJobFuture.get(). }
false;public;2;6;;@Override public CompletableFuture<Acknowledge> rescaleJob(JobID jobId, int newParallelism) {     rescaleJobFuture.complete(Tuple2.of(jobId, newParallelism)).     return CompletableFuture.completedFuture(Acknowledge.get()). }
