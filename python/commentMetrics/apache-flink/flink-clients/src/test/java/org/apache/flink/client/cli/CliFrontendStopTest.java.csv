commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setup() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;14;;@Test public void testStop() throws Exception {     // test stop properly     JobID jid = new JobID().     String jidString = jid.toString().     String[] parameters = { jidString }.     final ClusterClient<String> clusterClient = createClusterClient(null).     MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).     testFrontend.stop(parameters).     Mockito.verify(clusterClient, times(1)).stop(any(JobID.class)). }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testUnrecognizedOption() throws Exception {     // test unrecognized option     String[] parameters = { "-v", "-l" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.stop(parameters). }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testMissingJobId() throws Exception {     // test missing job id     String[] parameters = {}.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.stop(parameters). }
false;public;0;18;;@Test public void testUnknownJobId() throws Exception {     // test unknown job Id     JobID jid = new JobID().     String[] parameters = { jid.toString() }.     String expectedMessage = "Test exception".     FlinkException testException = new FlinkException(expectedMessage).     final ClusterClient<String> clusterClient = createClusterClient(testException).     MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).     try {         testFrontend.stop(parameters).         fail("Should have failed.").     } catch (FlinkException e) {         assertTrue(ExceptionUtils.findThrowableWithMessage(e, expectedMessage).isPresent()).     } }
false;private,static;1;9;;private static ClusterClient<String> createClusterClient(@Nullable Exception exception) throws Exception {     final ClusterClient<String> clusterClient = mock(ClusterClient.class).     if (exception != null) {         doThrow(exception).when(clusterClient).stop(any(JobID.class)).     }     return clusterClient. }
