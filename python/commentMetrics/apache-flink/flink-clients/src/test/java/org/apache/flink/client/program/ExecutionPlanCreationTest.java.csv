commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Test public void testGetExecutionPlan() {     try {         PackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, "/dev/random", "/tmp").         assertNotNull(prg.getPreviewPlan()).         InetAddress mockAddress = InetAddress.getLocalHost().         InetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345).         Configuration config = new Configuration().         config.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName()).         config.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort()).         Optimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config).         OptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1).         assertNotNull(op).         PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator().         assertNotNull(dumper.getOptimizerPlanAsJSON(op)).         // test HTML escaping         PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator().         dumper2.setEncodeForHTML(true).         String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op).         assertEquals(-1, htmlEscaped.indexOf('\\')).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;3;;public Tuple2<Long, Long> map(Tuple2<Long, Long> value) {     return new Tuple2<Long, Long>(value.f0, value.f1 + 1). }
false;public,static;1;21;;@SuppressWarnings("serial") public static void main(String[] args) throws Exception {     if (args.length < 2) {         System.err.println("Usage: TestOptimizerPlan <input-file-path> <output-file-path>").         return.     }     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<Long, Long>> input = env.readCsvFile(args[0]).fieldDelimiter("\t").types(Long.class, Long.class).     DataSet<Tuple2<Long, Long>> result = input.map(new MapFunction<Tuple2<Long, Long>, Tuple2<Long, Long>>() {          public Tuple2<Long, Long> map(Tuple2<Long, Long> value) {             return new Tuple2<Long, Long>(value.f0, value.f1 + 1).         }     }).     result.writeAsCsv(args[1], "\n", "\t").     env.execute(). }
false;public;0;4;;@Override public String getDescription() {     return "TestOptimizerPlan <input-file-path> <output-file-path>". }
