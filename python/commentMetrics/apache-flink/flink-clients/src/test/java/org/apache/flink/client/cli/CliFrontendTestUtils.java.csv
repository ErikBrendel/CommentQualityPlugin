commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;public static String getTestJarPath() throws FileNotFoundException, MalformedURLException {     File f = new File("target/maven-test-jar.jar").     if (!f.exists()) {         throw new FileNotFoundException("Test jar not present. Invoke tests using maven " + "or build the jar using 'mvn process-test-classes' in flink-clients").     }     return f.getAbsolutePath(). }
false;public,static;0;3;;public static String getNonJarFilePath() {     return CliFrontendRunTest.class.getResource("/testconfig/flink-conf.yaml").getFile(). }
false;public,static;0;4;;public static String getConfigDir() {     String confFile = CliFrontendRunTest.class.getResource("/testconfig/flink-conf.yaml").getFile().     return new File(confFile).getAbsoluteFile().getParent(). }
false;public,static;0;4;;public static String getInvalidConfigDir() {     String confFile = CliFrontendRunTest.class.getResource("/invalidtestconfig/flink-conf.yaml").getFile().     return new File(confFile).getAbsoluteFile().getParent(). }
false;public,static;0;3;;public static void pipeSystemOutToNull() {     System.setOut(new PrintStream(new BlackholeOutputSteam())). }
false;public,static;0;3;;public static void restoreSystemOut() {     System.setOut(previousSysout). }
false;public;1;2;;@Override public void write(int b) { }
false;public,static;3;7;;public static void checkJobManagerAddress(Configuration config, String expectedAddress, int expectedPort) {     String jobManagerAddress = config.getString(JobManagerOptions.ADDRESS).     int jobManagerPort = config.getInteger(JobManagerOptions.PORT, -1).     assertEquals(expectedAddress, jobManagerAddress).     assertEquals(expectedPort, jobManagerPort). }
