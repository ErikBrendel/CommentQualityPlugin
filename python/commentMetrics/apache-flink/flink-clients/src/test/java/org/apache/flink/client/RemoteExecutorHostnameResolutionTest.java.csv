commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void check() {     checkPreconditions(). }
false;public;0;12;;@Test public void testUnresolvableHostname1() throws Exception {     RemoteExecutor exec = new RemoteExecutor(nonExistingHostname, port).     try {         exec.executePlan(getProgram()).         fail("This should fail with an ProgramInvocationException").     } catch (UnknownHostException ignored) {     // that is what we want!     } }
false;public;0;14;;@Test public void testUnresolvableHostname2() throws Exception {     InetSocketAddress add = new InetSocketAddress(nonExistingHostname, port).     RemoteExecutor exec = new RemoteExecutor(add, new Configuration(), Collections.<URL>emptyList(), Collections.<URL>emptyList()).     try {         exec.executePlan(getProgram()).         fail("This should fail with an ProgramInvocationException").     } catch (UnknownHostException ignored) {     // that is what we want!     } }
false;private,static;0;5;;private static Plan getProgram() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2, 3).output(new DiscardingOutputFormat<Integer>()).     return env.createProgramPlan(). }
false;private,static;0;15;;private static void checkPreconditions() {     // the test can only work if the invalid URL cannot be resolves     // some internet providers resolve unresolvable URLs to navigational aid servers,     // voiding this test.     boolean throwsException.     try {         // noinspection ResultOfMethodCallIgnored         InetAddress.getByName(nonExistingHostname).         throwsException = false.     } catch (UnknownHostException e) {         throwsException = true.     }     assumeTrue(throwsException). }
