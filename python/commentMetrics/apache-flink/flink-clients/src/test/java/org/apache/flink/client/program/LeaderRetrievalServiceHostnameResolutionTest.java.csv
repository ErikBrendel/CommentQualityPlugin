commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void check() {     checkPreconditions(). }
true;public;0;12;/* 	 * Tests that the StandaloneLeaderRetrievalService resolves host names if specified. 	 */ ;/* 	 * Tests that the StandaloneLeaderRetrievalService resolves host names if specified. 	 */ @Test public void testUnresolvableHostname1() throws UnknownHostException, ConfigurationException {     Configuration config = new Configuration().     config.setString(JobManagerOptions.ADDRESS, nonExistingHostname).     config.setInteger(JobManagerOptions.PORT, 17234).     StandaloneUtils.createLeaderRetrievalService(config, false, JobMaster.JOB_MANAGER_NAME). }
true;public;0;19;/* 	 * Tests that the StandaloneLeaderRetrievalService does not resolve host names by default. 	 */ ;/* 	 * Tests that the StandaloneLeaderRetrievalService does not resolve host names by default. 	 */ @Test public void testUnresolvableHostname2() throws Exception {     try {         Configuration config = new Configuration().         config.setString(JobManagerOptions.ADDRESS, nonExistingHostname).         config.setInteger(JobManagerOptions.PORT, 17234).         StandaloneUtils.createLeaderRetrievalService(config, true, JobMaster.JOB_MANAGER_NAME).         fail("This should fail with an UnknownHostException").     } catch (UnknownHostException e) {     // that is what we want!     } }
false;private,static;0;15;;private static void checkPreconditions() {     // the test can only work if the invalid URL cannot be resolves     // some internet providers resolve unresolvable URLs to navigational aid servers,     // voiding this test.     boolean throwsException.     try {         // noinspection ResultOfMethodCallIgnored         InetAddress.getByName(nonExistingHostname).         throwsException = false.     } catch (UnknownHostException e) {         throwsException = true.     }     assumeTrue(throwsException). }
