commented;modifiers;parameterAmount;loc;comment;code
true;public;0;28;/**  * Tests that the configuration is properly passed via the DefaultCLI to the  * created ClusterDescriptor.  */ ;/**  * Tests that the configuration is properly passed via the DefaultCLI to the  * created ClusterDescriptor.  */ @Test public void testConfigurationPassing() throws Exception {     final Configuration configuration = getConfiguration().     final String localhost = "localhost".     final int port = 1234.     configuration.setString(JobManagerOptions.ADDRESS, localhost).     configuration.setInteger(JobManagerOptions.PORT, port).     @SuppressWarnings("unchecked")     final AbstractCustomCommandLine<StandaloneClusterId> defaultCLI = (AbstractCustomCommandLine<StandaloneClusterId>) getCli(configuration).     final String[] args = {}.     CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false).     final ClusterDescriptor<StandaloneClusterId> clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine).     final ClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine)).     final LeaderConnectionInfo clusterConnectionInfo = clusterClient.getClusterConnectionInfo().     assertThat(clusterConnectionInfo.getHostname(), Matchers.equalTo(localhost)).     assertThat(clusterConnectionInfo.getPort(), Matchers.equalTo(port)). }
true;public;0;29;/**  * Tests that command line options override the configuration settings.  */ ;/**  * Tests that command line options override the configuration settings.  */ @Test public void testManualConfigurationOverride() throws Exception {     final String localhost = "localhost".     final int port = 1234.     final Configuration configuration = getConfiguration().     configuration.setString(JobManagerOptions.ADDRESS, localhost).     configuration.setInteger(JobManagerOptions.PORT, port).     @SuppressWarnings("unchecked")     final AbstractCustomCommandLine<StandaloneClusterId> defaultCLI = (AbstractCustomCommandLine<StandaloneClusterId>) getCli(configuration).     final String manualHostname = "123.123.123.123".     final int manualPort = 4321.     final String[] args = { "-m", manualHostname + ':' + manualPort }.     CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false).     final ClusterDescriptor<StandaloneClusterId> clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine).     final ClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine)).     final LeaderConnectionInfo clusterConnectionInfo = clusterClient.getClusterConnectionInfo().     assertThat(clusterConnectionInfo.getHostname(), Matchers.equalTo(manualHostname)).     assertThat(clusterConnectionInfo.getPort(), Matchers.equalTo(manualPort)). }
