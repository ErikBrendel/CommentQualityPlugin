commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;32;;@Test public void testListOptions() throws Exception {     // test configure all job     {         String[] parameters = { "-a" }.         ListOptions options = new ListOptions(CliFrontendParser.parse(CliFrontendParser.getListCommandOptions(), parameters, true)).         assertTrue(options.showAll()).         assertFalse(options.showRunning()).         assertFalse(options.showScheduled()).     }     // test configure running job     {         String[] parameters = { "-r" }.         ListOptions options = new ListOptions(CliFrontendParser.parse(CliFrontendParser.getListCommandOptions(), parameters, true)).         assertFalse(options.showAll()).         assertTrue(options.showRunning()).         assertFalse(options.showScheduled()).     }     // test configure scheduled job     {         String[] parameters = { "-s" }.         ListOptions options = new ListOptions(CliFrontendParser.parse(CliFrontendParser.getListCommandOptions(), parameters, true)).         assertFalse(options.showAll()).         assertFalse(options.showRunning()).         assertTrue(options.showScheduled()).     } }
false;public;0;9;;@Test(expected = CliArgsException.class) public void testUnrecognizedOption() throws Exception {     String[] parameters = { "-v", "-k" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.list(parameters). }
false;public;0;12;;@Test public void testList() throws Exception {     // test list properly     {         String[] parameters = { "-r", "-s", "-a" }.         ClusterClient<String> clusterClient = createClusterClient().         MockedCliFrontend testFrontend = new MockedCliFrontend(clusterClient).         testFrontend.list(parameters).         Mockito.verify(clusterClient, times(1)).listJobs().     } }
false;private,static;0;9;;private static ClusterClient<String> createClusterClient() throws Exception {     final ClusterClient<String> clusterClient = mock(ClusterClient.class).     when(clusterClient.listJobs()).thenReturn(CompletableFuture.completedFuture(Arrays.asList(new JobStatusMessage(new JobID(), "job1", JobStatus.RUNNING, 1L), new JobStatusMessage(new JobID(), "job2", JobStatus.CREATED, 1L), new JobStatusMessage(new JobID(), "job3", JobStatus.FINISHED, 3L)))).     return clusterClient. }
