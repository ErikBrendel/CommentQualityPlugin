# id;timestamp;commentText;codeText;commentWords;codeWords
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1527173115;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			final AtomicBoolean firstPollFailed = new AtomicBoolean()__			failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_				messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___			restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1530644925;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			final AtomicBoolean firstPollFailed = new AtomicBoolean()__			failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_				messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___			restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1538042094;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			final AtomicBoolean firstPollFailed = new AtomicBoolean()__			failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_				messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___			restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1545326469;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			final AtomicBoolean firstPollFailed = new AtomicBoolean()__			failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_				messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___			restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1546534905;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1546534905;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1549621945;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1549788287;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1549788287;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception;1549788287;Tests that the send operation is being retried.;@Test_	public void testRetriableSendOperationIfConnectionErrorOrServiceUnavailable() throws Exception {_		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException("test exception", HttpResponseStatus.SERVICE_UNAVAILABLE)),_			CompletableFuture.completedFuture(EmptyResponseBody.getInstance()))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				final AtomicBoolean firstPollFailed = new AtomicBoolean()__				failHttpRequest = (messageHeaders, messageParameters, requestBody) ->_					messageHeaders instanceof PingRestHandlerHeaders && !firstPollFailed.getAndSet(true)___				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,being,retried;test,public,void,test,retriable,send,operation,if,connection,error,or,service,unavailable,throws,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,test,exception,http,response,status,completable,future,completed,future,empty,response,body,get,instance,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,final,atomic,boolean,first,poll,failed,new,atomic,boolean,fail,http,request,message,headers,message,parameters,request,body,message,headers,instanceof,ping,rest,handler,headers,first,poll,failed,get,and,set,true,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1518680718;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1518945174;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1519052657;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1519249749;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1519638690;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1521641443;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1521804758;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1522049586;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1522132482;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1522132496;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1522681180;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1523906273;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1524124694;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1526494919;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1527173115;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestBlobServerPortHandler testBlobServerPortHandler = new TestBlobServerPortHandler()__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testBlobServerPortHandler,_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,blob,server,port,handler,test,blob,server,port,handler,new,test,blob,server,port,handler,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,blob,server,port,handler,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1530644925;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1538042094;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1545326469;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint ignored = createRestServerEndpoint(_			testJobSubmitHandler)) {__			restClusterClient.setDetached(true)__			final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___			_			_			assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__			assertThat(jobSubmissionResult.getJobID(), is(jobId))__		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,ignored,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1546534905;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1546534905;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1549621945;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1549788287;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1549788287;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testDetachedJobSubmission() throws Exception;1549788287;Tests that we can submit a jobGraph in detached mode.;@Test_	public void testDetachedJobSubmission() throws Exception {__		final TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler()___		try (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(_			testJobSubmitHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.setDetached(true)__				final JobSubmissionResult jobSubmissionResult = restClusterClient.submitJob(jobGraph, ClassLoader.getSystemClassLoader())___				_				_				assertThat(jobSubmissionResult, is(not(instanceOf(JobExecutionResult.class))))__				assertThat(jobSubmissionResult.getJobID(), is(jobId))__			} finally {_				restClusterClient.shutdown()__			}_		}__	};tests,that,we,can,submit,a,job,graph,in,detached,mode;test,public,void,test,detached,job,submission,throws,exception,final,test,job,submit,handler,test,job,submit,handler,new,test,job,submit,handler,try,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,test,job,submit,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,set,detached,true,final,job,submission,result,job,submission,result,rest,cluster,client,submit,job,job,graph,class,loader,get,system,class,loader,assert,that,job,submission,result,is,not,instance,of,job,execution,result,class,assert,that,job,submission,result,get,job,id,is,job,id,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1527173115;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1530644925;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1538042094;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1545326469;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1546534905;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1546534905;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1549621945;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1549788287;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1549788287;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testSendIsNotRetriableIfHttpNotFound() throws Exception;1549788287;Tests that the send operation is not being retried when receiving a NOT_FOUND return code.;@Test_	public void testSendIsNotRetriableIfHttpNotFound() throws Exception {_		final String exceptionMessage = "test exception"__		final PingRestHandler pingRestHandler = new PingRestHandler(_			FutureUtils.completedExceptionally(new RestHandlerException(exceptionMessage, HttpResponseStatus.NOT_FOUND)))___		try (final TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(pingRestHandler)) {_			RestClusterClient<?> restClusterClient = createRestClusterClient(restServerEndpoint.getServerAddress().getPort())___			try {_				restClusterClient.sendRequest(PingRestHandlerHeaders.INSTANCE).get()__				fail("The rest request should have failed.")__			}  catch (Exception e) {_				assertThat(ExceptionUtils.findThrowableWithMessage(e, exceptionMessage).isPresent(), is(true))__			} finally {_				restClusterClient.shutdown()__			}_		}_	};tests,that,the,send,operation,is,not,being,retried,when,receiving,a,return,code;test,public,void,test,send,is,not,retriable,if,http,not,found,throws,exception,final,string,exception,message,test,exception,final,ping,rest,handler,ping,rest,handler,new,ping,rest,handler,future,utils,completed,exceptionally,new,rest,handler,exception,exception,message,http,response,status,try,final,test,rest,server,endpoint,rest,server,endpoint,create,rest,server,endpoint,ping,rest,handler,rest,cluster,client,rest,cluster,client,create,rest,cluster,client,rest,server,endpoint,get,server,address,get,port,try,rest,cluster,client,send,request,ping,rest,handler,headers,instance,get,fail,the,rest,request,should,have,failed,catch,exception,e,assert,that,exception,utils,find,throwable,with,message,e,exception,message,is,present,is,true,finally,rest,cluster,client,shutdown
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1523906273;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.REST_ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.REST_PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,configured,hostname,configuration,set,integer,rest,options,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1524124694;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1526494919;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1527173115;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1530644925;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1538042094;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1545326469;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1546534905;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1546534905;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1549621945;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1549788287;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1549788287;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
RestClusterClientTest -> @Test 	public void testRESTManualConfigurationOverride() throws Exception;1549788287;Tests that command line options override the configuration settings.;@Test_	public void testRESTManualConfigurationOverride() throws Exception {_		final String configuredHostname = "localhost"__		final int configuredPort = 1234__		final Configuration configuration = new Configuration()___		configuration.setString(JobManagerOptions.ADDRESS, configuredHostname)__		configuration.setInteger(JobManagerOptions.PORT, configuredPort)__		configuration.setString(RestOptions.ADDRESS, configuredHostname)__		configuration.setInteger(RestOptions.PORT, configuredPort)___		final DefaultCLI defaultCLI = new DefaultCLI(configuration)___		final String manualHostname = "123.123.123.123"__		final int manualPort = 4321__		final String[] args = {"-m", manualHostname + ':' + manualPort}___		CommandLine commandLine = defaultCLI.parseCommandLineOptions(args, false)___		final StandaloneClusterDescriptor clusterDescriptor = defaultCLI.createClusterDescriptor(commandLine)___		final RestClusterClient<?> clusterClient = clusterDescriptor.retrieve(defaultCLI.getClusterId(commandLine))___		URL webMonitorBaseUrl = clusterClient.getWebMonitorBaseUrl().get()__		assertThat(webMonitorBaseUrl.getHost(), equalTo(manualHostname))__		assertThat(webMonitorBaseUrl.getPort(), equalTo(manualPort))__	};tests,that,command,line,options,override,the,configuration,settings;test,public,void,test,restmanual,configuration,override,throws,exception,final,string,configured,hostname,localhost,final,int,configured,port,1234,final,configuration,configuration,new,configuration,configuration,set,string,job,manager,options,address,configured,hostname,configuration,set,integer,job,manager,options,port,configured,port,configuration,set,string,rest,options,address,configured,hostname,configuration,set,integer,rest,options,port,configured,port,final,default,cli,default,cli,new,default,cli,configuration,final,string,manual,hostname,123,123,123,123,final,int,manual,port,4321,final,string,args,m,manual,hostname,manual,port,command,line,command,line,default,cli,parse,command,line,options,args,false,final,standalone,cluster,descriptor,cluster,descriptor,default,cli,create,cluster,descriptor,command,line,final,rest,cluster,client,cluster,client,cluster,descriptor,retrieve,default,cli,get,cluster,id,command,line,url,web,monitor,base,url,cluster,client,get,web,monitor,base,url,get,assert,that,web,monitor,base,url,get,host,equal,to,manual,hostname,assert,that,web,monitor,base,url,get,port,equal,to,manual,port
