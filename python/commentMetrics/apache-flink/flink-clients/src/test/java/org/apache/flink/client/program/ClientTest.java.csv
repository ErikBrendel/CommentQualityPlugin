# id;timestamp;commentText;codeText;commentWords;codeWords
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1493975167;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1495477702;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1495778594;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1499683297;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1502355408;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1502355550;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1515770044;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1533829432;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws Exception;1535573793;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws Exception {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,exception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void tryLocalExecution();1424100906;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1424369222;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1426843273;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1426843274;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1427784999;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1428935901;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1437665997;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1440951699;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1441011751;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1441614857;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)___			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)___			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config, getClass().getClassLoader()).run(packagedProgramMock, 1, true)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,get,class,get,class,loader,run,packaged,program,mock,1,true,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1442944546;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config).runBlocking(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,run,blocking,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1443682795;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config).runBlocking(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,run,blocking,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1444312509;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config).runBlocking(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,run,blocking,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1447428518;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config).runBlocking(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,run,blocking,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1464705596;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				new Client(config).runBlocking(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,new,client,config,run,blocking,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1466152678;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1490174800;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1493975155;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1493975167;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1495477702;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)__			_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1495778594;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1499683297;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1502355408;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1502355550;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				ClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1515770044;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				StandaloneClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,standalone,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1533829432;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				StandaloneClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,standalone,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1535573793;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			jobManagerSystem.actorOf(_				Props.create(SuccessReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				StandaloneClusterClient client = new StandaloneClusterClient(config)__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,standalone,cluster,client,client,new,standalone,cluster,client,config,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution();1549621945;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() {_		try {_			PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__			when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__			doAnswer(new Answer<Void>() {_				@Override_				public Void answer(InvocationOnMock invocation) throws Throwable {_					ExecutionEnvironment.createLocalEnvironment()__					return null__				}_			}).when(packagedProgramMock).invokeInteractiveModeForExecution()___			try {_				final ClusterClient<?> client = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__				client.setDetached(true)__				client.run(packagedProgramMock, 1)__				fail("Creating the local execution environment should not be possible")__			}_			catch (InvalidProgramException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,try,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,final,cluster,client,client,new,mini,cluster,client,new,configuration,get,mini,cluster,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1447428518;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__		Client out = new Client(config)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1464705596;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__		Client out = new Client(config)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.runDetached(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,detached,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1466152678;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1490174800;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1493975155;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1493975167;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1495477702;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1495778594;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1499683297;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1502355408;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1502355550;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1515770044;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1533829432;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1535573793;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)__		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1549621945;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		final ClusterClient<?> out = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,final,cluster,client,out,new,mini,cluster,client,new,configuration,get,mini,cluster,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1549621945;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		final ClusterClient<?> out = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		out.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			out.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,final,cluster,client,out,new,mini,cluster,client,new,configuration,get,mini,cluster,out,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,out,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void testDetachedMode() throws Exception;1549621945;Tests that invalid detached mode programs fail.;@Test_	public void testDetachedMode() throws Exception{_		final ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		clusterClient.setDetached(true)___		try {_			PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestEager.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetRuntime.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetJobID.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE,_					e.getCause().getMessage())__		}__		try {_			PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class)__			clusterClient.run(prg, 1)__			fail(FAIL_MESSAGE)__		} catch (ProgramInvocationException e) {_			assertEquals(_					DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE,_					e.getCause().getMessage())__		}_	};tests,that,invalid,detached,mode,programs,fail;test,public,void,test,detached,mode,throws,exception,final,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,get,mini,cluster,cluster,client,set,detached,true,try,packaged,program,prg,new,packaged,program,test,execute,twice,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,eager,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,runtime,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,job,id,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,accumulator,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message,try,packaged,program,prg,new,packaged,program,test,get,all,accumulator,class,cluster,client,run,prg,1,fail,catch,program,invocation,exception,e,assert,equals,detached,job,execution,result,detached,job,execution,result,e,get,cause,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1424100906;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobExecutionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)__			assertEquals(-1, result.getNetRuntime())__			assertNull(result.getAllAccumulatorResults())___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,execution,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,assert,equals,1,result,get,net,runtime,assert,null,result,get,all,accumulator,results,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1424369222;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobExecutionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)__			assertEquals(-1, result.getNetRuntime())__			assertNull(result.getAllAccumulatorResults())___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,execution,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,assert,equals,1,result,get,net,runtime,assert,null,result,get,all,accumulator,results,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1426843273;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobExecutionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)__			assertEquals(-1, result.getNetRuntime())__			assertNull(result.getAllAccumulatorResults())___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,execution,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,assert,equals,1,result,get,net,runtime,assert,null,result,get,all,accumulator,results,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1426843274;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobExecutionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)__			assertEquals(-1, result.getNetRuntime())__			assertNull(result.getAllAccumulatorResults())___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,execution,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,assert,equals,1,result,get,net,runtime,assert,null,result,get,all,accumulator,results,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1427784999;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1428935901;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1437665997;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1440951699;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1441011751;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1441614857;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())__			JobSubmissionResult result = out.run(program.getPlanWithJars(), -1, false)___			assertNotNull(result)___			program.deleteExtractedLibraries()___			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,job,submission,result,result,out,run,program,get,plan,with,jars,1,false,assert,not,null,result,program,delete,extracted,libraries,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1442944546;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)__			JobSubmissionResult result = out.runDetached(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,job,submission,result,result,out,run,detached,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1443682795;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)__			JobSubmissionResult result = out.runDetached(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,job,submission,result,result,out,run,detached,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1444312509;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)__			JobSubmissionResult result = out.runDetached(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,job,submission,result,result,out,run,detached,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1447428518;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)__			JobSubmissionResult result = out.runDetached(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,job,submission,result,result,out,run,detached,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1464705596;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)__			JobSubmissionResult result = out.runDetached(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,client,out,new,client,config,job,submission,result,result,out,run,detached,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1466152678;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			ClusterClient out = new StandaloneClusterClient(config)__			out.setDetached(true)__			JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClient();1490174800;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() {_		try {_			jobManagerSystem.actorOf(Props.create(SuccessReturningActor.class), JobManager.JOB_MANAGER_NAME())___			ClusterClient out = new StandaloneClusterClient(config)__			out.setDetached(true)__			JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___			assertNotNull(result)___			program.deleteExtractedLibraries()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,try,job,manager,system,actor,of,props,create,success,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1424100906;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception")__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1424369222;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1426843273;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1426843274;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1427784999;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1428935901;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1437665997;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1440951699;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1441011751;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1441614857;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config, getClass().getClassLoader())___			try {_				out.run(program.getPlanWithJars(), -1, false)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}__			verify(this.compilerMock, times(1)).compile(any(Plan.class))__			verify(this.generatorMock, times(1)).compileJobGraph(any(OptimizedPlan.class))__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,get,class,get,class,loader,try,out,run,program,get,plan,with,jars,1,false,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,verify,this,compiler,mock,times,1,compile,any,plan,class,verify,this,generator,mock,times,1,compile,job,graph,any,optimized,plan,class,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1442944546;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)___			try {_				out.runDetached(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,try,out,run,detached,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1443682795;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)___			try {_				out.runDetached(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,try,out,run,detached,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1444312509;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)___			try {_				out.runDetached(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,try,out,run,detached,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1447428518;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)___			try {_				out.runDetached(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,try,out,run,detached,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1464705596;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			Client out = new Client(config)___			try {_				out.runDetached(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,client,out,new,client,config,try,out,run,detached,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void shouldSubmitToJobClientFails();1466152678;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() {_		try {_			jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___			ClusterClient out = new StandaloneClusterClient(config)__			out.setDetached(true)___			try {_				out.run(program.getPlanWithJars(), 1)__				fail("This should fail with an exception")__			}_			catch (ProgramInvocationException e) {_				_			}_			catch (Exception e) {_				fail("wrong exception " + e)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,try,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message
ClientTest -> @Test 	public void tryLocalExecution() throws ProgramInvocationException, ProgramMissingJobException;1549621945;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() throws ProgramInvocationException, ProgramMissingJobException {_		PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__		when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				ExecutionEnvironment.createLocalEnvironment()__				return null__			}_		}).when(packagedProgramMock).invokeInteractiveModeForExecution()___		try {_			final ClusterClient<?> client = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__			client.setDetached(true)__			client.run(packagedProgramMock, 1)__			fail("Creating the local execution environment should not be possible")__		}_		catch (InvalidProgramException e) {_			_		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,throws,program,invocation,exception,program,missing,job,exception,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,final,cluster,client,client,new,mini,cluster,client,new,configuration,get,mini,cluster,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e
ClientTest -> @Test 	public void tryLocalExecution() throws ProgramInvocationException, ProgramMissingJobException;1549621945;This test verifies that the local execution environment cannot be created when_the program is submitted through a client.;@Test_	public void tryLocalExecution() throws ProgramInvocationException, ProgramMissingJobException {_		PackagedProgram packagedProgramMock = mock(PackagedProgram.class)__		when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				ExecutionEnvironment.createLocalEnvironment()__				return null__			}_		}).when(packagedProgramMock).invokeInteractiveModeForExecution()___		try {_			final ClusterClient<?> client = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__			client.setDetached(true)__			client.run(packagedProgramMock, 1)__			fail("Creating the local execution environment should not be possible")__		}_		catch (InvalidProgramException e) {_			_		}_	};this,test,verifies,that,the,local,execution,environment,cannot,be,created,when,the,program,is,submitted,through,a,client;test,public,void,try,local,execution,throws,program,invocation,exception,program,missing,job,exception,packaged,program,packaged,program,mock,mock,packaged,program,class,when,packaged,program,mock,is,using,interactive,mode,then,return,true,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,execution,environment,create,local,environment,return,null,when,packaged,program,mock,invoke,interactive,mode,for,execution,try,final,cluster,client,client,new,mini,cluster,client,new,configuration,get,mini,cluster,client,set,detached,true,client,run,packaged,program,mock,1,fail,creating,the,local,execution,environment,should,not,be,possible,catch,invalid,program,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws IOException;1490174800;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws IOException {_		jobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME())___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,ioexception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,manager,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClientFails() throws IOException;1493975155;This test verifies correct that the correct exception is thrown when the job submission fails.;@Test_	public void shouldSubmitToJobClientFails() throws IOException {_			jobManagerSystem.actorOf(_				Props.create(FailureReturningActor.class),_				JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)___		try {_			out.run(program.getPlanWithJars(), 1)__			fail("This should fail with an exception")__		}_		catch (ProgramInvocationException e) {_			_		}_		catch (Exception e) {_			fail("wrong exception " + e)__		}_	};this,test,verifies,correct,that,the,correct,exception,is,thrown,when,the,job,submission,fails;test,public,void,should,submit,to,job,client,fails,throws,ioexception,job,manager,system,actor,of,props,create,failure,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,try,out,run,program,get,plan,with,jars,1,fail,this,should,fail,with,an,exception,catch,program,invocation,exception,e,catch,exception,e,fail,wrong,exception,e
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1493975167;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1495477702;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1495778594;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1499683297;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1502355408;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1502355550;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		ClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1515770044;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1533829432;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1535573793;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		jobManagerSystem.actorOf(_			Props.create(SuccessReturningActor.class),_			JobMaster.JOB_MANAGER_NAME)___		StandaloneClusterClient out = new StandaloneClusterClient(config)__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,job,manager,system,actor,of,props,create,success,returning,actor,class,job,master,standalone,cluster,client,out,new,standalone,cluster,client,config,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1549621945;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		final ClusterClient<?> out = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,final,cluster,client,out,new,mini,cluster,client,new,configuration,get,mini,cluster,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1549621945;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		final ClusterClient<?> out = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		out.setDetached(true)__		JobSubmissionResult result = out.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,final,cluster,client,out,new,mini,cluster,client,new,configuration,get,mini,cluster,out,set,detached,true,job,submission,result,result,out,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
ClientTest -> @Test 	public void shouldSubmitToJobClient() throws Exception;1549621945;This test verifies correct job submission messaging logic and plan translation calls.;@Test_	public void shouldSubmitToJobClient() throws Exception {_		final ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster())__		clusterClient.setDetached(true)__		JobSubmissionResult result = clusterClient.run(program.getPlanWithJars(), 1)___		assertNotNull(result)___		program.deleteExtractedLibraries()__	};this,test,verifies,correct,job,submission,messaging,logic,and,plan,translation,calls;test,public,void,should,submit,to,job,client,throws,exception,final,cluster,client,cluster,client,new,mini,cluster,client,new,configuration,get,mini,cluster,cluster,client,set,detached,true,job,submission,result,result,cluster,client,run,program,get,plan,with,jars,1,assert,not,null,result,program,delete,extracted,libraries
