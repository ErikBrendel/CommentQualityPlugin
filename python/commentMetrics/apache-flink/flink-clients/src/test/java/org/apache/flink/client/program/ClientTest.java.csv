commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void setUp() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.createLocalEnvironment().     env.generateSequence(1, 1000).output(new DiscardingOutputFormat<Long>()).     Plan plan = env.createProgramPlan().     JobWithJars jobWithJars = new JobWithJars(plan, Collections.<URL>emptyList(), Collections.<URL>emptyList()).     program = mock(PackagedProgram.class).     when(program.getPlanWithJars()).thenReturn(jobWithJars).     final int freePort = NetUtils.getAvailablePort().     config = new Configuration().     config.setString(JobManagerOptions.ADDRESS, "localhost").     config.setInteger(JobManagerOptions.PORT, freePort).     config.setString(AkkaOptions.ASK_TIMEOUT, AkkaOptions.ASK_TIMEOUT.defaultValue()). }
true;public;0;65;/**  * Tests that invalid detached mode programs fail.  */ ;/**  * Tests that invalid detached mode programs fail.  */ @Test public void testDetachedMode() throws Exception {     final ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster()).     clusterClient.setDetached(true).     try {         PackagedProgram prg = new PackagedProgram(TestExecuteTwice.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.EXECUTE_TWICE_MESSAGE, e.getCause().getMessage()).     }     try {         PackagedProgram prg = new PackagedProgram(TestEager.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE, e.getCause().getMessage()).     }     try {         PackagedProgram prg = new PackagedProgram(TestGetRuntime.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE, e.getCause().getMessage()).     }     try {         PackagedProgram prg = new PackagedProgram(TestGetJobID.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE, e.getCause().getMessage()).     }     try {         PackagedProgram prg = new PackagedProgram(TestGetAccumulator.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE + DetachedJobExecutionResult.EAGER_FUNCTION_MESSAGE, e.getCause().getMessage()).     }     try {         PackagedProgram prg = new PackagedProgram(TestGetAllAccumulator.class).         clusterClient.run(prg, 1).         fail(FAIL_MESSAGE).     } catch (ProgramInvocationException e) {         assertEquals(DetachedJobExecutionResult.DETACHED_MESSAGE + DetachedJobExecutionResult.JOB_RESULT_MESSAGE, e.getCause().getMessage()).     } }
true;public;0;10;/**  * This test verifies correct job submission messaging logic and plan translation calls.  */ ;/**  * This test verifies correct job submission messaging logic and plan translation calls.  */ @Test public void shouldSubmitToJobClient() throws Exception {     final ClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster()).     clusterClient.setDetached(true).     JobSubmissionResult result = clusterClient.run(program.getPlanWithJars(), 1).     assertNotNull(result).     program.deleteExtractedLibraries(). }
false;public;1;5;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     ExecutionEnvironment.createLocalEnvironment().     return null. }
true;public;0;22;/**  * This test verifies that the local execution environment cannot be created when  * the program is submitted through a client.  */ ;/**  * This test verifies that the local execution environment cannot be created when  * the program is submitted through a client.  */ @Test public void tryLocalExecution() throws ProgramInvocationException, ProgramMissingJobException {     PackagedProgram packagedProgramMock = mock(PackagedProgram.class).     when(packagedProgramMock.isUsingInteractiveMode()).thenReturn(true).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             ExecutionEnvironment.createLocalEnvironment().             return null.         }     }).when(packagedProgramMock).invokeInteractiveModeForExecution().     try {         final ClusterClient<?> client = new MiniClusterClient(new Configuration(), MINI_CLUSTER_RESOURCE.getMiniCluster()).         client.setDetached(true).         client.run(packagedProgramMock, 1).         fail("Creating the local execution environment should not be possible").     } catch (InvalidProgramException e) {     // that is what we want     } }
false;public;0;19;;@Test public void testGetExecutionPlan() throws ProgramInvocationException {     PackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, "/dev/random", "/tmp").     assertNotNull(prg.getPreviewPlan()).     Optimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config).     OptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1).     assertNotNull(op).     PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator().     assertNotNull(dumper.getOptimizerPlanAsJSON(op)).     // test HTML escaping     PlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator().     dumper2.setEncodeForHTML(true).     String htmlEscaped = dumper2.getOptimizerPlanAsJSON(op).     assertEquals(-1, htmlEscaped.indexOf('\\')). }
false;public;1;3;;public Tuple2<Long, Long> map(Tuple2<Long, Long> value) {     return new Tuple2<Long, Long>(value.f0, value.f1 + 1). }
false;public,static;1;21;;@SuppressWarnings("serial") public static void main(String[] args) throws Exception {     if (args.length < 2) {         System.err.println("Usage: TestOptimizerPlan <input-file-path> <output-file-path>").         return.     }     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<Long, Long>> input = env.readCsvFile(args[0]).fieldDelimiter("\t").types(Long.class, Long.class).     DataSet<Tuple2<Long, Long>> result = input.map(new MapFunction<Tuple2<Long, Long>, Tuple2<Long, Long>>() {          public Tuple2<Long, Long> map(Tuple2<Long, Long> value) {             return new Tuple2<Long, Long>(value.f0, value.f1 + 1).         }     }).     result.writeAsCsv(args[1], "\n", "\t").     env.execute(). }
false;public;0;4;;@Override public String getDescription() {     return "TestOptimizerPlan <input-file-path> <output-file-path>". }
false;public,static;1;6;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).output(new DiscardingOutputFormat<Integer>()).     env.execute().     env.fromElements(1, 2).collect(). }
false;public,static;1;4;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).collect(). }
false;public,static;1;5;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).output(new DiscardingOutputFormat<Integer>()).     env.execute().getNetRuntime(). }
false;public,static;1;5;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).output(new DiscardingOutputFormat<Integer>()).     env.execute().getJobID(). }
false;public,static;1;5;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).output(new DiscardingOutputFormat<Integer>()).     env.execute().getAccumulatorResult(ACCUMULATOR_NAME). }
false;public,static;1;5;;public static void main(String[] args) throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.fromElements(1, 2).output(new DiscardingOutputFormat<Integer>()).     env.execute().getAllAccumulatorResults(). }
