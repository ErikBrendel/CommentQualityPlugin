commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;59;;@Test public void testRun() throws Exception {     final Configuration configuration = getConfiguration().     // test without parallelism     {         String[] parameters = { "-v", getTestJarPath() }.         verifyCliFrontend(getCli(configuration), parameters, 1, true, false).     }     // test configure parallelism     {         String[] parameters = { "-v", "-p", "42", getTestJarPath() }.         verifyCliFrontend(getCli(configuration), parameters, 42, true, false).     }     // test configure sysout logging     {         String[] parameters = { "-p", "2", "-q", getTestJarPath() }.         verifyCliFrontend(getCli(configuration), parameters, 2, false, false).     }     // test detached mode     {         String[] parameters = { "-p", "2", "-d", getTestJarPath() }.         verifyCliFrontend(getCli(configuration), parameters, 2, true, true).     }     // test configure savepoint path (no ignore flag)     {         String[] parameters = { "-s", "expectedSavepointPath", getTestJarPath() }.         RunOptions options = CliFrontendParser.parseRunCommand(parameters).         SavepointRestoreSettings savepointSettings = options.getSavepointRestoreSettings().         assertTrue(savepointSettings.restoreSavepoint()).         assertEquals("expectedSavepointPath", savepointSettings.getRestorePath()).         assertFalse(savepointSettings.allowNonRestoredState()).     }     // test configure savepoint path (with ignore flag)     {         String[] parameters = { "-s", "expectedSavepointPath", "-n", getTestJarPath() }.         RunOptions options = CliFrontendParser.parseRunCommand(parameters).         SavepointRestoreSettings savepointSettings = options.getSavepointRestoreSettings().         assertTrue(savepointSettings.restoreSavepoint()).         assertEquals("expectedSavepointPath", savepointSettings.getRestorePath()).         assertTrue(savepointSettings.allowNonRestoredState()).     }     // test jar arguments     {         String[] parameters = { getTestJarPath(), "-arg1", "value1", "justavalue", "--arg2", "value2" }.         RunOptions options = CliFrontendParser.parseRunCommand(parameters).         assertEquals("-arg1", options.getProgramArgs()[0]).         assertEquals("value1", options.getProgramArgs()[1]).         assertEquals("justavalue", options.getProgramArgs()[2]).         assertEquals("--arg2", options.getProgramArgs()[3]).         assertEquals("value2", options.getProgramArgs()[4]).     } }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testUnrecognizedOption() throws Exception {     // test unrecognized option     String[] parameters = { "-v", "-l", "-a", "some", "program", "arguments" }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.run(parameters). }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testInvalidParallelismOption() throws Exception {     // test configure parallelism with non integer value     String[] parameters = { "-v", "-p", "text", getTestJarPath() }.     Configuration configuration = getConfiguration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.run(parameters). }
false;public;0;10;;@Test(expected = CliArgsException.class) public void testParallelismWithOverflow() throws Exception {     // test configure parallelism with overflow integer value     String[] parameters = { "-v", "-p", "475871387138", getTestJarPath() }.     Configuration configuration = new Configuration().     CliFrontend testFrontend = new CliFrontend(configuration, Collections.singletonList(getCli(configuration))).     testFrontend.run(parameters). }
false;public,static;5;11;;// -------------------------------------------------------------------------------------------- public static void verifyCliFrontend(AbstractCustomCommandLine<?> cli, String[] parameters, int expectedParallelism, boolean logging, boolean isDetached) throws Exception {     RunTestingCliFrontend testFrontend = new RunTestingCliFrontend(cli, expectedParallelism, logging, isDetached).     // verifies the expected values (see below)     testFrontend.run(parameters). }
false;protected;3;6;;@Override protected void executeProgram(PackagedProgram program, ClusterClient client, int parallelism) {     assertEquals(isDetached, client.isDetached()).     assertEquals(sysoutLogging, client.getPrintStatusDuringExecution()).     assertEquals(expectedParallelism, parallelism). }
