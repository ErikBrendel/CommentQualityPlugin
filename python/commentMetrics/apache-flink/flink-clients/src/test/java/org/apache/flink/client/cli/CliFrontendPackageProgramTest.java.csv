commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;7;;@Before public void setup() throws Exception {     final Configuration configuration = new Configuration().     frontend = new CliFrontend(configuration, Collections.singletonList(new DefaultCLI(configuration))). }
false;public;0;13;;@Test public void testNonExistingJarFile() throws Exception {     ProgramOptions options = mock(ProgramOptions.class).     when(options.getJarFilePath()).thenReturn("/some/none/existing/path").     try {         frontend.buildProgram(options).         fail("should throw an exception").     } catch (FileNotFoundException e) {     // that's what we want     } }
false;public;0;13;;@Test public void testFileNotJarFile() throws Exception {     ProgramOptions options = mock(ProgramOptions.class).     when(options.getJarFilePath()).thenReturn(getNonJarFilePath()).     try {         frontend.buildProgram(options).         fail("should throw an exception").     } catch (ProgramInvocationException e) {     // that's what we want     } }
false;public;0;20;;@Test public void testVariantWithExplicitJarAndArgumentsOption() throws Exception {     String[] arguments = { "--classpath", "file:///tmp/foo", "--classpath", "file:///tmp/bar", "-j", getTestJarPath(), "-a", "--debug", "true", "arg1", "arg2" }.     URL[] classpath = new URL[] { new URL("file:///tmp/foo"), new URL("file:///tmp/bar") }.     String[] reducedArguments = new String[] { "--debug", "true", "arg1", "arg2" }.     RunOptions options = CliFrontendParser.parseRunCommand(arguments).     assertEquals(getTestJarPath(), options.getJarFilePath()).     assertArrayEquals(classpath, options.getClasspaths().toArray()).     assertArrayEquals(reducedArguments, options.getProgramArgs()).     PackagedProgram prog = frontend.buildProgram(options).     Assert.assertArrayEquals(reducedArguments, prog.getArguments()).     Assert.assertEquals(TEST_JAR_MAIN_CLASS, prog.getMainClassName()). }
false;public;0;20;;@Test public void testVariantWithExplicitJarAndNoArgumentsOption() throws Exception {     String[] arguments = { "--classpath", "file:///tmp/foo", "--classpath", "file:///tmp/bar", "-j", getTestJarPath(), "--debug", "true", "arg1", "arg2" }.     URL[] classpath = new URL[] { new URL("file:///tmp/foo"), new URL("file:///tmp/bar") }.     String[] reducedArguments = new String[] { "--debug", "true", "arg1", "arg2" }.     RunOptions options = CliFrontendParser.parseRunCommand(arguments).     assertEquals(getTestJarPath(), options.getJarFilePath()).     assertArrayEquals(classpath, options.getClasspaths().toArray()).     assertArrayEquals(reducedArguments, options.getProgramArgs()).     PackagedProgram prog = frontend.buildProgram(options).     Assert.assertArrayEquals(reducedArguments, prog.getArguments()).     Assert.assertEquals(TEST_JAR_MAIN_CLASS, prog.getMainClassName()). }
false;public;0;20;;@Test public void testValidVariantWithNoJarAndNoArgumentsOption() throws Exception {     String[] arguments = { "--classpath", "file:///tmp/foo", "--classpath", "file:///tmp/bar", getTestJarPath(), "--debug", "true", "arg1", "arg2" }.     URL[] classpath = new URL[] { new URL("file:///tmp/foo"), new URL("file:///tmp/bar") }.     String[] reducedArguments = { "--debug", "true", "arg1", "arg2" }.     RunOptions options = CliFrontendParser.parseRunCommand(arguments).     assertEquals(getTestJarPath(), options.getJarFilePath()).     assertArrayEquals(classpath, options.getClasspaths().toArray()).     assertArrayEquals(reducedArguments, options.getProgramArgs()).     PackagedProgram prog = frontend.buildProgram(options).     Assert.assertArrayEquals(reducedArguments, prog.getArguments()).     Assert.assertEquals(TEST_JAR_MAIN_CLASS, prog.getMainClassName()). }
false;public;0;4;;@Test(expected = CliArgsException.class) public void testNoJarNoArgumentsAtAll() throws Exception {     frontend.run(new String[0]). }
false;public;0;23;;@Test public void testNonExistingFileWithArguments() throws Exception {     String[] arguments = { "--classpath", "file:///tmp/foo", "--classpath", "file:///tmp/bar", "/some/none/existing/path", "--debug", "true", "arg1", "arg2" }.     URL[] classpath = new URL[] { new URL("file:///tmp/foo"), new URL("file:///tmp/bar") }.     String[] reducedArguments = { "--debug", "true", "arg1", "arg2" }.     RunOptions options = CliFrontendParser.parseRunCommand(arguments).     assertEquals(arguments[4], options.getJarFilePath()).     assertArrayEquals(classpath, options.getClasspaths().toArray()).     assertArrayEquals(reducedArguments, options.getProgramArgs()).     try {         frontend.buildProgram(options).         fail("Should fail with an exception").     } catch (FileNotFoundException e) {     // that's what we want     } }
false;public;0;15;;@Test public void testNonExistingFileWithoutArguments() throws Exception {     String[] arguments = { "/some/none/existing/path" }.     RunOptions options = CliFrontendParser.parseRunCommand(arguments).     assertEquals(arguments[0], options.getJarFilePath()).     assertArrayEquals(new String[0], options.getProgramArgs()).     try {         frontend.buildProgram(options).     } catch (FileNotFoundException e) {     // that's what we want     } }
false;public;1;9;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     if ("org.apache.hadoop.hive.ql.io.RCFileInputFormat".equals(name)) {         callme[0] = true.         // Intentionally return the wrong class.         return String.class.     } else {         return super.loadClass(name).     } }
true;public;0;52;/**  *  Ensure that we will never have the following error.  *  *  <pre>  *  	org.apache.flink.client.program.ProgramInvocationException: The main method caused an error.  * 		at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:398)  * 		at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:301)  * 		at org.apache.flink.client.program.Client.getOptimizedPlan(Client.java:140)  * 		at org.apache.flink.client.program.Client.getOptimizedPlanAsJson(Client.java:125)  * 		at org.apache.flink.client.cli.CliFrontend.info(CliFrontend.java:439)  * 		at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:931)  * 		at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:951)  * 	Caused by: java.io.IOException: java.lang.RuntimeException: java.lang.ClassNotFoundException: org.apache.hadoop.hive.ql.io.RCFileInputFormat  * 		at org.apache.hcatalog.mapreduce.HCatInputFormat.setInput(HCatInputFormat.java:102)  * 		at org.apache.hcatalog.mapreduce.HCatInputFormat.setInput(HCatInputFormat.java:54)  * 		at tlabs.CDR_In_Report.createHCatInputFormat(CDR_In_Report.java:322)  * 		at tlabs.CDR_Out_Report.main(CDR_Out_Report.java:380)  * 		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  * 		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)  * 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  * 		at java.lang.reflect.Method.invoke(Method.java:622)  * 		at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:383)  *  </pre>  *  *  <p>The test works as follows:  *  *  <ul>  *    <li> Use the CliFrontend to invoke a jar file that loads a class which is only available  *  	      in the jarfile itself (via a custom classloader)  *    <li> Change the Usercode classloader of the PackagedProgram to a special classloader for this test  *    <li> the classloader will accept the special class (and return a String.class)  *  </ul>  */ ;/**  *  Ensure that we will never have the following error.  *  *  <pre>  *  	org.apache.flink.client.program.ProgramInvocationException: The main method caused an error.  * 		at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:398)  * 		at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:301)  * 		at org.apache.flink.client.program.Client.getOptimizedPlan(Client.java:140)  * 		at org.apache.flink.client.program.Client.getOptimizedPlanAsJson(Client.java:125)  * 		at org.apache.flink.client.cli.CliFrontend.info(CliFrontend.java:439)  * 		at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:931)  * 		at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:951)  * 	Caused by: java.io.IOException: java.lang.RuntimeException: java.lang.ClassNotFoundException: org.apache.hadoop.hive.ql.io.RCFileInputFormat  * 		at org.apache.hcatalog.mapreduce.HCatInputFormat.setInput(HCatInputFormat.java:102)  * 		at org.apache.hcatalog.mapreduce.HCatInputFormat.setInput(HCatInputFormat.java:54)  * 		at tlabs.CDR_In_Report.createHCatInputFormat(CDR_In_Report.java:322)  * 		at tlabs.CDR_Out_Report.main(CDR_Out_Report.java:380)  * 		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  * 		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)  * 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  * 		at java.lang.reflect.Method.invoke(Method.java:622)  * 		at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:383)  *  </pre>  *  *  <p>The test works as follows:  *  *  <ul>  *    <li> Use the CliFrontend to invoke a jar file that loads a class which is only available  *  	      in the jarfile itself (via a custom classloader)  *    <li> Change the Usercode classloader of the PackagedProgram to a special classloader for this test  *    <li> the classloader will accept the special class (and return a String.class)  *  </ul>  */ @Test public void testPlanWithExternalClass() throws Exception {     // create a final object reference, to be able to change its val later     final boolean[] callme = { false }.     try {         String[] arguments = { "--classpath", "file:///tmp/foo", "--classpath", "file:///tmp/bar", "-c", TEST_JAR_CLASSLOADERTEST_CLASS, getTestJarPath(), "true", "arg1", "arg2" }.         URL[] classpath = new URL[] { new URL("file:///tmp/foo"), new URL("file:///tmp/bar") }.         String[] reducedArguments = { "true", "arg1", "arg2" }.         RunOptions options = CliFrontendParser.parseRunCommand(arguments).         assertEquals(getTestJarPath(), options.getJarFilePath()).         assertArrayEquals(classpath, options.getClasspaths().toArray()).         assertEquals(TEST_JAR_CLASSLOADERTEST_CLASS, options.getEntryPointClassName()).         assertArrayEquals(reducedArguments, options.getProgramArgs()).         PackagedProgram prog = spy(frontend.buildProgram(options)).         ClassLoader testClassLoader = new ClassLoader(prog.getUserCodeClassLoader()) {              @Override             public Class<?> loadClass(String name) throws ClassNotFoundException {                 if ("org.apache.hadoop.hive.ql.io.RCFileInputFormat".equals(name)) {                     callme[0] = true.                     // Intentionally return the wrong class.                     return String.class.                 } else {                     return super.loadClass(name).                 }             }         }.         when(prog.getUserCodeClassLoader()).thenReturn(testClassLoader).         assertEquals(TEST_JAR_CLASSLOADERTEST_CLASS, prog.getMainClassName()).         assertArrayEquals(reducedArguments, prog.getArguments()).         Configuration c = new Configuration().         Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), c).         // we expect this to fail with a "ClassNotFoundException"         ClusterClient.getOptimizedPlanAsJson(compiler, prog, 666).         fail("Should have failed with a ClassNotFoundException").     } catch (ProgramInvocationException e) {         if (!(e.getCause() instanceof ClassNotFoundException)) {             e.printStackTrace().             fail("Program didn't throw ClassNotFoundException").         }         assertTrue("Classloader was not called", callme[0]).     } }
