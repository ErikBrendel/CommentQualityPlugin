commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;14;/**  * Generates the REST API documentation.  *  * @param args args[0] contains the directory into which the generated files are placed  * @throws IOException if any file operation failed  */ ;/**  * Generates the REST API documentation.  *  * @param args args[0] contains the directory into which the generated files are placed  * @throws IOException if any file operation failed  */ public static void main(String[] args) throws IOException {     String outputDirectory = args[0].     for (final RestAPIVersion apiVersion : RestAPIVersion.values()) {         if (apiVersion == RestAPIVersion.V0) {             // this version exists only for testing purposes             continue.         }         createHtmlFile(new DocumentingDispatcherRestEndpoint(), apiVersion, Paths.get(outputDirectory, "rest_" + apiVersion.getURLVersionPrefix() + "_dispatcher.html")).     } }
false;private,static;3;11;;private static void createHtmlFile(DocumentingRestEndpoint restEndpoint, RestAPIVersion apiVersion, Path outputFile) throws IOException {     StringBuilder html = new StringBuilder().     List<MessageHeaders> specs = restEndpoint.getSpecs().stream().filter(spec -> spec.getSupportedAPIVersions().contains(apiVersion)).collect(Collectors.toList()).     specs.forEach(spec -> html.append(createHtmlEntry(spec))).     Files.deleteIfExists(outputFile).     Files.write(outputFile, html.toString().getBytes(StandardCharsets.UTF_8)). }
false;private,static;1;83;;private static String createHtmlEntry(MessageHeaders<?, ?, ?> spec) {     String requestEntry = createMessageHtmlEntry(spec.getRequestClass(), EmptyRequestBody.class).     String responseEntry = createMessageHtmlEntry(spec.getResponseClass(), EmptyResponseBody.class).     String pathParameterList = createPathParameterHtmlList(spec.getUnresolvedMessageParameters().getPathParameters()).     String queryParameterList = createQueryParameterHtmlList(spec.getUnresolvedMessageParameters().getQueryParameters()).     StringBuilder sb = new StringBuilder().     {         sb.append("<table class=\"table table-bordered\">\n").         sb.append("  <tbody>\n").         sb.append("    <tr>\n").         sb.append("      <td class=\"text-left\" colspan=\"2\"><h5><strong>" + spec.getTargetRestEndpointURL() + "</strong></h5></td>\n").         sb.append("    </tr>\n").         sb.append("    <tr>\n").         sb.append("      <td class=\"text-left\" style=\"width: 20%\">Verb: <code>" + spec.getHttpMethod() + "</code></td>\n").         sb.append("      <td class=\"text-left\">Response code: <code>" + spec.getResponseStatusCode() + "</code></td>\n").         sb.append("    </tr>\n").         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">" + escapeCharacters(spec.getDescription()) + "</td>\n").         sb.append("    </tr>\n").     }     if (!pathParameterList.isEmpty()) {         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">Path parameters</td>\n").         sb.append("    </tr>\n").         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">\n").         sb.append("        <ul>\n").         sb.append(pathParameterList).         sb.append("        </ul>\n").         sb.append("      </td>\n").         sb.append("    </tr>\n").     }     if (!queryParameterList.isEmpty()) {         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">Query parameters</td>\n").         sb.append("    </tr>\n").         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">\n").         sb.append("        <ul>\n").         sb.append(queryParameterList).         sb.append("        </ul>\n").         sb.append("      </td>\n").         sb.append("    </tr>\n").     }     int reqHash = spec.getTargetRestEndpointURL().hashCode() + spec.getHttpMethod().name().hashCode() + spec.getRequestClass().getCanonicalName().hashCode().     int resHash = spec.getTargetRestEndpointURL().hashCode() + spec.getHttpMethod().name().hashCode() + spec.getResponseClass().getCanonicalName().hashCode().     {         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">\n").         sb.append("        <button data-toggle=\"collapse\" data-target=\"#" + reqHash + "\">Request</button>\n").         sb.append("        <div id=\"" + reqHash + "\" class=\"collapse\">\n").         sb.append("          <pre>\n").         sb.append("            <code>\n").         sb.append(requestEntry).         sb.append("            </code>\n").         sb.append("          </pre>\n").         sb.append("         </div>\n").         sb.append("      </td>\n").         sb.append("    </tr>\n").         sb.append("    <tr>\n").         sb.append("      <td colspan=\"2\">\n").         sb.append("        <button data-toggle=\"collapse\" data-target=\"#" + resHash + "\">Response</button>\n").         sb.append("        <div id=\"" + resHash + "\" class=\"collapse\">\n").         sb.append("          <pre>\n").         sb.append("            <code>\n").         sb.append(responseEntry).         sb.append("            </code>\n").         sb.append("          </pre>\n").         sb.append("         </div>\n").         sb.append("      </td>\n").         sb.append("    </tr>\n").         sb.append("  </tbody>\n").         sb.append("</table>\n").     }     return sb.toString(). }
false;private,static;1;10;;private static String createPathParameterHtmlList(Collection<MessagePathParameter<?>> pathParameters) {     StringBuilder pathParameterList = new StringBuilder().     pathParameters.forEach(messagePathParameter -> pathParameterList.append(String.format("<li><code>%s</code> - %s</li>\n", messagePathParameter.getKey(), messagePathParameter.getDescription()))).     return pathParameterList.toString(). }
false;private,static;1;13;;private static String createQueryParameterHtmlList(Collection<MessageQueryParameter<?>> queryParameters) {     StringBuilder queryParameterList = new StringBuilder().     queryParameters.stream().sorted((param1, param2) -> Boolean.compare(param1.isMandatory(), param2.isMandatory())).forEach(parameter -> queryParameterList.append(String.format("<li><code>%s</code> (%s): %s</li>\n", parameter.getKey(), parameter.isMandatory() ? "mandatory" : "optional", parameter.getDescription()))).     return queryParameterList.toString(). }
false;private,static;2;24;;private static String createMessageHtmlEntry(Class<?> messageClass, Class<?> emptyMessageClass) {     JsonSchema schema.     try {         schema = schemaGen.generateSchema(messageClass).     } catch (JsonProcessingException e) {         LOG.error("Failed to generate message schema for class {}.", messageClass, e).         throw new RuntimeException("Failed to generate message schema for class " + messageClass.getCanonicalName() + ".", e).     }     String json.     if (messageClass == emptyMessageClass) {         json = "{}".     } else {         try {             json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(schema).         } catch (JsonProcessingException e) {             LOG.error("Failed to write message schema for class {}.", messageClass.getCanonicalName(), e).             throw new RuntimeException("Failed to write message schema for class " + messageClass.getCanonicalName() + ".", e).         }     }     return json. }
false;public;0;4;;@Override public int[] getEscapeCodesForAscii() {     return asciiEscapes. }
false;public;1;4;;@Override public SerializableString getEscapeSequence(int i) {     return escapeSequences.getOrDefault(i, null). }
false;public;1;4;;@Override public List<Tuple2<RestHandlerSpecification, ChannelInboundHandler>> initializeHandlers(final CompletableFuture<String> localAddressFuture) {     return super.initializeHandlers(localAddressFuture). }
false;public;1;4;;@Override public void start(final LeaderContender contender) throws Exception { }
false;public;0;4;;@Override public void stop() throws Exception { }
false;public;1;4;;@Override public void confirmLeaderSessionID(final UUID leaderSessionID) { }
false;public;1;4;;@Override public boolean hasLeadership(@Nonnull UUID leaderSessionId) {     return false. }
false;public;1;4;;@Override public void onFatalError(final Throwable exception) { }
false;;1;1;;List<Tuple2<RestHandlerSpecification, ChannelInboundHandler>> initializeHandlers(final CompletableFuture<String> localAddressFuture).
false;default;0;9;;default List<MessageHeaders> getSpecs() {     Comparator<String> comparator = new RestServerEndpoint.RestHandlerUrlComparator.CaseInsensitiveOrderComparator().     return initializeHandlers(CompletableFuture.completedFuture(null)).stream().map(tuple -> tuple.f0).filter(spec -> spec instanceof MessageHeaders).map(spec -> (MessageHeaders) spec).sorted((spec1, spec2) -> comparator.compare(spec1.getTargetRestEndpointURL(), spec2.getTargetRestEndpointURL())).collect(Collectors.toList()). }
