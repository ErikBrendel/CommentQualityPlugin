commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testCreatingDescription() {     final String expectedTable = "<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>first.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">2</td>\n" + "            <td>This is example description for the first option.</td>\n" + "        </tr>\n" + "        <tr>\n" + "            <td><h5>second.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">(none)</td>\n" + "            <td>This is long example description for the second option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n".     final String htmlTable = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigGroup.class).get(0).f1.     assertEquals(expectedTable, htmlTable). }
false;public;0;17;;@Test public void testLongestPrefixMatching() {     final List<Tuple2<ConfigGroup, String>> tables = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigPrefix.class).     assertEquals(3, tables.size()).     final Map<String, String> tablesConverted = new HashMap<>(tables.size()).     for (final Tuple2<ConfigGroup, String> table : tables) {         tablesConverted.put(table.f0 != null ? table.f0.name() : "default", table.f1).     }     assertThat(tablesConverted.get("group1"), containsString("a.b.option")).     assertThat(tablesConverted.get("group1"), containsString("a.b.c.option")).     assertThat(tablesConverted.get("group1"), containsString("a.b.c.e.option")).     assertThat(tablesConverted.get("default"), containsString("a.option")).     assertThat(tablesConverted.get("default"), containsString("a.c.b.option")). }
false;public;0;68;;@Test public void testCreatingMultipleGroups() {     final List<Tuple2<ConfigGroup, String>> tables = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigMultipleSubGroup.class).     assertEquals(tables.size(), 3).     final HashMap<String, String> tablesConverted = new HashMap<>().     for (Tuple2<ConfigGroup, String> table : tables) {         tablesConverted.put(table.f0 != null ? table.f0.name() : "default", table.f1).     }     assertEquals("<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>first.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">2</td>\n" + "            <td>This is example description for the first option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n", tablesConverted.get("firstGroup")).     assertEquals("<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>second.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">(none)</td>\n" + "            <td>This is long example description for the second option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n", tablesConverted.get("secondGroup")).     assertEquals("<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>fourth.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">(none)</td>\n" + "            <td>This is long example description for the fourth option.</td>\n" + "        </tr>\n" + "        <tr>\n" + "            <td><h5>third.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">2</td>\n" + "            <td>This is example description for the third option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n", tablesConverted.get("default")). }
false;public;0;28;;@Test public void testOverrideDefault() {     final String expectedTable = "<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>first.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">default_1</td>\n" + "            <td>This is example description for the first option.</td>\n" + "        </tr>\n" + "        <tr>\n" + "            <td><h5>second.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">default_2</td>\n" + "            <td>This is long example description for the second option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n".     final String htmlTable = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigGroupWithOverriddenDefault.class).get(0).f1.     assertEquals(expectedTable, htmlTable). }
false;public;0;39;;@Test public void testCommonOptions() throws IOException, ClassNotFoundException {     final String projectRootDir = System.getProperty("rootDir").     final String outputDirectory = TMP.newFolder().getAbsolutePath().     final OptionsClassLocation[] locations = new OptionsClassLocation[] { new OptionsClassLocation("flink-docs", TestCommonOptions.class.getPackage().getName()) }.     ConfigOptionsDocGenerator.generateCommonSection(projectRootDir, outputDirectory, locations, "src/test/java").     Formatter formatter = new HtmlFormatter().     String expected = "<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>" + TestCommonOptions.COMMON_POSITIONED_OPTION.key() + "</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">" + TestCommonOptions.COMMON_POSITIONED_OPTION.defaultValue() + "</td>\n" + "            <td>" + formatter.format(TestCommonOptions.COMMON_POSITIONED_OPTION.description()) + "</td>\n" + "        </tr>\n" + "        <tr>\n" + "            <td><h5>" + TestCommonOptions.COMMON_OPTION.key() + "</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">" + TestCommonOptions.COMMON_OPTION.defaultValue() + "</td>\n" + "            <td>" + formatter.format(TestCommonOptions.COMMON_OPTION.description()) + "</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n".     String output = FileUtils.readFile(Paths.get(outputDirectory, ConfigOptionsDocGenerator.COMMON_SECTION_FILE_NAME).toFile(), StandardCharsets.UTF_8.name()).     assertEquals(expected, output). }
true;public;0;23;/**  * Tests that {@link ConfigOption} annotated with {@link Documentation.ExcludeFromDocumentation}  * are not documented.  */ ;/**  * Tests that {@link ConfigOption} annotated with {@link Documentation.ExcludeFromDocumentation}  * are not documented.  */ @Test public void testConfigOptionExclusion() {     final String expectedTable = "<table class=\"table table-bordered\">\n" + "    <thead>\n" + "        <tr>\n" + "            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n" + "            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n" + "            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n" + "        </tr>\n" + "    </thead>\n" + "    <tbody>\n" + "        <tr>\n" + "            <td><h5>first.option.a</h5></td>\n" + "            <td style=\"word-wrap: break-word.\">2</td>\n" + "            <td>This is example description for the first option.</td>\n" + "        </tr>\n" + "    </tbody>\n" + "</table>\n".     final String htmlTable = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigGroupWithExclusion.class).get(0).f1.     assertEquals(expectedTable, htmlTable). }
