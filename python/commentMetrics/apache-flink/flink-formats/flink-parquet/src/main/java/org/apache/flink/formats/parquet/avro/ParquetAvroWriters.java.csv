commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Creates a ParquetWriterFactory for an Avro specific type. The Parquet writers will use the  * schema of that specific type to build and write the columnar data.  *  * @param type The class of the type to write.  */ ;/**  * Creates a ParquetWriterFactory for an Avro specific type. The Parquet writers will use the  * schema of that specific type to build and write the columnar data.  *  * @param type The class of the type to write.  */ public static <T extends SpecificRecordBase> ParquetWriterFactory<T> forSpecificRecord(Class<T> type) {     final String schemaString = SpecificData.get().getSchema(type).toString().     final ParquetBuilder<T> builder = (out) -> createAvroParquetWriter(schemaString, SpecificData.get(), out).     return new ParquetWriterFactory<>(builder). }
true;public,static;1;5;/**  * Creates a ParquetWriterFactory that accepts and writes Avro generic types.  * The Parquet writers will use the given schema to build and write the columnar data.  *  * @param schema The schema of the generic type.  */ ;/**  * Creates a ParquetWriterFactory that accepts and writes Avro generic types.  * The Parquet writers will use the given schema to build and write the columnar data.  *  * @param schema The schema of the generic type.  */ public static ParquetWriterFactory<GenericRecord> forGenericRecord(Schema schema) {     final String schemaString = schema.toString().     final ParquetBuilder<GenericRecord> builder = (out) -> createAvroParquetWriter(schemaString, GenericData.get(), out).     return new ParquetWriterFactory<>(builder). }
true;public,static;1;5;/**  * Creates a ParquetWriterFactory for the given type. The Parquet writers will use Avro  * to reflectively create a schema for the type and use that schema to write the columnar data.  *  * @param type The class of the type to write.  */ ;/**  * Creates a ParquetWriterFactory for the given type. The Parquet writers will use Avro  * to reflectively create a schema for the type and use that schema to write the columnar data.  *  * @param type The class of the type to write.  */ public static <T> ParquetWriterFactory<T> forReflectRecord(Class<T> type) {     final String schemaString = ReflectData.get().getSchema(type).toString().     final ParquetBuilder<T> builder = (out) -> createAvroParquetWriter(schemaString, ReflectData.get(), out).     return new ParquetWriterFactory<>(builder). }
false;private,static;3;12;;private static <T> ParquetWriter<T> createAvroParquetWriter(String schemaString, GenericData dataModel, OutputFile out) throws IOException {     final Schema schema = new Schema.Parser().parse(schemaString).     return AvroParquetWriter.<T>builder(out).withSchema(schema).withDataModel(dataModel).build(). }
