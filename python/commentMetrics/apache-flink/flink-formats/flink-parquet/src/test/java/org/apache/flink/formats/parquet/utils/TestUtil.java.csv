commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;12;;public static Path createTempParquetFile(File folder, Schema schema, List<IndexedRecord> records) throws IOException {     Path path = new Path(folder.getPath(), UUID.randomUUID().toString()).     ParquetWriter<IndexedRecord> writer = AvroParquetWriter.<IndexedRecord>builder(new org.apache.hadoop.fs.Path(path.toUri())).withSchema(schema).withRowGroupSize(10).build().     for (IndexedRecord record : records) {         writer.write(record).     }     writer.close().     return path. }
false;public,static;0;19;;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getSimpleRecordTestData() {     Long[] longArray = { 1L }.     final SimpleRecord simpleRecord = SimpleRecord.newBuilder().setBar("test_simple").setFoo(1L).setArr(Arrays.asList(longArray)).build().     final Row simpleRow = new Row(3).     simpleRow.setField(0, 1L).     simpleRow.setField(1, "test_simple").     simpleRow.setField(2, longArray).     final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>().     t.f0 = SimpleRecord.class.     t.f1 = simpleRecord.     t.f2 = simpleRow.     return t. }
false;public,static;0;63;;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getNestedRecordTestData() {     final Bar bar = Bar.newBuilder().setSpam(1L).build().     final ArrayItem arrayItem = ArrayItem.newBuilder().setType("color").setValue("yellow").build().     final MapItem mapItem = MapItem.newBuilder().setType("map").setValue("hashMap").build().     List<ArrayItem> nestedArray = new ArrayList<>().     nestedArray.add(arrayItem).     Map<CharSequence, MapItem> nestedMap = new HashMap<>().     nestedMap.put("mapItem", mapItem).     List<Long> longArray = new ArrayList<>().     longArray.add(1L).     List<CharSequence> stringArray = new ArrayList<>().     stringArray.add("String").     Long[] primitiveLongArray = { 1L }.     String[] primitiveStringArray = { "String" }.     final NestedRecord nestedRecord = NestedRecord.newBuilder().setBar(bar).setNestedArray(nestedArray).setStrArray(stringArray).setNestedMap(nestedMap).setArr(longArray).build().     final Row barRow = new Row(1).     barRow.setField(0, 1L).     final Row arrayItemRow = new Row(2).     arrayItemRow.setField(0, "color").     arrayItemRow.setField(1, "yellow").     final Row mapItemRow = new Row(2).     mapItemRow.setField(0, "map").     mapItemRow.setField(1, "hashMap").     Row[] nestedRowArray = { arrayItemRow }.     Map<String, Row> nestedRowMap = new HashMap<>().     nestedRowMap.put("mapItem", mapItemRow).     final Row nestedRow = new Row(7).     nestedRow.setField(2, barRow).     nestedRow.setField(3, primitiveLongArray).     nestedRow.setField(4, primitiveStringArray).     nestedRow.setField(5, nestedRowMap).     nestedRow.setField(6, nestedRowArray).     final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>().     t.f0 = NestedRecord.class.     t.f1 = nestedRecord.     t.f2 = nestedRow.     return t. }
false;public,static;0;6;;public static RuntimeContext getMockRuntimeContext() {     RuntimeContext mockContext = Mockito.mock(RuntimeContext.class).     Mockito.doReturn(UnregisteredMetricGroups.createUnregisteredOperatorMetricGroup()).when(mockContext).getMetricGroup().     return mockContext. }
false;private,static;1;9;;private static Schema getTestSchema(String schemaName) {     try {         InputStream inputStream = TestUtil.class.getClassLoader().getResourceAsStream("avro/" + schemaName).         return new Schema.Parser().parse(inputStream).     } catch (IOException e) {         throw new RuntimeException(e).     } }
