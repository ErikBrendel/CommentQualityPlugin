commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testWriteParquetAvroSpecific() throws Exception {     final File folder = TEMPORARY_FOLDER.newFolder().     final List<Address> data = Arrays.asList(new Address(1, "a", "b", "c", "12345"), new Address(2, "p", "q", "r", "12345"), new Address(3, "x", "y", "z", "12345")).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.enableCheckpointing(100).     DataStream<Address> stream = env.addSource(new FiniteTestSource<>(data), TypeInformation.of(Address.class)).     stream.addSink(StreamingFileSink.forBulkFormat(Path.fromLocalFile(folder), ParquetAvroWriters.forSpecificRecord(Address.class)).build()).     env.execute().     validateResults(folder, SpecificData.get(), data). }
false;public;0;30;;@Test public void testWriteParquetAvroGeneric() throws Exception {     final File folder = TEMPORARY_FOLDER.newFolder().     final Schema schema = Address.getClassSchema().     final Collection<GenericRecord> data = new GenericTestDataCollection().     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.enableCheckpointing(100).     DataStream<GenericRecord> stream = env.addSource(new FiniteTestSource<>(data), new GenericRecordAvroTypeInfo(schema)).     stream.addSink(StreamingFileSink.forBulkFormat(Path.fromLocalFile(folder), ParquetAvroWriters.forGenericRecord(schema)).build()).     env.execute().     List<Address> expected = Arrays.asList(new Address(1, "a", "b", "c", "12345"), new Address(2, "x", "y", "z", "98765")).     validateResults(folder, SpecificData.get(), expected). }
false;public;0;25;;@Test public void testWriteParquetAvroReflect() throws Exception {     final File folder = TEMPORARY_FOLDER.newFolder().     final List<Datum> data = Arrays.asList(new Datum("a", 1), new Datum("b", 2), new Datum("c", 3)).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.enableCheckpointing(100).     DataStream<Datum> stream = env.addSource(new FiniteTestSource<>(data), TypeInformation.of(Datum.class)).     stream.addSink(StreamingFileSink.forBulkFormat(Path.fromLocalFile(folder), ParquetAvroWriters.forReflectRecord(Datum.class)).build()).     env.execute().     validateResults(folder, ReflectData.get(), data). }
false;private,static;3;16;;// ------------------------------------------------------------------------ private static <T> void validateResults(File folder, GenericData dataModel, List<T> expected) throws Exception {     File[] buckets = folder.listFiles().     assertNotNull(buckets).     assertEquals(1, buckets.length).     File[] partFiles = buckets[0].listFiles().     assertNotNull(partFiles).     assertEquals(2, partFiles.length).     for (File partFile : partFiles) {         assertTrue(partFile.length() > 0).         final List<Tuple2<Long, String>> fileContent = readParquetFile(partFile, dataModel).         assertEquals(expected, fileContent).     } }
false;private,static;2;13;;private static <T> List<T> readParquetFile(File file, GenericData dataModel) throws IOException {     InputFile inFile = HadoopInputFile.fromPath(new org.apache.hadoop.fs.Path(file.toURI()), new Configuration()).     ArrayList<T> results = new ArrayList<>().     try (ParquetReader<T> reader = AvroParquetReader.<T>builder(inFile).withDataModel(dataModel).build()) {         T next.         while ((next = reader.read()) != null) {             results.add(next).         }     }     return results. }
false;public;0;18;;@Override public Iterator<GenericRecord> iterator() {     final GenericRecord rec1 = new GenericData.Record(Address.getClassSchema()).     rec1.put(0, 1).     rec1.put(1, "a").     rec1.put(2, "b").     rec1.put(3, "c").     rec1.put(4, "12345").     final GenericRecord rec2 = new GenericData.Record(Address.getClassSchema()).     rec2.put(0, 2).     rec2.put(1, "x").     rec2.put(2, "y").     rec2.put(3, "z").     rec2.put(4, "98765").     return Arrays.asList(rec1, rec2).iterator(). }
false;public;0;4;;@Override public int size() {     return 2. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Datum datum = (Datum) o.     return b == datum.b && (a != null ? a.equals(datum.a) : datum.a == null). }
false;public;0;6;;@Override public int hashCode() {     int result = a != null ? a.hashCode() : 0.     result = 31 * result + b.     return result. }
