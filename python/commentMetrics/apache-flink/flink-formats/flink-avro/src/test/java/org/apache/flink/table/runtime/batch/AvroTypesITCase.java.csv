commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testAvroToRow() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().registerTypeWithKryoSerializer(LocalDate.class, AvroKryoSerializerUtils.JodaLocalDateSerializer.class).     env.getConfig().registerTypeWithKryoSerializer(LocalTime.class, AvroKryoSerializerUtils.JodaLocalTimeSerializer.class).     BatchTableEnvironment tEnv = BatchTableEnvironment.create(env, config()).     Table t = tEnv.fromDataSet(testData(env)).     Table result = t.select("*").     List<Row> results = tEnv.toDataSet(result, Row.class).collect().     String expected = "black,null,Whatever,[true],[hello],true,java.nio.HeapByteBuffer[pos=0 lim=10 cap=10]," + "2014-03-01,java.nio.HeapByteBuffer[pos=0 lim=2 cap=2],[7, -48],0.0,GREEN," + "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],42,{},null,null,null,123456," + "12:12:12.000,123456,2014-03-01T12:12:12.321Z,null\n" + "blue,null,Charlie,[],[],false,java.nio.HeapByteBuffer[pos=0 lim=10 cap=10],2014-03-01," + "java.nio.HeapByteBuffer[pos=0 lim=2 cap=2],[7, -48],1.337,RED,null,1337,{}," + "{\"num\": 42, \"street\": \"Bakerstreet\", \"city\": \"Berlin\", \"state\": " + "\"Berlin\", \"zip\": \"12049\"},null,null,123456,12:12:12.000,123456," + "2014-03-01T12:12:12.321Z,null\n" + "yellow,null,Terminator,[false],[world],false," + "java.nio.HeapByteBuffer[pos=0 lim=10 cap=10],2014-03-01," + "java.nio.HeapByteBuffer[pos=0 lim=2 cap=2],[7, -48],0.0,GREEN," + "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],1,{},null,null,null,123456," + "12:12:12.000,123456,2014-03-01T12:12:12.321Z,null".     TestBaseUtils.compareResultAsText(results, expected). }
false;public;0;13;;@Test public void testAvroStringAccess() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     BatchTableEnvironment tEnv = BatchTableEnvironment.create(env, config()).     Table t = tEnv.fromDataSet(testData(env)).     Table result = t.select("name").     List<Utf8> results = tEnv.toDataSet(result, Types.GENERIC(Utf8.class)).collect().     String expected = "Charlie\n" + "Terminator\n" + "Whatever".     TestBaseUtils.compareResultAsText(results, expected). }
false;public;0;14;;@Test public void testAvroObjectAccess() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     BatchTableEnvironment tEnv = BatchTableEnvironment.create(env, config()).     Table t = tEnv.fromDataSet(testData(env)).     Table result = t.filter("type_nested.isNotNull").select("type_nested.flatten()").as("city, num, state, street, zip").     List<Address> results = tEnv.toDataSet(result, Types.POJO(Address.class)).collect().     String expected = USER_1.getTypeNested().toString().     TestBaseUtils.compareResultAsText(results, expected). }
false;public;0;12;;@Test public void testAvroToAvro() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     BatchTableEnvironment tEnv = BatchTableEnvironment.create(env, config()).     Table t = tEnv.fromDataSet(testData(env)).     Table result = t.select("*").     List<User> results = tEnv.toDataSet(result, Types.POJO(User.class)).collect().     List<User> expected = Arrays.asList(USER_1, USER_2, USER_3).     assertEquals(expected, results). }
false;private;1;7;;private DataSet<User> testData(ExecutionEnvironment env) {     List<User> data = new ArrayList<>(3).     data.add(USER_1).     data.add(USER_2).     data.add(USER_3).     return env.fromCollection(data). }
