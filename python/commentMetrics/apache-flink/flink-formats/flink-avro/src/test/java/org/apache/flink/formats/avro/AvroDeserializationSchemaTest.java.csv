commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testGenericRecord() throws Exception {     DeserializationSchema<GenericRecord> deserializationSchema = AvroDeserializationSchema.forGeneric(address.getSchema()).     byte[] encodedAddress = writeRecord(address, Address.getClassSchema()).     GenericRecord genericRecord = deserializationSchema.deserialize(encodedAddress).     assertEquals(address.getCity(), genericRecord.get("city").toString()).     assertEquals(address.getNum(), genericRecord.get("num")).     assertEquals(address.getState(), genericRecord.get("state").toString()). }
false;public;0;8;;@Test public void testSpecificRecordWithConfluentSchemaRegistry() throws Exception {     DeserializationSchema<Address> deserializer = AvroDeserializationSchema.forSpecific(Address.class).     byte[] encodedAddress = writeRecord(address, Address.getClassSchema()).     Address deserializedAddress = deserializer.deserialize(encodedAddress).     assertEquals(address, deserializedAddress). }
