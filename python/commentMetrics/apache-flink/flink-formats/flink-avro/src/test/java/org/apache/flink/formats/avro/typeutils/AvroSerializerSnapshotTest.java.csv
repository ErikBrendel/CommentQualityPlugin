commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void sameSchemaShouldBeCompatibleAsIs() {     assertThat(AvroSerializerSnapshot.resolveSchemaCompatibility(FIRST_NAME, FIRST_NAME), isCompatibleAsIs()). }
false;public;0;5;;@Test public void removingAnOptionalFieldsIsCompatibleAsIs() {     assertThat(AvroSerializerSnapshot.resolveSchemaCompatibility(FIRST_REQUIRED_LAST_OPTIONAL, FIRST_NAME), isCompatibleAfterMigration()). }
false;public;0;5;;@Test public void addingAnOptionalFieldsIsCompatibleAsIs() {     assertThat(AvroSerializerSnapshot.resolveSchemaCompatibility(FIRST_NAME, FIRST_REQUIRED_LAST_OPTIONAL), isCompatibleAfterMigration()). }
false;public;0;5;;@Test public void addingARequiredMakesSerializersIncompatible() {     assertThat(AvroSerializerSnapshot.resolveSchemaCompatibility(FIRST_REQUIRED_LAST_OPTIONAL, BOTH_REQUIRED), isIncompatible()). }
false;public;0;9;;@Test public void anAvroSnapshotIsCompatibleWithItsOriginatingSerializer() {     AvroSerializer<GenericRecord> serializer = new AvroSerializer<>(GenericRecord.class, FIRST_REQUIRED_LAST_OPTIONAL).     TypeSerializerSnapshot<GenericRecord> snapshot = serializer.snapshotConfiguration().     assertThat(snapshot.resolveSchemaCompatibility(serializer), isCompatibleAsIs()). }
false;public;0;9;;@Test public void anAvroSnapshotIsCompatibleAfterARoundTrip() throws IOException {     AvroSerializer<GenericRecord> serializer = new AvroSerializer<>(GenericRecord.class, FIRST_REQUIRED_LAST_OPTIONAL).     AvroSerializerSnapshot<GenericRecord> restored = roundTrip(serializer.snapshotConfiguration()).     assertThat(restored.resolveSchemaCompatibility(serializer), isCompatibleAsIs()). }
false;public;0;9;;@Test public void anAvroSpecificRecordIsCompatibleAfterARoundTrip() throws IOException {     // user is an avro generated test object.     AvroSerializer<User> serializer = new AvroSerializer<>(User.class).     AvroSerializerSnapshot<User> restored = roundTrip(serializer.snapshotConfiguration()).     assertThat(restored.resolveSchemaCompatibility(serializer), isCompatibleAsIs()). }
false;public;0;8;;@Test public void aPojoIsCompatibleAfterARoundTrip() throws IOException {     AvroSerializer<Pojo> serializer = new AvroSerializer<>(Pojo.class).     AvroSerializerSnapshot<Pojo> restored = roundTrip(serializer.snapshotConfiguration()).     assertThat(restored.resolveSchemaCompatibility(serializer), isCompatibleAsIs()). }
false;public;0;20;;@Test public void recordSerializedShouldBeDeserializeWithTheResortedSerializer() throws IOException {     // user is an avro generated test object.     final User user = TestDataGenerator.generateRandomUser(new Random()).     final AvroSerializer<User> originalSerializer = new AvroSerializer<>(User.class).     //      // first serialize the record     //      ByteBuffer serializedUser = serialize(originalSerializer, user).     //      // then restore a serializer from the snapshot     //      TypeSerializer<User> restoredSerializer = originalSerializer.snapshotConfiguration().restoreSerializer().     //      // now deserialize the user with the resorted serializer.     //      User restoredUser = deserialize(restoredSerializer, serializedUser).     assertThat(user, is(restoredUser)). }
false;public;0;9;;@Test public void validSchemaEvaluationShouldResultInCRequiresMigration() {     final AvroSerializer<GenericRecord> originalSerializer = new AvroSerializer<>(GenericRecord.class, FIRST_NAME).     final AvroSerializer<GenericRecord> newSerializer = new AvroSerializer<>(GenericRecord.class, FIRST_REQUIRED_LAST_OPTIONAL).     TypeSerializerSnapshot<GenericRecord> originalSnapshot = originalSerializer.snapshotConfiguration().     assertThat(originalSnapshot.resolveSchemaCompatibility(newSerializer), isCompatibleAfterMigration()). }
false;public;0;9;;@Test public void nonValidSchemaEvaluationShouldResultInCompatibleSerializers() {     final AvroSerializer<GenericRecord> originalSerializer = new AvroSerializer<>(GenericRecord.class, FIRST_REQUIRED_LAST_OPTIONAL).     final AvroSerializer<GenericRecord> newSerializer = new AvroSerializer<>(GenericRecord.class, BOTH_REQUIRED).     TypeSerializerSnapshot<GenericRecord> originalSnapshot = originalSerializer.snapshotConfiguration().     assertThat(originalSnapshot.resolveSchemaCompatibility(newSerializer), isIncompatible()). }
false;public;0;13;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void changingFromGenericToSpecificWithCompatibleSchemaShouldResultInCompatibleSerializers() {     // starting with a generic serializer     AvroSerializer<Object> generic = new AvroSerializer(GenericRecord.class, User.SCHEMA$).     TypeSerializerSnapshot<Object> genericSnapshot = generic.snapshotConfiguration().     // then upgrading to a specific serializer     AvroSerializer<Object> specificSerializer = new AvroSerializer(User.class).     specificSerializer.snapshotConfiguration().     assertThat(genericSnapshot.resolveSchemaCompatibility(specificSerializer), isCompatibleAsIs()). }
true;private,static;1;14;/**  * Serialize an (avro)TypeSerializerSnapshot and deserialize it.  */ ;// --------------------------------------------------------------------------------------------------------------- // Utils // --------------------------------------------------------------------------------------------------------------- /**  * Serialize an (avro)TypeSerializerSnapshot and deserialize it.  */ private static <T> AvroSerializerSnapshot<T> roundTrip(TypeSerializerSnapshot<T> original) throws IOException {     // writeSnapshot().     DataOutputSerializer out = new DataOutputSerializer(1024).     original.writeSnapshot(out).     // init     AvroSerializerSnapshot<T> restored = new AvroSerializerSnapshot<>().     // readSnapshot().     DataInputView in = new DataInputDeserializer(out.wrapAsByteBuffer()).     restored.readSnapshot(restored.getCurrentVersion(), in, original.getClass().getClassLoader()).     return restored. }
false;private,static;2;5;;private static <T> ByteBuffer serialize(TypeSerializer<T> serializer, T record) throws IOException {     DataOutputSerializer out = new DataOutputSerializer(1024).     serializer.serialize(record, out).     return out.wrapAsByteBuffer(). }
false;private,static;2;4;;private static <T> T deserialize(TypeSerializer<T> serializer, ByteBuffer serializedRecord) throws IOException {     DataInputView in = new DataInputDeserializer(serializedRecord).     return serializer.deserialize(in). }
false;public;0;3;;public String getFoo() {     return foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
