commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSetCodec() {     // given     final AvroOutputFormat<User> outputFormat = new AvroOutputFormat<>(User.class).     // when     try {         outputFormat.setCodec(AvroOutputFormat.Codec.SNAPPY).     } catch (Exception ex) {         // then         fail("unexpected exception").     } }
false;public;0;16;;@Test public void testSetCodecError() {     // given     boolean error = false.     final AvroOutputFormat<User> outputFormat = new AvroOutputFormat<>(User.class).     // when     try {         outputFormat.setCodec(null).     } catch (Exception ex) {         error = true.     }     // then     assertTrue(error). }
false;public;0;10;;@Test public void testSerialization() throws Exception {     serializeAndDeserialize(null, null).     serializeAndDeserialize(null, User.SCHEMA$).     for (final AvroOutputFormat.Codec codec : AvroOutputFormat.Codec.values()) {         serializeAndDeserialize(codec, null).         serializeAndDeserialize(codec, User.SCHEMA$).     } }
false;private;2;29;;private void serializeAndDeserialize(final AvroOutputFormat.Codec codec, final Schema schema) throws IOException, ClassNotFoundException {     // given     final AvroOutputFormat<User> outputFormat = new AvroOutputFormat<>(User.class).     if (codec != null) {         outputFormat.setCodec(codec).     }     if (schema != null) {         outputFormat.setSchema(schema).     }     final ByteArrayOutputStream bos = new ByteArrayOutputStream().     // when     try (final ObjectOutputStream oos = new ObjectOutputStream(bos)) {         oos.writeObject(outputFormat).     }     try (final ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()))) {         // then         Object o = ois.readObject().         assertTrue(o instanceof AvroOutputFormat).         @SuppressWarnings("unchecked")         final AvroOutputFormat<User> restored = (AvroOutputFormat<User>) o.         final AvroOutputFormat.Codec restoredCodec = (AvroOutputFormat.Codec) Whitebox.getInternalState(restored, "codec").         final Schema restoredSchema = (Schema) Whitebox.getInternalState(restored, "userDefinedSchema").         assertTrue(codec != null ? restoredCodec == codec : restoredCodec == null).         assertTrue(schema != null ? restoredSchema.equals(schema) : restoredSchema == null).     } }
false;public;0;24;;@Test public void testCompression() throws Exception {     // given     final Path outputPath = new Path(File.createTempFile("avro-output-file", "avro").getAbsolutePath()).     final AvroOutputFormat<User> outputFormat = new AvroOutputFormat<>(outputPath, User.class).     outputFormat.setWriteMode(FileSystem.WriteMode.OVERWRITE).     final Path compressedOutputPath = new Path(File.createTempFile("avro-output-file", "compressed.avro").getAbsolutePath()).     final AvroOutputFormat<User> compressedOutputFormat = new AvroOutputFormat<>(compressedOutputPath, User.class).     compressedOutputFormat.setWriteMode(FileSystem.WriteMode.OVERWRITE).     compressedOutputFormat.setCodec(AvroOutputFormat.Codec.SNAPPY).     // when     output(outputFormat).     output(compressedOutputFormat).     // then     assertTrue(fileSize(outputPath) > fileSize(compressedOutputPath)).     // cleanup     FileSystem fs = FileSystem.getLocalFileSystem().     fs.delete(outputPath, false).     fs.delete(compressedOutputPath, false). }
false;private;1;3;;private long fileSize(Path path) throws IOException {     return path.getFileSystem().getFileStatus(path).getLen(). }
false;private;1;28;;private void output(final AvroOutputFormat<User> outputFormat) throws IOException {     outputFormat.configure(new Configuration()).     outputFormat.open(1, 1).     for (int i = 0. i < 100. i++) {         User user = new User().         user.setName("testUser").         user.setFavoriteNumber(1).         user.setFavoriteColor("blue").         user.setTypeBoolTest(true).         user.setTypeArrayString(Collections.emptyList()).         user.setTypeArrayBoolean(Collections.emptyList()).         user.setTypeEnum(Colors.BLUE).         user.setTypeMap(Collections.emptyMap()).         user.setTypeBytes(ByteBuffer.allocate(10)).         user.setTypeDate(LocalDate.parse("2014-03-01")).         user.setTypeTimeMillis(LocalTime.parse("12:12:12")).         user.setTypeTimeMicros(123456).         user.setTypeTimestampMillis(DateTime.parse("2014-03-01T12:12:12.321Z")).         user.setTypeTimestampMicros(123456L).         // 20.00         user.setTypeDecimalBytes(ByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray())).         // 20.00         user.setTypeDecimalFixed(new Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray())).         outputFormat.writeRecord(user).     }     outputFormat.close(). }
false;public;0;23;;@Test public void testGenericRecord() throws IOException {     final Path outputPath = new Path(File.createTempFile("avro-output-file", "generic.avro").getAbsolutePath()).     final AvroOutputFormat<GenericRecord> outputFormat = new AvroOutputFormat<>(outputPath, GenericRecord.class).     Schema schema = new Schema.Parser().parse("{\"type\":\"record\", \"name\":\"user\", \"fields\": [{\"name\":\"user_name\", \"type\":\"string\"}, {\"name\":\"favorite_number\", \"type\":\"int\"}, {\"name\":\"favorite_color\", \"type\":\"string\"}]}").     outputFormat.setWriteMode(FileSystem.WriteMode.OVERWRITE).     outputFormat.setSchema(schema).     output(outputFormat, schema).     GenericDatumReader<GenericRecord> reader = new GenericDatumReader<>(schema).     DataFileReader<GenericRecord> dataFileReader = new DataFileReader<>(new File(outputPath.getPath()), reader).     while (dataFileReader.hasNext()) {         GenericRecord record = dataFileReader.next().         assertEquals(record.get("user_name").toString(), "testUser").         assertEquals(record.get("favorite_number"), 1).         assertEquals(record.get("favorite_color").toString(), "blue").     }     // cleanup     FileSystem fs = FileSystem.getLocalFileSystem().     fs.delete(outputPath, false). }
false;private;2;12;;private void output(final AvroOutputFormat<GenericRecord> outputFormat, Schema schema) throws IOException {     outputFormat.configure(new Configuration()).     outputFormat.open(1, 1).     for (int i = 0. i < 100. i++) {         GenericRecord record = new GenericData.Record(schema).         record.put("user_name", "testUser").         record.put("favorite_number", 1).         record.put("favorite_color", "blue").         outputFormat.writeRecord(record).     }     outputFormat.close(). }
