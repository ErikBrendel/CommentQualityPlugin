commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void go() throws Exception {     serializer.serialize("a value", lockingOut). }
false;public;0;36;;@Test public void testConcurrentUseOfSerializer() throws Exception {     final AvroSerializer<String> serializer = new AvroSerializer<>(String.class).     final BlockerSync sync = new BlockerSync().     final DataOutputView regularOut = new DataOutputSerializer(32).     final DataOutputView lockingOut = new LockingView(sync).     // this thread serializes and gets stuck there     final CheckedThread thread = new CheckedThread("serializer") {          @Override         public void go() throws Exception {             serializer.serialize("a value", lockingOut).         }     }.     thread.start().     sync.awaitBlocker().     // this should fail with an exception     try {         serializer.serialize("value", regularOut).         fail("should have failed with an exception").     } catch (IllegalStateException e) {     // expected     } finally {         // release the thread that serializes         sync.releaseBlocker().     }     // this propagates exceptions from the spawned thread     thread.sync(). }
false;public;1;4;;@Override public void writeInt(int v) throws IOException {     blocker.blockNonInterruptible(). }
