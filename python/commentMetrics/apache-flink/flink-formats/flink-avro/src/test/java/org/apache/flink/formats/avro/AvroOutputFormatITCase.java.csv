commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void preSubmit() throws Exception {     inputPath = createTempFile("user", userData).     outputPath1 = getTempDirPath("avro_output1").     outputPath2 = getTempDirPath("avro_output2"). }
false;protected;0;21;;@Override protected void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple3<String, Integer, String>> input = env.readCsvFile(inputPath).fieldDelimiter("|").types(String.class, Integer.class, String.class).     // output the data with AvroOutputFormat for specific user type     DataSet<User> specificUser = input.map(new ConvertToUser()).     AvroOutputFormat<User> avroOutputFormat = new AvroOutputFormat<>(User.class).     // FLINK-4771: use a codec     avroOutputFormat.setCodec(Codec.SNAPPY).     // FLINK-3304: Ensure the OF is properly serializing the schema     avroOutputFormat.setSchema(User.SCHEMA$).     specificUser.write(avroOutputFormat, outputPath1).     // output the data with AvroOutputFormat for reflect user type     DataSet<ReflectiveUser> reflectiveUser = specificUser.map(new ConvertToReflective()).     reflectiveUser.write(new AvroOutputFormat<>(ReflectiveUser.class), outputPath2).     env.execute(). }
false;protected;0;50;;@Override protected void postSubmit() throws Exception {     // compare result for specific user type     File[] output1.     File file1 = asFile(outputPath1).     if (file1.isDirectory()) {         output1 = file1.listFiles().         // check for avro ext in dir.         for (File avroOutput : Objects.requireNonNull(output1)) {             Assert.assertTrue("Expect extension '.avro'", avroOutput.toString().endsWith(".avro")).         }     } else {         output1 = new File[] { file1 }.     }     List<String> result1 = new ArrayList<>().     DatumReader<User> userDatumReader1 = new SpecificDatumReader<>(User.class).     for (File avroOutput : output1) {         DataFileReader<User> dataFileReader1 = new DataFileReader<>(avroOutput, userDatumReader1).         while (dataFileReader1.hasNext()) {             User user = dataFileReader1.next().             result1.add(user.getName() + "|" + user.getFavoriteNumber() + "|" + user.getFavoriteColor()).         }     }     for (String expectedResult : userData.split("\n")) {         Assert.assertTrue("expected user " + expectedResult + " not found.", result1.contains(expectedResult)).     }     // compare result for reflect user type     File[] output2.     File file2 = asFile(outputPath2).     if (file2.isDirectory()) {         output2 = file2.listFiles().     } else {         output2 = new File[] { file2 }.     }     List<String> result2 = new ArrayList<>().     DatumReader<ReflectiveUser> userDatumReader2 = new ReflectDatumReader<>(ReflectiveUser.class).     for (File avroOutput : Objects.requireNonNull(output2)) {         DataFileReader<ReflectiveUser> dataFileReader2 = new DataFileReader<>(avroOutput, userDatumReader2).         while (dataFileReader2.hasNext()) {             ReflectiveUser user = dataFileReader2.next().             result2.add(user.getName() + "|" + user.getFavoriteNumber() + "|" + user.getFavoriteColor()).         }     }     for (String expectedResult : userData.split("\n")) {         Assert.assertTrue("expected user " + expectedResult + " not found.", result2.contains(expectedResult)).     } }
false;public;1;23;;@Override public User map(Tuple3<String, Integer, String> value) {     User user = new User().     user.setName(value.f0).     user.setFavoriteNumber(value.f1).     user.setFavoriteColor(value.f2).     user.setTypeBoolTest(true).     user.setTypeArrayString(Collections.emptyList()).     user.setTypeArrayBoolean(Collections.emptyList()).     user.setTypeEnum(Colors.BLUE).     user.setTypeMap(Collections.emptyMap()).     user.setTypeBytes(ByteBuffer.allocate(10)).     user.setTypeDate(LocalDate.parse("2014-03-01")).     user.setTypeTimeMillis(LocalTime.parse("12:12:12")).     user.setTypeTimeMicros(123456).     user.setTypeTimestampMillis(DateTime.parse("2014-03-01T12:12:12.321Z")).     user.setTypeTimestampMicros(123456L).     // 20.00     user.setTypeDecimalBytes(ByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray())).     // 20.00     user.setTypeDecimalFixed(new Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray())).     return user. }
false;public;1;4;;@Override public ReflectiveUser map(User value) {     return new ReflectiveUser(value.getName().toString(), value.getFavoriteNumber(), value.getFavoriteColor().toString()). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public String getFavoriteColor() {     return this.favoriteColor. }
false;public;0;3;;public int getFavoriteNumber() {     return this.favoriteNumber. }
