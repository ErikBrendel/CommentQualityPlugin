# id;timestamp;commentText;codeText;commentWords;codeWords
AvroRowDeserializationSchema -> private static Object convertToRow(Schema schema, Object recordObj);1509723634;Converts a (nested) Avro {@link SpecificRecord} into Flink's Row type._Avro's {@link Utf8} fields are converted into regular Java strings.;private static Object convertToRow(Schema schema, Object recordObj) {_		if (recordObj instanceof GenericRecord) {_			_			if (schema.getType() == Schema.Type.UNION) {_				final List<Schema> types = schema.getTypes()__				if (types.size() == 2 && types.get(0).getType() == Schema.Type.NULL && types.get(1).getType() == Schema.Type.RECORD) {_					schema = types.get(1)__				}_				else {_					throw new RuntimeException("Currently we only support schemas of the following form: UNION[null, RECORD]. Given: " + schema)__				}_			} else if (schema.getType() != Schema.Type.RECORD) {_				throw new RuntimeException("Record type for row type expected. But is: " + schema)__			}_			final List<Schema.Field> fields = schema.getFields()__			final Row row = new Row(fields.size())__			final GenericRecord record = (GenericRecord) recordObj__			for (int i = 0_ i < fields.size()_ i++) {_				final Schema.Field field = fields.get(i)__				row.setField(i, convertToRow(field.schema(), record.get(field.pos())))__			}_			return row__		} else if (recordObj instanceof Utf8) {_			return recordObj.toString()__		} else {_			return recordObj__		}_	};converts,a,nested,avro,link,specific,record,into,flink,s,row,type,avro,s,link,utf8,fields,are,converted,into,regular,java,strings;private,static,object,convert,to,row,schema,schema,object,record,obj,if,record,obj,instanceof,generic,record,if,schema,get,type,schema,type,union,final,list,schema,types,schema,get,types,if,types,size,2,types,get,0,get,type,schema,type,null,types,get,1,get,type,schema,type,record,schema,types,get,1,else,throw,new,runtime,exception,currently,we,only,support,schemas,of,the,following,form,union,null,record,given,schema,else,if,schema,get,type,schema,type,record,throw,new,runtime,exception,record,type,for,row,type,expected,but,is,schema,final,list,schema,field,fields,schema,get,fields,final,row,row,new,row,fields,size,final,generic,record,record,generic,record,record,obj,for,int,i,0,i,fields,size,i,final,schema,field,field,fields,get,i,row,set,field,i,convert,to,row,field,schema,record,get,field,pos,return,row,else,if,record,obj,instanceof,utf8,return,record,obj,to,string,else,return,record,obj
AvroRowDeserializationSchema -> private static Object convertToRow(Schema schema, Object recordObj);1527085902;Converts a (nested) Avro {@link SpecificRecord} into Flink's Row type._Avro's {@link Utf8} fields are converted into regular Java strings.;private static Object convertToRow(Schema schema, Object recordObj) {_		if (recordObj instanceof GenericRecord) {_			_			if (schema.getType() == Schema.Type.UNION) {_				final List<Schema> types = schema.getTypes()__				if (types.size() == 2 && types.get(0).getType() == Schema.Type.NULL && types.get(1).getType() == Schema.Type.RECORD) {_					schema = types.get(1)__				}_				else {_					throw new RuntimeException("Currently we only support schemas of the following form: UNION[null, RECORD]. Given: " + schema)__				}_			} else if (schema.getType() != Schema.Type.RECORD) {_				throw new RuntimeException("Record type for row type expected. But is: " + schema)__			}_			final List<Schema.Field> fields = schema.getFields()__			final Row row = new Row(fields.size())__			final GenericRecord record = (GenericRecord) recordObj__			for (int i = 0_ i < fields.size()_ i++) {_				final Schema.Field field = fields.get(i)__				row.setField(i, convertToRow(field.schema(), record.get(field.pos())))__			}_			return row__		} else if (recordObj instanceof Utf8) {_			return recordObj.toString()__		} else {_			return recordObj__		}_	};converts,a,nested,avro,link,specific,record,into,flink,s,row,type,avro,s,link,utf8,fields,are,converted,into,regular,java,strings;private,static,object,convert,to,row,schema,schema,object,record,obj,if,record,obj,instanceof,generic,record,if,schema,get,type,schema,type,union,final,list,schema,types,schema,get,types,if,types,size,2,types,get,0,get,type,schema,type,null,types,get,1,get,type,schema,type,record,schema,types,get,1,else,throw,new,runtime,exception,currently,we,only,support,schemas,of,the,following,form,union,null,record,given,schema,else,if,schema,get,type,schema,type,record,throw,new,runtime,exception,record,type,for,row,type,expected,but,is,schema,final,list,schema,field,fields,schema,get,fields,final,row,row,new,row,fields,size,final,generic,record,record,generic,record,record,obj,for,int,i,0,i,fields,size,i,final,schema,field,field,fields,get,i,row,set,field,i,convert,to,row,field,schema,record,get,field,pos,return,row,else,if,record,obj,instanceof,utf8,return,record,obj,to,string,else,return,record,obj
AvroRowDeserializationSchema -> private static Object convertToRow(Schema schema, Object recordObj);1527231728;Converts a (nested) Avro {@link SpecificRecord} into Flink's Row type._Avro's {@link Utf8} fields are converted into regular Java strings.;private static Object convertToRow(Schema schema, Object recordObj) {_		if (recordObj instanceof GenericRecord) {_			_			if (schema.getType() == Schema.Type.UNION) {_				final List<Schema> types = schema.getTypes()__				if (types.size() == 2 && types.get(0).getType() == Schema.Type.NULL && types.get(1).getType() == Schema.Type.RECORD) {_					schema = types.get(1)__				}_				else {_					throw new RuntimeException("Currently we only support schemas of the following form: UNION[null, RECORD]. Given: " + schema)__				}_			} else if (schema.getType() != Schema.Type.RECORD) {_				throw new RuntimeException("Record type for row type expected. But is: " + schema)__			}_			final List<Schema.Field> fields = schema.getFields()__			final Row row = new Row(fields.size())__			final GenericRecord record = (GenericRecord) recordObj__			for (int i = 0_ i < fields.size()_ i++) {_				final Schema.Field field = fields.get(i)__				row.setField(i, convertToRow(field.schema(), record.get(field.pos())))__			}_			return row__		} else if (recordObj instanceof Utf8) {_			return recordObj.toString()__		} else {_			return recordObj__		}_	};converts,a,nested,avro,link,specific,record,into,flink,s,row,type,avro,s,link,utf8,fields,are,converted,into,regular,java,strings;private,static,object,convert,to,row,schema,schema,object,record,obj,if,record,obj,instanceof,generic,record,if,schema,get,type,schema,type,union,final,list,schema,types,schema,get,types,if,types,size,2,types,get,0,get,type,schema,type,null,types,get,1,get,type,schema,type,record,schema,types,get,1,else,throw,new,runtime,exception,currently,we,only,support,schemas,of,the,following,form,union,null,record,given,schema,else,if,schema,get,type,schema,type,record,throw,new,runtime,exception,record,type,for,row,type,expected,but,is,schema,final,list,schema,field,fields,schema,get,fields,final,row,row,new,row,fields,size,final,generic,record,record,generic,record,record,obj,for,int,i,0,i,fields,size,i,final,schema,field,field,fields,get,i,row,set,field,i,convert,to,row,field,schema,record,get,field,pos,return,row,else,if,record,obj,instanceof,utf8,return,record,obj,to,string,else,return,record,obj
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz);1509723634;Creates a Avro deserialization schema for the given record.__@param recordClazz Avro record class used to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz) {_		Preconditions.checkNotNull(recordClazz, "Avro record class must not be null.")__		this.recordClazz = recordClazz__		this.schema = SpecificData.get().getSchema(recordClazz)__		this.datumReader = new SpecificDatumReader<>(schema)__		this.record = (SpecificRecord) SpecificData.newInstance(recordClazz, schema)__		this.inputStream = new MutableByteArrayInputStream()__		this.decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,record,param,record,clazz,avro,record,class,used,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,class,extends,specific,record,record,clazz,preconditions,check,not,null,record,clazz,avro,record,class,must,not,be,null,this,record,clazz,record,clazz,this,schema,specific,data,get,get,schema,record,clazz,this,datum,reader,new,specific,datum,reader,schema,this,record,specific,record,specific,data,new,instance,record,clazz,schema,this,input,stream,new,mutable,byte,array,input,stream,this,decoder,decoder,factory,get,binary,decoder,input,stream,null
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz);1527085902;Creates a Avro deserialization schema for the given record.__@param recordClazz Avro record class used to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz) {_		Preconditions.checkNotNull(recordClazz, "Avro record class must not be null.")__		this.recordClazz = recordClazz__		this.schema = SpecificData.get().getSchema(recordClazz)__		this.datumReader = new SpecificDatumReader<>(schema)__		this.record = (SpecificRecord) SpecificData.newInstance(recordClazz, schema)__		this.inputStream = new MutableByteArrayInputStream()__		this.decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,record,param,record,clazz,avro,record,class,used,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,class,extends,specific,record,record,clazz,preconditions,check,not,null,record,clazz,avro,record,class,must,not,be,null,this,record,clazz,record,clazz,this,schema,specific,data,get,get,schema,record,clazz,this,datum,reader,new,specific,datum,reader,schema,this,record,specific,record,specific,data,new,instance,record,clazz,schema,this,input,stream,new,mutable,byte,array,input,stream,this,decoder,decoder,factory,get,binary,decoder,input,stream,null
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz);1530625244;Creates a Avro deserialization schema for the given specific record class. Having the_concrete Avro record class might improve performance.__@param recordClazz Avro record class used to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz) {_		Preconditions.checkNotNull(recordClazz, "Avro record class must not be null.")__		this.recordClazz = recordClazz__		schema = SpecificData.get().getSchema(recordClazz)__		typeInfo = (RowTypeInfo) AvroSchemaConverter.convertToTypeInfo(recordClazz)__		schemaString = schema.toString()__		record = (IndexedRecord) SpecificData.newInstance(recordClazz, schema)__		datumReader = new SpecificDatumReader<>(schema)__		inputStream = new MutableByteArrayInputStream()__		decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,specific,record,class,having,the,concrete,avro,record,class,might,improve,performance,param,record,clazz,avro,record,class,used,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,class,extends,specific,record,record,clazz,preconditions,check,not,null,record,clazz,avro,record,class,must,not,be,null,this,record,clazz,record,clazz,schema,specific,data,get,get,schema,record,clazz,type,info,row,type,info,avro,schema,converter,convert,to,type,info,record,clazz,schema,string,schema,to,string,record,indexed,record,specific,data,new,instance,record,clazz,schema,datum,reader,new,specific,datum,reader,schema,input,stream,new,mutable,byte,array,input,stream,decoder,decoder,factory,get,binary,decoder,input,stream,null
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz);1531641088;Creates a Avro deserialization schema for the given specific record class. Having the_concrete Avro record class might improve performance.__@param recordClazz Avro record class used to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(Class<? extends SpecificRecord> recordClazz) {_		Preconditions.checkNotNull(recordClazz, "Avro record class must not be null.")__		this.recordClazz = recordClazz__		schema = SpecificData.get().getSchema(recordClazz)__		typeInfo = (RowTypeInfo) AvroSchemaConverter.convertToTypeInfo(recordClazz)__		schemaString = schema.toString()__		record = (IndexedRecord) SpecificData.newInstance(recordClazz, schema)__		datumReader = new SpecificDatumReader<>(schema)__		inputStream = new MutableByteArrayInputStream()__		decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,specific,record,class,having,the,concrete,avro,record,class,might,improve,performance,param,record,clazz,avro,record,class,used,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,class,extends,specific,record,record,clazz,preconditions,check,not,null,record,clazz,avro,record,class,must,not,be,null,this,record,clazz,record,clazz,schema,specific,data,get,get,schema,record,clazz,type,info,row,type,info,avro,schema,converter,convert,to,type,info,record,clazz,schema,string,schema,to,string,record,indexed,record,specific,data,new,instance,record,clazz,schema,datum,reader,new,specific,datum,reader,schema,input,stream,new,mutable,byte,array,input,stream,decoder,decoder,factory,get,binary,decoder,input,stream,null
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(String avroSchemaString);1530625244;Creates a Avro deserialization schema for the given Avro schema string.__@param avroSchemaString Avro schema string to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(String avroSchemaString) {_		Preconditions.checkNotNull(avroSchemaString, "Avro schema must not be null.")__		recordClazz = null__		final TypeInformation<?> typeInfo = AvroSchemaConverter.convertToTypeInfo(avroSchemaString)__		Preconditions.checkArgument(typeInfo instanceof RowTypeInfo, "Row type information expected.")__		this.typeInfo = (RowTypeInfo) typeInfo__		schemaString = avroSchemaString__		schema = new Schema.Parser().parse(avroSchemaString)__		record = new GenericData.Record(schema)__		datumReader = new GenericDatumReader<>(schema)__		inputStream = new MutableByteArrayInputStream()__		decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,avro,schema,string,param,avro,schema,string,avro,schema,string,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,string,avro,schema,string,preconditions,check,not,null,avro,schema,string,avro,schema,must,not,be,null,record,clazz,null,final,type,information,type,info,avro,schema,converter,convert,to,type,info,avro,schema,string,preconditions,check,argument,type,info,instanceof,row,type,info,row,type,information,expected,this,type,info,row,type,info,type,info,schema,string,avro,schema,string,schema,new,schema,parser,parse,avro,schema,string,record,new,generic,data,record,schema,datum,reader,new,generic,datum,reader,schema,input,stream,new,mutable,byte,array,input,stream,decoder,decoder,factory,get,binary,decoder,input,stream,null
AvroRowDeserializationSchema -> public AvroRowDeserializationSchema(String avroSchemaString);1531641088;Creates a Avro deserialization schema for the given Avro schema string.__@param avroSchemaString Avro schema string to deserialize Avro's record to Flink's row;public AvroRowDeserializationSchema(String avroSchemaString) {_		Preconditions.checkNotNull(avroSchemaString, "Avro schema must not be null.")__		recordClazz = null__		final TypeInformation<?> typeInfo = AvroSchemaConverter.convertToTypeInfo(avroSchemaString)__		Preconditions.checkArgument(typeInfo instanceof RowTypeInfo, "Row type information expected.")__		this.typeInfo = (RowTypeInfo) typeInfo__		schemaString = avroSchemaString__		schema = new Schema.Parser().parse(avroSchemaString)__		record = new GenericData.Record(schema)__		datumReader = new GenericDatumReader<>(schema)__		inputStream = new MutableByteArrayInputStream()__		decoder = DecoderFactory.get().binaryDecoder(inputStream, null)__	};creates,a,avro,deserialization,schema,for,the,given,avro,schema,string,param,avro,schema,string,avro,schema,string,to,deserialize,avro,s,record,to,flink,s,row;public,avro,row,deserialization,schema,string,avro,schema,string,preconditions,check,not,null,avro,schema,string,avro,schema,must,not,be,null,record,clazz,null,final,type,information,type,info,avro,schema,converter,convert,to,type,info,avro,schema,string,preconditions,check,argument,type,info,instanceof,row,type,info,row,type,information,expected,this,type,info,row,type,info,type,info,schema,string,avro,schema,string,schema,new,schema,parser,parse,avro,schema,string,record,new,generic,data,record,schema,datum,reader,new,generic,datum,reader,schema,input,stream,new,mutable,byte,array,input,stream,decoder,decoder,factory,get,binary,decoder,input,stream,null
