commented;modifiers;parameterAmount;loc;comment;code
true;static;3;11;/**  * Creates Avro Writer and Reader for a specific type.  *  * <p>Given an input type, and possible the current schema, and a previously known schema (also known as writer  * schema) create will deduce the best way to initalize a reader and writer according to the following rules:  * <ul>  * <li>If type is an Avro generated class (an {@link SpecificRecord} then the reader would use the  * previousSchema for reading (if present) otherwise it would use the schema attached to the auto generated  * class.  * <li>If the type is a GenericRecord then the reader and the writer would be created with the supplied  * (mandatory) schema.  * <li>Otherwise, we use Avro's reflection based reader and writer that would deduce the schema via reflection.  * If the previous schema is also present (when restoring a serializer for example) then the reader would be  * created with both schemas.  * </ul>  */ ;/**  * Creates Avro Writer and Reader for a specific type.  *  * <p>Given an input type, and possible the current schema, and a previously known schema (also known as writer  * schema) create will deduce the best way to initalize a reader and writer according to the following rules:  * <ul>  * <li>If type is an Avro generated class (an {@link SpecificRecord} then the reader would use the  * previousSchema for reading (if present) otherwise it would use the schema attached to the auto generated  * class.  * <li>If the type is a GenericRecord then the reader and the writer would be created with the supplied  * (mandatory) schema.  * <li>Otherwise, we use Avro's reflection based reader and writer that would deduce the schema via reflection.  * If the previous schema is also present (when restoring a serializer for example) then the reader would be  * created with both schemas.  * </ul>  */ static <T> AvroFactory<T> create(Class<T> type, @Nullable Schema currentSchema, @Nullable Schema previousSchema) {     final ClassLoader cl = Thread.currentThread().getContextClassLoader().     if (SpecificRecord.class.isAssignableFrom(type)) {         return fromSpecific(type, cl, Optional.ofNullable(previousSchema)).     }     if (GenericRecord.class.isAssignableFrom(type)) {         return fromGeneric(cl, currentSchema).     }     return fromReflective(type, cl, Optional.ofNullable(previousSchema)). }
false;static;1;4;;@Nullable static Schema parseSchemaString(@Nullable String schemaString) {     return (schemaString == null) ? null : new Schema.Parser().parse(schemaString). }
false;private,static;3;12;;@SuppressWarnings("OptionalUsedAsFieldOrParameterType") private static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {     SpecificData specificData = new SpecificData(cl).     Schema newSchema = specificData.getSchema(type).     return new AvroFactory<>(specificData, newSchema, new SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData), new SpecificDatumWriter<>(newSchema, specificData)). }
false;private,static;2;12;;private static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {     checkNotNull(schema, "Unable to create an AvroSerializer with a GenericRecord type without a schema").     GenericData genericData = new GenericData(cl).     return new AvroFactory<>(genericData, schema, new GenericDatumReader<>(schema, schema, genericData), new GenericDatumWriter<>(schema, genericData)). }
false;private,static;3;12;;@SuppressWarnings("OptionalUsedAsFieldOrParameterType") private static <T> AvroFactory<T> fromReflective(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {     ReflectData reflectData = new ReflectData(cl).     Schema newSchema = reflectData.getSchema(type).     return new AvroFactory<>(reflectData, newSchema, new ReflectDatumReader<>(previousSchema.orElse(newSchema), newSchema, reflectData), new ReflectDatumWriter<>(newSchema, reflectData)). }
false;;0;3;;DataOutputEncoder getEncoder() {     return encoder. }
false;;0;3;;DataInputDecoder getDecoder() {     return decoder. }
false;;0;3;;Schema getSchema() {     return schema. }
false;;0;3;;DatumWriter<T> getWriter() {     return writer. }
false;;0;3;;DatumReader<T> getReader() {     return reader. }
false;;0;3;;GenericData getAvroData() {     return avroData. }
