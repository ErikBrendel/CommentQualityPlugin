commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setOut(DataOutput out) {     this.out = out. }
false;public;0;2;;@Override public void flush() throws IOException { }
false;public;0;2;;// -------------------------------------------------------------------------------------------- // primitives // -------------------------------------------------------------------------------------------- @Override public void writeNull() { }
false;public;1;4;;@Override public void writeBoolean(boolean b) throws IOException {     out.writeBoolean(b). }
false;public;1;4;;@Override public void writeInt(int n) throws IOException {     out.writeInt(n). }
false;public;1;4;;@Override public void writeLong(long n) throws IOException {     out.writeLong(n). }
false;public;1;4;;@Override public void writeFloat(float f) throws IOException {     out.writeFloat(f). }
false;public;1;4;;@Override public void writeDouble(double d) throws IOException {     out.writeDouble(d). }
false;public;1;4;;@Override public void writeEnum(int e) throws IOException {     out.writeInt(e). }
false;public;3;4;;// -------------------------------------------------------------------------------------------- // bytes // -------------------------------------------------------------------------------------------- @Override public void writeFixed(byte[] bytes, int start, int len) throws IOException {     out.write(bytes, start, len). }
false;public;3;7;;@Override public void writeBytes(byte[] bytes, int start, int len) throws IOException {     out.writeInt(len).     if (len > 0) {         out.write(bytes, start, len).     } }
false;public;1;9;;@Override public void writeBytes(ByteBuffer bytes) throws IOException {     int num = bytes.remaining().     out.writeInt(num).     if (num > 0) {         writeFixed(bytes).     } }
false;public;1;5;;// -------------------------------------------------------------------------------------------- // strings // -------------------------------------------------------------------------------------------- @Override public void writeString(String str) throws IOException {     byte[] bytes = Utf8.getBytesFor(str).     writeBytes(bytes, 0, bytes.length). }
false;public;1;5;;@Override public void writeString(Utf8 utf8) throws IOException {     writeBytes(utf8.getBytes(), 0, utf8.getByteLength()). }
false;public;0;2;;// -------------------------------------------------------------------------------------------- // collection types // -------------------------------------------------------------------------------------------- @Override public void writeArrayStart() { }
false;public;1;6;;@Override public void setItemCount(long itemCount) throws IOException {     if (itemCount > 0) {         writeVarLongCount(out, itemCount).     } }
false;public;0;2;;@Override public void startItem() { }
false;public;0;5;;@Override public void writeArrayEnd() throws IOException {     // write a single byte 0, shortcut for a var-length long of 0     out.write(0). }
false;public;0;2;;@Override public void writeMapStart() { }
false;public;0;5;;@Override public void writeMapEnd() throws IOException {     // write a single byte 0, shortcut for a var-length long of 0     out.write(0). }
false;public;1;4;;// -------------------------------------------------------------------------------------------- // union // -------------------------------------------------------------------------------------------- @Override public void writeIndex(int unionIndex) throws IOException {     out.writeInt(unionIndex). }
false;public,static;2;11;;// -------------------------------------------------------------------------------------------- // utils // -------------------------------------------------------------------------------------------- public static void writeVarLongCount(DataOutput out, long val) throws IOException {     if (val < 0) {         throw new IOException("Illegal count (must be non-negative): " + val).     }     while ((val & ~0x7FL) != 0) {         out.write(((int) val) | 0x80).         val >>>= 7.     }     out.write((int) val). }
