commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates {@link AvroDeserializationSchema} that produces {@link GenericRecord} using provided schema.  *  * @param schema schema of produced records  * @return deserialized record in form of {@link GenericRecord}  */ ;/**  * Creates {@link AvroDeserializationSchema} that produces {@link GenericRecord} using provided schema.  *  * @param schema schema of produced records  * @return deserialized record in form of {@link GenericRecord}  */ public static AvroDeserializationSchema<GenericRecord> forGeneric(Schema schema) {     return new AvroDeserializationSchema<>(GenericRecord.class, schema). }
true;public,static;1;3;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro schema.  *  * @param tClass class of record to be produced  * @return deserialized record  */ ;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro schema.  *  * @param tClass class of record to be produced  * @return deserialized record  */ public static <T extends SpecificRecord> AvroDeserializationSchema<T> forSpecific(Class<T> tClass) {     return new AvroDeserializationSchema<>(tClass, null). }
false;;0;3;;GenericDatumReader<T> getDatumReader() {     return datumReader. }
false;;0;3;;Schema getReaderSchema() {     return reader. }
false;;0;3;;MutableByteArrayInputStream getInputStream() {     return inputStream. }
false;;0;3;;Decoder getDecoder() {     return decoder. }
false;public;1;12;;@Override public T deserialize(byte[] message) throws IOException {     // read record     checkAvroInitialized().     inputStream.setBuffer(message).     Schema readerSchema = getReaderSchema().     GenericDatumReader<T> datumReader = getDatumReader().     datumReader.setSchema(readerSchema).     return datumReader.read(null, decoder). }
false;;0;19;;void checkAvroInitialized() {     if (datumReader != null) {         return.     }     ClassLoader cl = Thread.currentThread().getContextClassLoader().     if (SpecificRecord.class.isAssignableFrom(recordClazz)) {         SpecificData specificData = new SpecificData(cl).         this.datumReader = new SpecificDatumReader<>(specificData).         this.reader = specificData.getSchema(recordClazz).     } else {         this.reader = new Schema.Parser().parse(schemaString).         GenericData genericData = new GenericData(cl).         this.datumReader = new GenericDatumReader<>(null, this.reader, genericData).     }     this.inputStream = new MutableByteArrayInputStream().     this.decoder = DecoderFactory.get().binaryDecoder(inputStream, null). }
false;public;1;4;;@Override public boolean isEndOfStream(T nextElement) {     return false. }
false;public;0;9;;@Override @SuppressWarnings("unchecked") public TypeInformation<T> getProducedType() {     if (SpecificRecord.class.isAssignableFrom(recordClazz)) {         return new AvroTypeInfo(recordClazz).     } else {         return (TypeInformation<T>) new GenericRecordAvroTypeInfo(this.reader).     } }
