commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setIn(DataInput in) {     this.in = in. }
false;public;0;2;;// -------------------------------------------------------------------------------------------- // primitives // -------------------------------------------------------------------------------------------- @Override public void readNull() { }
false;public;0;4;;@Override public boolean readBoolean() throws IOException {     return in.readBoolean(). }
false;public;0;4;;@Override public int readInt() throws IOException {     return in.readInt(). }
false;public;0;4;;@Override public long readLong() throws IOException {     return in.readLong(). }
false;public;0;4;;@Override public float readFloat() throws IOException {     return in.readFloat(). }
false;public;0;4;;@Override public double readDouble() throws IOException {     return in.readDouble(). }
false;public;0;4;;@Override public int readEnum() throws IOException {     return readInt(). }
false;public;3;4;;// -------------------------------------------------------------------------------------------- // bytes // -------------------------------------------------------------------------------------------- @Override public void readFixed(byte[] bytes, int start, int length) throws IOException {     in.readFully(bytes, start, length). }
false;public;1;14;;@Override public ByteBuffer readBytes(ByteBuffer old) throws IOException {     int length = readInt().     ByteBuffer result.     if (old != null && length <= old.capacity() && old.hasArray()) {         result = old.         result.clear().     } else {         result = ByteBuffer.allocate(length).     }     in.readFully(result.array(), result.arrayOffset() + result.position(), length).     result.limit(length).     return result. }
false;public;1;4;;@Override public void skipFixed(int length) throws IOException {     skipBytes(length). }
false;public;0;5;;@Override public void skipBytes() throws IOException {     int num = readInt().     skipBytes(num). }
false;public;1;12;;// -------------------------------------------------------------------------------------------- // strings // -------------------------------------------------------------------------------------------- @Override public Utf8 readString(Utf8 old) throws IOException {     int length = readInt().     Utf8 result = (old != null ? old : new Utf8()).     result.setByteLength(length).     if (length > 0) {         in.readFully(result.getBytes(), 0, length).     }     return result. }
false;public;0;4;;@Override public String readString() throws IOException {     return readString(stringDecoder).toString(). }
false;public;0;5;;@Override public void skipString() throws IOException {     int len = readInt().     skipBytes(len). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // collection types // -------------------------------------------------------------------------------------------- @Override public long readArrayStart() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;@Override public long arrayNext() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;@Override public long skipArray() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;@Override public long readMapStart() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;@Override public long mapNext() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;@Override public long skipMap() throws IOException {     return readVarLongCount(in). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // union // -------------------------------------------------------------------------------------------- @Override public int readIndex() throws IOException {     return readInt(). }
false;private;1;5;;// -------------------------------------------------------------------------------------------- // utils // -------------------------------------------------------------------------------------------- private void skipBytes(int num) throws IOException {     while (num > 0) {         num -= in.skipBytes(num).     } }
false;public,static;1;18;;public static long readVarLongCount(DataInput in) throws IOException {     long value = in.readUnsignedByte().     if ((value & 0x80) == 0) {         return value.     } else {         long curr.         int shift = 7.         value = value & 0x7f.         while (((curr = in.readUnsignedByte()) & 0x80) != 0) {             value |= (curr & 0x7f) << shift.             shift += 7.         }         value |= curr << shift.         return value.     } }
