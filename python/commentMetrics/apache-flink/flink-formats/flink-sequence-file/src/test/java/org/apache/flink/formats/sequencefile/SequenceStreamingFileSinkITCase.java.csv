commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Tuple2<LongWritable, Text> map(Tuple2<Long, String> value) throws Exception {     return new Tuple2<>(new LongWritable(value.f0), new Text(value.f1)). }
false;public;0;31;;@Test public void testWriteSequenceFile() throws Exception {     final File folder = TEMPORARY_FOLDER.newFolder().     final Path testPath = Path.fromLocalFile(folder).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.enableCheckpointing(100).     DataStream<Tuple2<Long, String>> stream = env.addSource(new FiniteTestSource<>(testData), TypeInformation.of(new TypeHint<Tuple2<Long, String>>() {     })).     stream.map(new MapFunction<Tuple2<Long, String>, Tuple2<LongWritable, Text>>() {          @Override         public Tuple2<LongWritable, Text> map(Tuple2<Long, String> value) throws Exception {             return new Tuple2<>(new LongWritable(value.f0), new Text(value.f1)).         }     }).addSink(StreamingFileSink.forBulkFormat(testPath, new SequenceFileWriterFactory<>(configuration, LongWritable.class, Text.class, "BZip2")).build()).     env.execute().     validateResults(folder, testData). }
false;private;1;12;;private List<Tuple2<Long, String>> readSequenceFile(File file) throws IOException {     SequenceFile.Reader reader = new SequenceFile.Reader(configuration, SequenceFile.Reader.file(new org.apache.hadoop.fs.Path(file.toURI()))).     LongWritable key = new LongWritable().     Text val = new Text().     ArrayList<Tuple2<Long, String>> results = new ArrayList<>().     while (reader.next(key, val)) {         results.add(new Tuple2<>(key.get(), val.toString())).     }     reader.close().     return results. }
false;private;2;16;;private void validateResults(File folder, List<Tuple2<Long, String>> expected) throws Exception {     File[] buckets = folder.listFiles().     assertNotNull(buckets).     assertEquals(1, buckets.length).     final File[] partFiles = buckets[0].listFiles().     assertNotNull(partFiles).     assertEquals(2, partFiles.length).     for (File partFile : partFiles) {         assertTrue(partFile.length() > 0).         final List<Tuple2<Long, String>> fileContent = readSequenceFile(partFile).         assertEquals(expected, fileContent).     } }
