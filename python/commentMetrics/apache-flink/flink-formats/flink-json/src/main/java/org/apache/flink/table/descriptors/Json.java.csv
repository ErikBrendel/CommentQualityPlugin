commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets flag whether to fail if a field is missing or not.  *  * @param failOnMissingField If set to true, the operation fails if there is a missing field.  *                           If set to false, a missing field is set to null.  */ ;/**  * Sets flag whether to fail if a field is missing or not.  *  * @param failOnMissingField If set to true, the operation fails if there is a missing field.  *                           If set to false, a missing field is set to null.  */ public Json failOnMissingField(boolean failOnMissingField) {     this.failOnMissingField = failOnMissingField.     return this. }
true;public;1;7;/**  * Sets the JSON schema string with field names and the types according to the JSON schema  * specification [[http://json-schema.org/specification.html]].  *  * <p>The schema might be nested.  *  * @param jsonSchema JSON schema  */ ;/**  * Sets the JSON schema string with field names and the types according to the JSON schema  * specification [[http://json-schema.org/specification.html]].  *  * <p>The schema might be nested.  *  * @param jsonSchema JSON schema  */ public Json jsonSchema(String jsonSchema) {     Preconditions.checkNotNull(jsonSchema).     this.jsonSchema = jsonSchema.     this.schema = null.     this.deriveSchema = null.     return this. }
true;public;1;7;/**  * Sets the schema using type information.  *  * <p>JSON objects are represented as ROW types.  *  * <p>The schema might be nested.  *  * @param schemaType type information that describes the schema  */ ;/**  * Sets the schema using type information.  *  * <p>JSON objects are represented as ROW types.  *  * <p>The schema might be nested.  *  * @param schemaType type information that describes the schema  */ public Json schema(TypeInformation<Row> schemaType) {     Preconditions.checkNotNull(schemaType).     this.schema = TypeStringUtils.writeTypeInfo(schemaType).     this.jsonSchema = null.     this.deriveSchema = null.     return this. }
true;public;0;6;/**  * Derives the format schema from the table's schema described.  *  * <p>This allows for defining schema information only once.  *  * <p>The names, types, and fields' order of the format are determined by the table's  * schema. Time attributes are ignored if their origin is not a field. A "from" definition  * is interpreted as a field renaming in the format.  */ ;/**  * Derives the format schema from the table's schema described.  *  * <p>This allows for defining schema information only once.  *  * <p>The names, types, and fields' order of the format are determined by the table's  * schema. Time attributes are ignored if their origin is not a field. A "from" definition  * is interpreted as a field renaming in the format.  */ public Json deriveSchema() {     this.deriveSchema = true.     this.schema = null.     this.jsonSchema = null.     return this. }
false;protected;0;22;;@Override protected Map<String, String> toFormatProperties() {     final DescriptorProperties properties = new DescriptorProperties().     if (deriveSchema != null) {         properties.putBoolean(FORMAT_DERIVE_SCHEMA, deriveSchema).     }     if (jsonSchema != null) {         properties.putString(FORMAT_JSON_SCHEMA, jsonSchema).     }     if (schema != null) {         properties.putString(FORMAT_SCHEMA, schema).     }     if (failOnMissingField != null) {         properties.putBoolean(FORMAT_FAIL_ON_MISSING_FIELD, failOnMissingField).     }     return properties.asMap(). }
