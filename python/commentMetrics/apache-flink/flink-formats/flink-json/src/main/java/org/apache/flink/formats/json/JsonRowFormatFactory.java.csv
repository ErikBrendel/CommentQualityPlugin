commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected List<String> supportedFormatProperties() {     final List<String> properties = new ArrayList<>().     properties.add(JsonValidator.FORMAT_JSON_SCHEMA).     properties.add(JsonValidator.FORMAT_SCHEMA).     properties.add(JsonValidator.FORMAT_FAIL_ON_MISSING_FIELD).     return properties. }
false;public;1;12;;@Override public DeserializationSchema<Row> createDeserializationSchema(Map<String, String> properties) {     final DescriptorProperties descriptorProperties = getValidatedProperties(properties).     // create and configure     final JsonRowDeserializationSchema schema = new JsonRowDeserializationSchema(createTypeInformation(descriptorProperties)).     descriptorProperties.getOptionalBoolean(JsonValidator.FORMAT_FAIL_ON_MISSING_FIELD).ifPresent(schema::setFailOnMissingField).     return schema. }
false;public;1;7;;@Override public SerializationSchema<Row> createSerializationSchema(Map<String, String> properties) {     final DescriptorProperties descriptorProperties = getValidatedProperties(properties).     // create and configure     return new JsonRowSerializationSchema(createTypeInformation(descriptorProperties)). }
false;private;1;9;;private TypeInformation<Row> createTypeInformation(DescriptorProperties descriptorProperties) {     if (descriptorProperties.containsKey(JsonValidator.FORMAT_SCHEMA)) {         return (RowTypeInfo) descriptorProperties.getType(JsonValidator.FORMAT_SCHEMA).     } else if (descriptorProperties.containsKey(JsonValidator.FORMAT_JSON_SCHEMA)) {         return JsonRowSchemaConverter.convert(descriptorProperties.getString(JsonValidator.FORMAT_JSON_SCHEMA)).     } else {         return deriveSchema(descriptorProperties.asMap()).toRowType().     } }
false;private,static;1;9;;private static DescriptorProperties getValidatedProperties(Map<String, String> propertiesMap) {     final DescriptorProperties descriptorProperties = new DescriptorProperties().     descriptorProperties.putProperties(propertiesMap).     // validate     new JsonValidator().validate(descriptorProperties).     return descriptorProperties. }
