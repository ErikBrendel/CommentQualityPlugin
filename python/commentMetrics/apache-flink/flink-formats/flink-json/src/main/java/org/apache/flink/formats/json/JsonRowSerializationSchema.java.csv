commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public byte[] serialize(Row row) {     if (node == null) {         node = mapper.createObjectNode().     }     try {         convertRow(node, (RowTypeInfo) typeInfo, row).         return mapper.writeValueAsBytes(node).     } catch (Throwable t) {         throw new RuntimeException("Could not serialize row '" + row + "'. " + "Make sure that the schema matches the input.", t).     } }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final JsonRowSerializationSchema that = (JsonRowSerializationSchema) o.     return Objects.equals(typeInfo, that.typeInfo). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(typeInfo). }
false;private;3;22;;// -------------------------------------------------------------------------------------------- private ObjectNode convertRow(ObjectNode reuse, RowTypeInfo info, Row row) {     if (reuse == null) {         reuse = mapper.createObjectNode().     }     final String[] fieldNames = info.getFieldNames().     final TypeInformation<?>[] fieldTypes = info.getFieldTypes().     // validate the row     if (row.getArity() != fieldNames.length) {         throw new IllegalStateException(String.format("Number of elements in the row '%s' is different from number of field names: %d", row, fieldNames.length)).     }     for (int i = 0. i < fieldNames.length. i++) {         final String name = fieldNames[i].         final JsonNode fieldConverted = convert(reuse, reuse.get(name), fieldTypes[i], row.getField(i)).         reuse.set(name, fieldConverted).     }     return reuse. }
false;private;4;60;;private JsonNode convert(ContainerNode<?> container, JsonNode reuse, TypeInformation<?> info, Object object) {     if (info == Types.VOID || object == null) {         return container.nullNode().     } else if (info == Types.BOOLEAN) {         return container.booleanNode((Boolean) object).     } else if (info == Types.STRING) {         return container.textNode((String) object).     } else if (info == Types.BIG_DEC) {         // convert decimal if necessary         if (object instanceof BigDecimal) {             return container.numberNode((BigDecimal) object).         }         return container.numberNode(BigDecimal.valueOf(((Number) object).doubleValue())).     } else if (info == Types.BIG_INT) {         // convert integer if necessary         if (object instanceof BigInteger) {             return container.numberNode((BigInteger) object).         }         return container.numberNode(BigInteger.valueOf(((Number) object).longValue())).     } else if (info == Types.SQL_DATE) {         return container.textNode(object.toString()).     } else if (info == Types.SQL_TIME) {         final Time time = (Time) object.         // strip milliseconds if possible         if (time.getTime() % 1000 > 0) {             return container.textNode(timeFormatWithMillis.format(time)).         }         return container.textNode(timeFormat.format(time)).     } else if (info == Types.SQL_TIMESTAMP) {         return container.textNode(timestampFormat.format((Timestamp) object)).     } else if (info instanceof RowTypeInfo) {         if (reuse != null && reuse instanceof ObjectNode) {             return convertRow((ObjectNode) reuse, (RowTypeInfo) info, (Row) object).         } else {             return convertRow(null, (RowTypeInfo) info, (Row) object).         }     } else if (info instanceof ObjectArrayTypeInfo) {         if (reuse != null && reuse instanceof ArrayNode) {             return convertObjectArray((ArrayNode) reuse, ((ObjectArrayTypeInfo) info).getComponentInfo(), (Object[]) object).         } else {             return convertObjectArray(null, ((ObjectArrayTypeInfo) info).getComponentInfo(), (Object[]) object).         }     } else if (info instanceof BasicArrayTypeInfo) {         if (reuse != null && reuse instanceof ArrayNode) {             return convertObjectArray((ArrayNode) reuse, ((BasicArrayTypeInfo) info).getComponentInfo(), (Object[]) object).         } else {             return convertObjectArray(null, ((BasicArrayTypeInfo) info).getComponentInfo(), (Object[]) object).         }     } else if (info instanceof PrimitiveArrayTypeInfo && ((PrimitiveArrayTypeInfo) info).getComponentType() == Types.BYTE) {         return container.binaryNode((byte[]) object).     } else {         // e.g. POJOs         try {             return mapper.valueToTree(object).         } catch (IllegalArgumentException e) {             throw new IllegalStateException("Unsupported type information '" + info + "' for object: " + object, e).         }     } }
false;private;3;12;;private ArrayNode convertObjectArray(ArrayNode reuse, TypeInformation<?> info, Object[] array) {     if (reuse == null) {         reuse = mapper.createArrayNode().     } else {         reuse.removeAll().     }     for (Object object : array) {         reuse.add(convert(reuse, null, info, object)).     }     return reuse. }
