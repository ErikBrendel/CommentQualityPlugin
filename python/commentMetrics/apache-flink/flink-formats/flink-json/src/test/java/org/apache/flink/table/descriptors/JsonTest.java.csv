commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = ValidationException.class) public void testInvalidMissingField() {     addPropertyAndVerify(descriptors().get(0), "format.fail-on-missing-field", "DDD"). }
false;public;0;4;;@Test(expected = ValidationException.class) public void testMissingSchema() {     removePropertyAndVerify(descriptors().get(0), "format.json-schema"). }
false;public;0;5;;@Test(expected = ValidationException.class) public void testDuplicateSchema() {     // we add an additional non-json schema     addPropertyAndVerify(descriptors().get(0), "format.schema", "DDD"). }
false;public;0;17;;// -------------------------------------------------------------------------------------------- @Override public List<Descriptor> descriptors() {     final Descriptor desc1 = new Json().jsonSchema("test").     final Descriptor desc2 = new Json().jsonSchema(JSON_SCHEMA).failOnMissingField(true).     final Descriptor desc3 = new Json().schema(Types.ROW(new String[] { "test1", "test2" }, new TypeInformation[] { Types.STRING(), Types.SQL_TIMESTAMP() })).failOnMissingField(true).     final Descriptor desc4 = new Json().deriveSchema().     return Arrays.asList(desc1, desc2, desc3, desc4). }
false;public;0;26;;@Override public List<Map<String, String>> properties() {     final Map<String, String> props1 = new HashMap<>().     props1.put("format.type", "json").     props1.put("format.property-version", "1").     props1.put("format.json-schema", "test").     final Map<String, String> props2 = new HashMap<>().     props2.put("format.type", "json").     props2.put("format.property-version", "1").     props2.put("format.json-schema", JSON_SCHEMA).     props2.put("format.fail-on-missing-field", "true").     final Map<String, String> props3 = new HashMap<>().     props3.put("format.type", "json").     props3.put("format.property-version", "1").     props3.put("format.schema", "ROW<test1 VARCHAR, test2 TIMESTAMP>").     props3.put("format.fail-on-missing-field", "true").     final Map<String, String> props4 = new HashMap<>().     props4.put("format.type", "json").     props4.put("format.property-version", "1").     props4.put("format.derive-schema", "true").     return Arrays.asList(props1, props2, props3, props4). }
false;public;0;4;;@Override public DescriptorValidator validator() {     return new JsonValidator(). }
