commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Creates {@link ConfluentRegistryAvroDeserializationSchema} that produces {@link GenericRecord}  * using provided reader schema and looks up writer schema in Confluent Schema Registry.  *  * @param schema schema of produced records  * @param url    url of schema registry to connect  * @return deserialized record in form of {@link GenericRecord}  */ ;/**  * Creates {@link ConfluentRegistryAvroDeserializationSchema} that produces {@link GenericRecord}  * using provided reader schema and looks up writer schema in Confluent Schema Registry.  *  * @param schema schema of produced records  * @param url    url of schema registry to connect  * @return deserialized record in form of {@link GenericRecord}  */ public static ConfluentRegistryAvroDeserializationSchema<GenericRecord> forGeneric(Schema schema, String url) {     return forGeneric(schema, url, DEFAULT_IDENTITY_MAP_CAPACITY). }
true;public,static;3;7;/**  * Creates {@link ConfluentRegistryAvroDeserializationSchema} that produces {@link GenericRecord}  * using provided reader schema and looks up writer schema in Confluent Schema Registry.  *  * @param schema              schema of produced records  * @param url                 url of schema registry to connect  * @param identityMapCapacity maximum number of cached schema versions (default: 1000)  * @return deserialized record in form of {@link GenericRecord}  */ ;/**  * Creates {@link ConfluentRegistryAvroDeserializationSchema} that produces {@link GenericRecord}  * using provided reader schema and looks up writer schema in Confluent Schema Registry.  *  * @param schema              schema of produced records  * @param url                 url of schema registry to connect  * @param identityMapCapacity maximum number of cached schema versions (default: 1000)  * @return deserialized record in form of {@link GenericRecord}  */ public static ConfluentRegistryAvroDeserializationSchema<GenericRecord> forGeneric(Schema schema, String url, int identityMapCapacity) {     return new ConfluentRegistryAvroDeserializationSchema<>(GenericRecord.class, schema, new CachedSchemaCoderProvider(url, identityMapCapacity)). }
true;public,static;2;4;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro  * schema and looks up writer schema in Confluent Schema Registry.  *  * @param tClass class of record to be produced  * @param url    url of schema registry to connect  * @return deserialized record  */ ;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro  * schema and looks up writer schema in Confluent Schema Registry.  *  * @param tClass class of record to be produced  * @param url    url of schema registry to connect  * @return deserialized record  */ public static <T extends SpecificRecord> ConfluentRegistryAvroDeserializationSchema<T> forSpecific(Class<T> tClass, String url) {     return forSpecific(tClass, url, DEFAULT_IDENTITY_MAP_CAPACITY). }
true;public,static;3;8;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro  * schema and looks up writer schema in Confluent Schema Registry.  *  * @param tClass              class of record to be produced  * @param url                 url of schema registry to connect  * @param identityMapCapacity maximum number of cached schema versions (default: 1000)  * @return deserialized record  */ ;/**  * Creates {@link AvroDeserializationSchema} that produces classes that were generated from avro  * schema and looks up writer schema in Confluent Schema Registry.  *  * @param tClass              class of record to be produced  * @param url                 url of schema registry to connect  * @param identityMapCapacity maximum number of cached schema versions (default: 1000)  * @return deserialized record  */ public static <T extends SpecificRecord> ConfluentRegistryAvroDeserializationSchema<T> forSpecific(Class<T> tClass, String url, int identityMapCapacity) {     return new ConfluentRegistryAvroDeserializationSchema<>(tClass, null, new CachedSchemaCoderProvider(url, identityMapCapacity)). }
false;public;0;6;;@Override public SchemaCoder get() {     return new ConfluentSchemaRegistryCoder(new CachedSchemaRegistryClient(url, identityMapCapacity)). }
