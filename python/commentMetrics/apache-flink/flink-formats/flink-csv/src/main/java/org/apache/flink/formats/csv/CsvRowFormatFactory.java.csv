commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public List<String> supportedFormatProperties() {     final List<String> properties = new ArrayList<>().     properties.add(CsvValidator.FORMAT_FIELD_DELIMITER).     properties.add(CsvValidator.FORMAT_LINE_DELIMITER).     properties.add(CsvValidator.FORMAT_QUOTE_CHARACTER).     properties.add(CsvValidator.FORMAT_ALLOW_COMMENTS).     properties.add(CsvValidator.FORMAT_IGNORE_PARSE_ERRORS).     properties.add(CsvValidator.FORMAT_ARRAY_ELEMENT_DELIMITER).     properties.add(CsvValidator.FORMAT_ESCAPE_CHARACTER).     properties.add(CsvValidator.FORMAT_NULL_LITERAL).     properties.add(CsvValidator.FORMAT_SCHEMA).     return properties. }
false;public;1;30;;@Override public DeserializationSchema<Row> createDeserializationSchema(Map<String, String> properties) {     final DescriptorProperties descriptorProperties = getValidatedProperties(properties).     final CsvRowDeserializationSchema.Builder schemaBuilder = new CsvRowDeserializationSchema.Builder(createTypeInformation(descriptorProperties)).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_FIELD_DELIMITER).ifPresent(schemaBuilder::setFieldDelimiter).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_QUOTE_CHARACTER).ifPresent(schemaBuilder::setQuoteCharacter).     descriptorProperties.getOptionalBoolean(CsvValidator.FORMAT_ALLOW_COMMENTS).ifPresent(schemaBuilder::setAllowComments).     descriptorProperties.getOptionalBoolean(CsvValidator.FORMAT_IGNORE_PARSE_ERRORS).ifPresent(schemaBuilder::setIgnoreParseErrors).     descriptorProperties.getOptionalString(CsvValidator.FORMAT_ARRAY_ELEMENT_DELIMITER).ifPresent(schemaBuilder::setArrayElementDelimiter).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_ESCAPE_CHARACTER).ifPresent(schemaBuilder::setEscapeCharacter).     descriptorProperties.getOptionalString(CsvValidator.FORMAT_NULL_LITERAL).ifPresent(schemaBuilder::setNullLiteral).     return schemaBuilder.build(). }
false;public;1;27;;@Override public SerializationSchema<Row> createSerializationSchema(Map<String, String> properties) {     final DescriptorProperties descriptorProperties = getValidatedProperties(properties).     final CsvRowSerializationSchema.Builder schemaBuilder = new CsvRowSerializationSchema.Builder(createTypeInformation(descriptorProperties)).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_FIELD_DELIMITER).ifPresent(schemaBuilder::setFieldDelimiter).     descriptorProperties.getOptionalString(CsvValidator.FORMAT_LINE_DELIMITER).ifPresent(schemaBuilder::setLineDelimiter).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_QUOTE_CHARACTER).ifPresent(schemaBuilder::setQuoteCharacter).     descriptorProperties.getOptionalString(CsvValidator.FORMAT_ARRAY_ELEMENT_DELIMITER).ifPresent(schemaBuilder::setArrayElementDelimiter).     descriptorProperties.getOptionalCharacter(CsvValidator.FORMAT_ESCAPE_CHARACTER).ifPresent(schemaBuilder::setEscapeCharacter).     descriptorProperties.getOptionalString(CsvValidator.FORMAT_NULL_LITERAL).ifPresent(schemaBuilder::setNullLiteral).     return schemaBuilder.build(). }
false;private,static;1;8;;private static DescriptorProperties getValidatedProperties(Map<String, String> propertiesMap) {     final DescriptorProperties descriptorProperties = new DescriptorProperties(true).     descriptorProperties.putProperties(propertiesMap).     new CsvValidator().validate(descriptorProperties).     return descriptorProperties. }
false;private,static;1;7;;private static TypeInformation<Row> createTypeInformation(DescriptorProperties descriptorProperties) {     if (descriptorProperties.containsKey(CsvValidator.FORMAT_SCHEMA)) {         return (RowTypeInfo) descriptorProperties.getType(CsvValidator.FORMAT_SCHEMA).     } else {         return deriveSchema(descriptorProperties.asMap()).toRowType().     } }
