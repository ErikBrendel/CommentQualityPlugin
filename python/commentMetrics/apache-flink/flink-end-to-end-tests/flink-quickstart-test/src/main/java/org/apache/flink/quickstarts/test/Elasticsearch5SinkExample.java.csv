commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String map(Long value) throws Exception {     return "message #" + value. }
false;public;3;4;;@Override public void process(String element, RuntimeContext ctx, RequestIndexer indexer) {     indexer.add(createIndexRequest(element, parameterTool)). }
false;public,static;1;39;;public static void main(String[] args) throws Exception {     final ParameterTool parameterTool = ParameterTool.fromArgs(args).     if (parameterTool.getNumberOfParameters() < 3) {         System.out.println("Missing parameters!\n" + "Usage: --numRecords <numRecords> --index <index> --type <type>").         return.     }     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     env.enableCheckpointing(5000).     DataStream<String> source = env.generateSequence(0, parameterTool.getInt("numRecords") - 1).map(new MapFunction<Long, String>() {          @Override         public String map(Long value) throws Exception {             return "message #" + value.         }     }).     Map<String, String> userConfig = new HashMap<>().     userConfig.put("cluster.name", "elasticsearch").     // This instructs the sink to emit after every element, otherwise they would be buffered     userConfig.put(ElasticsearchSink.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     List<InetSocketAddress> transports = new ArrayList<>().     transports.add(new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 9300)).     source.addSink(new ElasticsearchSink<>(userConfig, transports, new ElasticsearchSinkFunction<String>() {          @Override         public void process(String element, RuntimeContext ctx, RequestIndexer indexer) {             indexer.add(createIndexRequest(element, parameterTool)).         }     })).     env.execute("Elasticsearch5.x end to end sink test example"). }
false;private,static;2;10;;private static IndexRequest createIndexRequest(String element, ParameterTool parameterTool) {     Map<String, Object> json = new HashMap<>().     json.put("data", element).     return Requests.indexRequest().index(parameterTool.getRequired("index")).type(parameterTool.getRequired("type")).id(element).source(json). }
