commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;26;;public static void main(final String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     final String outputPath = params.getRequired("outputPath").     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(4).     env.enableCheckpointing(5000L).     env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, Time.of(10L, TimeUnit.SECONDS))).     final StreamingFileSink<Tuple2<Integer, Integer>> sink = StreamingFileSink.forRowFormat(new Path(outputPath), (Encoder<Tuple2<Integer, Integer>>) (element, stream) -> {         PrintStream out = new PrintStream(stream).         out.println(element.f1).     }).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build().     // generate data, shuffle, sink     env.addSource(new Generator(10, 10, 60)).keyBy(0).addSink(sink).     env.execute("StreamingFileSinkProgram"). }
false;public;2;4;;@Override public String getBucketId(final Tuple2<Integer, Integer> element, final Context context) {     return String.valueOf(element.f0). }
false;public;0;4;;@Override public SimpleVersionedSerializer<String> getSerializer() {     return SimpleVersionedStringSerializer.INSTANCE. }
false;public;1;17;;@Override public void run(final SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {     while (numRecordsEmitted < recordsToEmit) {         synchronized (ctx.getCheckpointLock()) {             for (int i = 0. i < numKeys. i++) {                 ctx.collect(Tuple2.of(i, numRecordsEmitted)).                 numRecordsEmitted++.             }         }         Thread.sleep(idlenessMs).     }     while (!canceled) {         Thread.sleep(50).     } }
false;public;0;4;;@Override public void cancel() {     canceled = true. }
false;public;2;4;;@Override public List<Integer> snapshotState(final long checkpointId, final long timestamp) {     return Collections.singletonList(numRecordsEmitted). }
false;public;1;6;;@Override public void restoreState(final List<Integer> states) {     for (final Integer state : states) {         numRecordsEmitted += state.     } }
