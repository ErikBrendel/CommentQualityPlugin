commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void run(SourceContext<Integer> ctx) throws Exception {     while (!cancel) {         synchronized (ctx.getCheckpointLock()) {             ctx.collect(1).         }         Thread.sleep(100L).     } }
false;public;0;4;;@Override public void cancel() {     cancel = true. }
false;public;1;7;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     this.avroState = getRuntimeContext().getState(AVRO_DESCRIPTOR).     this.tupleState = getRuntimeContext().getState(TUPLE_DESCRIPTOR).     this.eitherState = getRuntimeContext().getState(EITHER_DESCRIPTOR). }
false;public;1;24;;@Override public String map(Integer value) throws Exception {     touchState(tupleState, () -> Tuple2.of("19", 19)).     touchState(eitherState, () -> Either.Left("255")).     final Address newAddress = Address.newBuilder().setCity("New York").setZip("10036").setStreet("555 W 42nd St").setState("NY").setNum(555).build().     Address existingAddress = avroState.value().     if (existingAddress != null) {         if (!Objects.equals(existingAddress.getAppno(), EXPECTED_DEFAULT_VALUE)) {             // this is expected to fail the job, if found in the output files.             System.out.println("Wrong Default Value.").         }     }     avroState.update(newAddress).     return "". }
false;private,static;2;7;;private static <T> void touchState(ValueState<T> state, Supplier<T> elements) throws IOException {     T elem = state.value().     if (elem == null) {         elem = elements.get().     }     state.update(elem). }
false;public,static;1;16;;public static void main(String[] args) throws Exception {     final ParameterTool pt = ParameterTool.fromArgs(args).     final String checkpointDir = pt.getRequired("checkpoint.dir").     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStateBackend(new FsStateBackend(checkpointDir)).     env.setRestartStrategy(RestartStrategies.noRestart()).     env.enableCheckpointing(1000L).     env.getConfig().disableGenericTypes().     env.addSource(new MySource()).uid("my-source").keyBy(anInt -> 0).map(new MyStatefulFunction()).uid("my-map").addSink(new DiscardingSink<>()).uid("my-sink").     env.execute(). }
