commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;61;;public static void main(final String[] args) throws Exception {     ParameterTool parameters = ParameterTool.fromArgs(args).     // setup values     String jobId = parameters.getRequired("job-id").     String host = parameters.get("host", "localhost").     int port = parameters.getInt("port", 9069).     int numIterations = parameters.getInt("iterations", 1500).     QueryableStateClient client = new QueryableStateClient(host, port).     client.setExecutionConfig(new ExecutionConfig()).     MapStateDescriptor<EmailId, EmailInformation> stateDescriptor = new MapStateDescriptor<>(QsConstants.STATE_NAME, TypeInformation.of(new TypeHint<EmailId>() {     }), TypeInformation.of(new TypeHint<EmailInformation>() {     })).     // wait for state to exist     for (int i = 0. i < BOOTSTRAP_RETRIES. i++) {         // ~120s         try {             getMapState(jobId, client, stateDescriptor).             break.         } catch (ExecutionException e) {             if (e.getCause() instanceof UnknownKeyOrNamespaceException) {                 System.err.println("State does not exist yet. sleeping 500ms").                 Thread.sleep(500L).             } else {                 throw e.             }         }         if (i == (BOOTSTRAP_RETRIES - 1)) {             throw new RuntimeException("Timeout: state doesn't exist after 120s").         }     }     // query state     for (int iterations = 0. iterations < numIterations. iterations++) {         MapState<EmailId, EmailInformation> mapState = getMapState(jobId, client, stateDescriptor).         int counter = 0.         for (Map.Entry<EmailId, EmailInformation> entry : mapState.entries()) {             // this is to force deserialization             entry.getKey().             entry.getValue().             counter++.         }         // we look for it in the test         System.out.println("MapState has " + counter + " entries").         Thread.sleep(100L).     } }
false;private,static;3;15;;private static MapState<EmailId, EmailInformation> getMapState(String jobId, QueryableStateClient client, MapStateDescriptor<EmailId, EmailInformation> stateDescriptor) throws InterruptedException, ExecutionException {     CompletableFuture<MapState<EmailId, EmailInformation>> resultFuture = client.getKvState(JobID.fromHexString(jobId), QsConstants.QUERY_NAME, // which key of the keyed state to access     QsConstants.KEY, BasicTypeInfo.STRING_TYPE_INFO, stateDescriptor).     return resultFuture.get(). }
