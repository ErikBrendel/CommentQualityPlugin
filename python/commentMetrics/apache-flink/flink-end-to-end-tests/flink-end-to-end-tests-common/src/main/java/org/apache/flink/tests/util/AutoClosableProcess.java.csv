commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;8;;public static AutoClosableProcess runNonBlocking(String step, String... commands) throws IOException {     LOG.info("Step Started: " + step).     Process process = new ProcessBuilder().command(commands).inheritIO().start().     return new AutoClosableProcess(process). }
false;public,static;2;3;;public static void runBlocking(String step, String... commands) throws IOException {     runBlocking(step, Duration.ofSeconds(30), commands). }
false;public,static;3;17;;public static void runBlocking(String step, Duration timeout, String... commands) throws IOException {     LOG.info("Step started: " + step).     Process process = new ProcessBuilder().command(commands).inheritIO().start().     try (AutoClosableProcess autoProcess = new AutoClosableProcess(process)) {         final boolean success = process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS).         if (!success) {             throw new TimeoutException().         }     } catch (TimeoutException | InterruptedException e) {         throw new RuntimeException(step + " failed due to timeout.").     }     LOG.info("Step complete: " + step). }
false;public;0;11;;@Override public void close() throws IOException {     if (process.isAlive()) {         process.destroy().         try {             process.waitFor(10, TimeUnit.SECONDS).         } catch (InterruptedException e) {             Thread.currentThread().interrupt().         }     } }
