commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void visit(SelectObjectContentEvent.EndEvent event) {     isResultComplete.set(true). }
true;static;4;31;/**  * Run SQL query over non-compressed CSV file saved in s3 object.  */ ;/**  * Run SQL query over non-compressed CSV file saved in s3 object.  */ static String queryFile(AmazonS3 s3client, String bucket, String s3file, @SuppressWarnings("SameParameterValue") String query) {     SelectObjectContentRequest request = generateBaseCSVRequest(bucket, s3file, query).     final AtomicBoolean isResultComplete = new AtomicBoolean(false).     String res.     try (SelectObjectContentResult result = s3client.selectObjectContent(request).         SelectObjectContentEventStream payload = result.getPayload().         ByteArrayOutputStream out = new ByteArrayOutputStream()) {         InputStream resultInputStream = payload.getRecordsInputStream(new SelectObjectContentEventVisitor() {              @Override             public void visit(SelectObjectContentEvent.EndEvent event) {                 isResultComplete.set(true).             }         }).         copy(resultInputStream, out).         res = out.toString().trim().     } catch (Throwable e) {         System.out.println("SQL query failure").         throw new RuntimeException("SQL query failure", e).     }     /* 		 * The End Event indicates all matching records have been transmitted. 		 * If the End Event is not received, the results may be incomplete. 		 */     if (!isResultComplete.get()) {         throw new RuntimeException("S3 Select request was incomplete as End Event was not received.").     }     return res. }
false;private,static;3;18;;private static SelectObjectContentRequest generateBaseCSVRequest(String bucket, String key, String query) {     SelectObjectContentRequest request = new SelectObjectContentRequest().     request.setBucketName(bucket).     request.setKey(key).     request.setExpression(query).     request.setExpressionType(ExpressionType.SQL).     InputSerialization inputSerialization = new InputSerialization().     inputSerialization.setCsv(new CSVInput()).     inputSerialization.setCompressionType(CompressionType.NONE).     request.setInputSerialization(inputSerialization).     OutputSerialization outputSerialization = new OutputSerialization().     outputSerialization.setCsv(new CSVOutput()).     request.setOutputSerialization(outputSerialization).     return request. }
