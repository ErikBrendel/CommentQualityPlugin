commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public void open(Configuration parameters) {     ValueStateDescriptor<List<Tuple2<Event, Integer>>> previousWindowDescriptor = new ValueStateDescriptor<>("eventsSeenSoFar", new ListTypeInfo<>(new TupleTypeInfo<>(TypeInformation.of(Event.class), BasicTypeInfo.INT_TYPE_INFO))).     eventsSeenSoFar = getRuntimeContext().getState(previousWindowDescriptor).     ValueStateDescriptor<Long> lastSequenceNumberDescriptor = new ValueStateDescriptor<>("lastSequenceNumber", BasicTypeInfo.LONG_TYPE_INFO).     lastSequenceNumber = getRuntimeContext().getState(lastSequenceNumberDescriptor). }
false;public;2;18;;@Override public void flatMap(Tuple2<Integer, List<Event>> value, Collector<String> out) throws Exception {     List<Tuple2<Event, Integer>> previousWindowValues = Optional.ofNullable(eventsSeenSoFar.value()).orElseGet(Collections::emptyList).     List<Event> newValues = value.f1.     Optional<Event> lastEventInWindow = verifyWindowContiguity(newValues, out).     Long lastSequenceNumberSeenSoFar = lastSequenceNumber.value().     List<Tuple2<Event, Integer>> newWindows = verifyPreviousOccurences(previousWindowValues, newValues, lastSequenceNumberSeenSoFar, out).     if (lastEventInWindow.isPresent()) {         updateLastSeenSequenceNumber(lastEventInWindow.get(), lastSequenceNumberSeenSoFar, out).     }     eventsSeenSoFar.update(newWindows). }
false;private;3;11;;private void updateLastSeenSequenceNumber(Event lastEventInWindow, Long lastSequenceNumberSeenSoFar, Collector<String> out) throws IOException {     long lastSequenceNumberInWindow = lastEventInWindow.getSequenceNumber().     if (lastSequenceNumberSeenSoFar == null || lastSequenceNumberInWindow > lastSequenceNumberSeenSoFar) {         lastSequenceNumber.update(lastSequenceNumberInWindow).     } else if (lastSequenceNumberInWindow < lastSequenceNumberSeenSoFar) {         failWithSequenceNumberDecreased(lastEventInWindow, lastSequenceNumberSeenSoFar, out).     } }
false;private;3;8;;private void failWithSequenceNumberDecreased(Event lastEventInWindow, Long lastSequenceNumberSeenSoFar, Collector<String> out) {     out.collect(String.format("Last event in current window (%s) has sequence number lower than seen so far (%d)", lastEventInWindow, lastSequenceNumberSeenSoFar)). }
true;private;4;21;/**  * Verifies if all values from previous windows appear in the new one. Returns union of all events seen so far that  * were not seen <b>slideFactor</b> number of times yet.  */ ;/**  * Verifies if all values from previous windows appear in the new one. Returns union of all events seen so far that  * were not seen <b>slideFactor</b> number of times yet.  */ private List<Tuple2<Event, Integer>> verifyPreviousOccurences(List<Tuple2<Event, Integer>> previousWindowValues, List<Event> newValues, Long lastSequenceNumberSeenSoFar, Collector<String> out) {     List<Tuple2<Event, Integer>> newEventsSeenSoFar = new ArrayList<>().     List<Event> seenEvents = new ArrayList<>().     for (Tuple2<Event, Integer> windowValue : previousWindowValues) {         if (!newValues.contains(windowValue.f0)) {             failWithEventNotSeenAlertMessage(windowValue, newValues, out).         } else {             seenEvents.add(windowValue.f0).             preserveOrDiscardIfSeenSlideFactorTimes(newEventsSeenSoFar, windowValue).         }     }     addNotSeenValues(newEventsSeenSoFar, newValues, seenEvents, lastSequenceNumberSeenSoFar, out).     return newEventsSeenSoFar. }
false;private;5;16;;private void addNotSeenValues(List<Tuple2<Event, Integer>> newEventsSeenSoFar, List<Event> newValues, List<Event> seenValues, Long lastSequenceNumberSeenSoFar, Collector<String> out) {     newValues.stream().filter(e -> !seenValues.contains(e)).forEach(e -> {         if (lastSequenceNumberSeenSoFar == null || e.getSequenceNumber() > lastSequenceNumberSeenSoFar) {             newEventsSeenSoFar.add(Tuple2.of(e, 1)).         } else {             failWithEventSeenTooManyTimesMessage(e, out).         }     }). }
false;private;2;3;;private void failWithEventSeenTooManyTimesMessage(Event e, Collector<String> out) {     out.collect(String.format("Alert: event %s seen more than %d times", e, slideFactor)). }
false;private;2;8;;private void preserveOrDiscardIfSeenSlideFactorTimes(List<Tuple2<Event, Integer>> newEvenstSeenSoFar, Tuple2<Event, Integer> windowValue) {     int timesSeen = windowValue.f1 + 1.     if (timesSeen != slideFactor) {         newEvenstSeenSoFar.add(Tuple2.of(windowValue.f0, timesSeen)).     } }
false;private;3;12;;private void failWithEventNotSeenAlertMessage(Tuple2<Event, Integer> previousWindowValue, List<Event> currentWindowValues, Collector<String> out) {     out.collect(String.format("Alert: event %s did not belong to %d consecutive windows. " + "Event seen so far %d times.Current window: %s", previousWindowValue.f0, slideFactor, previousWindowValue.f1, currentWindowValues)). }
false;private;2;11;;private Optional<Event> verifyWindowContiguity(List<Event> newValues, Collector<String> out) {     return newValues.stream().sorted(Comparator.comparingLong(Event::getSequenceNumber)).reduce((event, event2) -> {         if (event2.getSequenceNumber() - 1 != event.getSequenceNumber()) {             out.collect("Alert: events in window out ouf order!").         }         return event2.     }). }
