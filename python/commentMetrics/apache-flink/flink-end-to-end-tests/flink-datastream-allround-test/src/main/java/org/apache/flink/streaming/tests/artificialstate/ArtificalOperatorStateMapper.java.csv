commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public OUT map(IN value) throws Exception {     return mapFunction.map(value). }
false;public;1;47;;@Override public void initializeState(FunctionInitializationContext context) throws Exception {     this.lastNumSubtasksBroadcastState = context.getOperatorStateStore().getBroadcastState(new MapStateDescriptor<>(LAST_NUM_SUBTASKS_STATE_NAME, StringSerializer.INSTANCE, IntSerializer.INSTANCE)).     this.broadcastElementsState = context.getOperatorStateStore().getBroadcastState(new MapStateDescriptor<>(BROADCAST_STATE_NAME, IntSerializer.INSTANCE, StringSerializer.INSTANCE)).     this.unionElementsState = context.getOperatorStateStore().getUnionListState(new ListStateDescriptor<>(UNION_STATE_NAME, IntSerializer.INSTANCE)).     if (context.isRestored()) {         Integer lastNumSubtasks = lastNumSubtasksBroadcastState.get(LAST_NUM_SUBTASKS_STATE_KEY).         Preconditions.checkState(lastNumSubtasks != null).         // -- verification for broadcast state --         Set<Integer> expected = new HashSet<>().         for (int i = 0. i < lastNumSubtasks. i++) {             expected.add(i).         }         for (Map.Entry<Integer, String> broadcastElementEntry : broadcastElementsState.entries()) {             int key = broadcastElementEntry.getKey().             Preconditions.checkState(expected.remove(key), "Unexpected keys in restored broadcast state.").             Preconditions.checkState(broadcastElementEntry.getValue().equals(getBroadcastStateEntryValue(key)), "Incorrect value in restored broadcast state.").         }         Preconditions.checkState(expected.size() == 0, "Missing keys in restored broadcast state.").         // -- verification for union state --         for (int i = 0. i < lastNumSubtasks. i++) {             expected.add(i).         }         for (Integer subtaskIndex : unionElementsState.get()) {             Preconditions.checkState(expected.remove(subtaskIndex), "Unexpected element in restored union state.").         }         Preconditions.checkState(expected.size() == 0, "Missing elements in restored union state.").     } else {         // verify that the broadcast / union state is actually empty if this is not a restored run, as told by the state context.         // this catches incorrect logic with the context.isRestored() when using broadcast state / union state.         Preconditions.checkState(!lastNumSubtasksBroadcastState.iterator().hasNext()).         Preconditions.checkState(!broadcastElementsState.iterator().hasNext()).         Preconditions.checkState(!unionElementsState.get().iterator().hasNext()).     } }
false;public;1;19;;@Override public void snapshotState(FunctionSnapshotContext context) throws Exception {     final int numSubtasks = getRuntimeContext().getNumberOfParallelSubtasks().     final int thisSubtaskIndex = getRuntimeContext().getIndexOfThisSubtask().     // store total number of subtasks as broadcast state     lastNumSubtasksBroadcastState.clear().     lastNumSubtasksBroadcastState.put(LAST_NUM_SUBTASKS_STATE_KEY, numSubtasks).     // populate broadcast state (identical across all subtasks)     broadcastElementsState.clear().     for (int i = 0. i < numSubtasks. i++) {         broadcastElementsState.put(i, getBroadcastStateEntryValue(i)).     }     // each subtask only stores its own subtask index as a subset of the union set     unionElementsState.clear().     unionElementsState.add(thisSubtaskIndex). }
false;private;1;3;;private String getBroadcastStateEntryValue(int thisSubtaskIndex) {     return BROADCAST_STATE_ENTRY_VALUE_PREFIX + thisSubtaskIndex. }
