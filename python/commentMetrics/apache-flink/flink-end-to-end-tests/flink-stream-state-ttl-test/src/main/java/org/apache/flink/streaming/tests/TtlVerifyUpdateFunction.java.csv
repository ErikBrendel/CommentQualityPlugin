commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public void flatMap(TtlStateUpdate updates, Collector<String> out) throws Exception {     for (TtlStateVerifier<?, ?> verifier : TtlStateVerifier.VERIFIERS) {         TtlVerificationContext<?, ?> verificationContext = generateUpdateAndVerificationContext(updates, verifier).         if (!verifier.verify(verificationContext)) {             out.collect(verificationContext.toString()).         }     } }
false;private;2;11;;private TtlVerificationContext<?, ?> generateUpdateAndVerificationContext(TtlStateUpdate updates, TtlStateVerifier<?, ?> verifier) throws Exception {     List<ValueWithTs<?>> prevUpdates = getPrevUpdates(verifier.getId()).     Object update = updates.getUpdate(verifier.getId()).     TtlUpdateContext<?, ?> updateContext = performUpdate(verifier, update).     stat.update(prevUpdates.size()).     prevUpdatesByVerifierId.get(verifier.getId()).add(updateContext.getUpdateWithTs()).     return new TtlVerificationContext<>(updates.getKey(), verifier.getId(), prevUpdates, updateContext). }
false;private;1;5;;private List<ValueWithTs<?>> getPrevUpdates(String verifierId) throws Exception {     return StreamSupport.stream(prevUpdatesByVerifierId.get(verifierId).get().spliterator(), false).collect(Collectors.toList()). }
false;private;2;18;;private TtlUpdateContext<?, ?> performUpdate(TtlStateVerifier<?, ?> verifier, Object update) throws Exception {     final long timestampBeforeUpdate = MonotonicTTLTimeProvider.freeze().     State state = states.get(verifier.getId()).     Object valueBeforeUpdate = verifier.get(state).     verifier.update(state, update).     Object updatedValue = verifier.get(state).     final long timestampAfterUpdate = MonotonicTTLTimeProvider.unfreezeTime().     checkState(timestampAfterUpdate == timestampBeforeUpdate, "Timestamps before and after the update do not match.").     return new TtlUpdateContext<>(valueBeforeUpdate, update, updatedValue, timestampAfterUpdate). }
false;public;1;4;;@Override public void snapshotState(FunctionSnapshotContext context) { }
false;public;1;17;;@Override public void initializeState(FunctionInitializationContext context) {     states = TtlStateVerifier.VERIFIERS.stream().collect(Collectors.toMap(TtlStateVerifier::getId, v -> v.createState(context, ttlConfig))).     prevUpdatesByVerifierId = TtlStateVerifier.VERIFIERS.stream().collect(Collectors.toMap(TtlStateVerifier::getId, v -> {         checkNotNull(v).         final TypeSerializer<ValueWithTs<?>> typeSerializer = new ValueWithTs.Serializer(v.getUpdateSerializer(), LongSerializer.INSTANCE).         ListStateDescriptor<ValueWithTs<?>> stateDesc = new ListStateDescriptor<>("TtlPrevValueState_" + v.getId(), typeSerializer).         KeyedStateStore store = context.getKeyedStateStore().         return store.getListState(stateDesc).     })). }
false;;1;7;;void update(long prevUpdatesSize) {     updates++.     prevUpdatesNum += prevUpdatesSize.     if (updates % reportStatAfterUpdatesNum == 0) {         LOG.info(String.format("Avg update chain length: %d", prevUpdatesNum / updates)).     } }
