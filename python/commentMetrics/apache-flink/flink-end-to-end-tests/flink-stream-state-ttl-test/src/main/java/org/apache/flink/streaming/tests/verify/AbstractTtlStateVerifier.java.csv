commented;modifiers;parameterAmount;loc;comment;code
false;static;0;4;;@Nonnull static String randomString() {     return StringUtils.getRandomString(RANDOM, 2, 20). }
false;public;2;7;;@SuppressWarnings("unchecked") @Override @Nonnull public State createState(@Nonnull FunctionInitializationContext context, @Nonnull StateTtlConfig ttlConfig) {     stateDesc.enableTimeToLive(ttlConfig).     return createState(context). }
false;abstract;1;1;;abstract State createState(FunctionInitializationContext context).
false;public;0;6;;@SuppressWarnings("unchecked") @Override @Nonnull public TypeSerializer<UV> getUpdateSerializer() {     return (TypeSerializer<UV>) stateDesc.getSerializer(). }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public GV get(@Nonnull State state) throws Exception {     return getInternal((S) state). }
false;abstract;1;1;;abstract GV getInternal(@Nonnull S state) throws Exception.
false;public;2;5;;@SuppressWarnings("unchecked") @Override public void update(@Nonnull State state, Object update) throws Exception {     updateInternal((S) state, (UV) update). }
false;abstract;2;1;;abstract void updateInternal(@Nonnull S state, UV update) throws Exception.
false;public;1;17;;@SuppressWarnings("unchecked") @Override public boolean verify(@Nonnull TtlVerificationContext<?, ?> verificationContextRaw) {     TtlVerificationContext<UV, GV> verificationContext = (TtlVerificationContext<UV, GV>) verificationContextRaw.     long currentTimestamp = verificationContext.getUpdateContext().getTimestamp().     GV valueBeforeUpdate = verificationContext.getUpdateContext().getValueBeforeUpdate().     List<ValueWithTs<UV>> updates = new ArrayList<>(verificationContext.getPrevUpdates()).     GV expectedValueBeforeUpdate = expected(updates, currentTimestamp).     GV valueAfterUpdate = verificationContext.getUpdateContext().getValueAfterUpdate().     ValueWithTs<UV> update = verificationContext.getUpdateContext().getUpdateWithTs().     updates.add(update).     GV expectedValueAfterUpdate = expected(updates, currentTimestamp).     return Objects.equals(valueBeforeUpdate, expectedValueBeforeUpdate) && Objects.equals(valueAfterUpdate, expectedValueAfterUpdate). }
false;abstract;2;1;;abstract GV expected(@Nonnull List<ValueWithTs<UV>> updates, long currentTimestamp).
false;;2;3;;boolean expired(long lastTimestamp, long currentTimestamp) {     return lastTimestamp + stateDesc.getTtlConfig().getTtl().toMilliseconds() <= currentTimestamp. }
