commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;27;;public static void main(String[] args) throws Exception {     final ParameterTool pt = ParameterTool.fromArgs(args).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     setupEnvironment(env, pt).     KeyedStream<Event, Integer> source = env.addSource(createEventSource(pt)).name("EventSource").uid("EventSource").assignTimestampsAndWatermarks(createTimestampExtractor(pt)).keyBy(Event::getKey).     List<TypeSerializer<ComplexPayload>> stateSer = Collections.singletonList(new KryoSerializer<>(ComplexPayload.class, env.getConfig())).     KeyedStream<Event, Integer> afterStatefulOperations = isOriginalJobVariant(pt) ? applyOriginalStatefulOperations(source, stateSer, Collections.emptyList()) : applyUpgradedStatefulOperations(source, stateSer, Collections.emptyList()).     afterStatefulOperations.flatMap(createSemanticsCheckMapper(pt)).name("SemanticsCheckMapper").addSink(new PrintSinkFunction<>()).     env.execute("General purpose test job"). }
false;private,static;1;11;;private static boolean isOriginalJobVariant(final ParameterTool pt) {     switch(pt.get(TEST_JOB_VARIANT.key())) {         case TEST_JOB_VARIANT_ORIGINAL:             return true.         case TEST_JOB_VARIANT_UPGRADED:             return false.         default:             throw new IllegalArgumentException(String.format("'--test.job.variant' can be either '%s' or '%s'", TEST_JOB_VARIANT_ORIGINAL, TEST_JOB_VARIANT_UPGRADED)).     } }
false;private,static;3;7;;private static KeyedStream<Event, Integer> applyOriginalStatefulOperations(KeyedStream<Event, Integer> source, List<TypeSerializer<ComplexPayload>> stateSer, List<Class<ComplexPayload>> stateClass) {     source = applyTestStatefulOperator("stateMap1", simpleStateUpdate("stateMap1"), source, stateSer, stateClass).     return applyTestStatefulOperator("stateMap2", lastStateUpdate("stateMap2"), source, stateSer, stateClass). }
false;private,static;3;8;;private static KeyedStream<Event, Integer> applyUpgradedStatefulOperations(KeyedStream<Event, Integer> source, List<TypeSerializer<ComplexPayload>> stateSer, List<Class<ComplexPayload>> stateClass) {     source = applyTestStatefulOperator("stateMap2", simpleStateUpdate("stateMap2"), source, stateSer, stateClass).     source = applyTestStatefulOperator("stateMap1", lastStateUpdate("stateMap1"), source, stateSer, stateClass).     return applyTestStatefulOperator("stateMap3", simpleStateUpdate("stateMap3"), source, stateSer, stateClass). }
false;private,static;5;13;;private static KeyedStream<Event, Integer> applyTestStatefulOperator(String name, JoinFunction<Event, ComplexPayload, ComplexPayload> stateFunc, KeyedStream<Event, Integer> source, List<TypeSerializer<ComplexPayload>> stateSer, List<Class<ComplexPayload>> stateClass) {     return source.map(createArtificialKeyedStateMapper(e -> e, stateFunc, stateSer, stateClass)).name(name).uid(name).returns(Event.class).keyBy(Event::getKey). }
false;private,static;1;6;;private static JoinFunction<Event, ComplexPayload, ComplexPayload> simpleStateUpdate(String strPayload) {     return (Event first, ComplexPayload second) -> {         verifyState(strPayload, second).         return new ComplexPayload(first, strPayload).     }. }
false;private,static;1;7;;private static JoinFunction<Event, ComplexPayload, ComplexPayload> lastStateUpdate(String strPayload) {     return (Event first, ComplexPayload second) -> {         verifyState(strPayload, second).         boolean isLastEvent = second != null && first.getEventTime() <= second.getEventTime().         return isLastEvent ? second : new ComplexPayload(first, strPayload).     }. }
false;private,static;2;5;;private static void verifyState(String strPayload, ComplexPayload state) {     if (state != null && !state.getStrPayload().equals(strPayload)) {         System.out.println("State is set or restored incorrectly").     } }
