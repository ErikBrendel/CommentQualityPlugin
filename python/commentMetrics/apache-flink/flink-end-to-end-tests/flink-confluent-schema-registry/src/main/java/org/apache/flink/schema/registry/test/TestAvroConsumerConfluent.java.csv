commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;39;;public static void main(String[] args) throws Exception {     // parse input arguments     final ParameterTool parameterTool = ParameterTool.fromArgs(args).     if (parameterTool.getNumberOfParameters() < 6) {         System.out.println("Missing parameters!\n" + "Usage: Kafka --input-topic <topic> --output-topic <topic> " + "--bootstrap.servers <kafka brokers> " + "--zookeeper.connect <zk quorum> " + "--schema-registry-url <confluent schema registry> --group.id <some id>").         return.     }     Properties config = new Properties().     config.setProperty("bootstrap.servers", parameterTool.getRequired("bootstrap.servers")).     config.setProperty("group.id", parameterTool.getRequired("group.id")).     config.setProperty("zookeeper.connect", parameterTool.getRequired("zookeeper.connect")).     String schemaRegistryUrl = parameterTool.getRequired("schema-registry-url").     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     DataStreamSource<User> input = env.addSource(new FlinkKafkaConsumer010<>(parameterTool.getRequired("input-topic"), ConfluentRegistryAvroDeserializationSchema.forSpecific(User.class, schemaRegistryUrl), config).setStartFromEarliest()).     SingleOutputStreamOperator<String> mapToString = input.map((MapFunction<User, String>) SpecificRecordBase::toString).     FlinkKafkaProducer010<String> stringFlinkKafkaProducer010 = new FlinkKafkaProducer010<>(parameterTool.getRequired("output-topic"), new SimpleStringSchema(), config).     mapToString.addSink(stringFlinkKafkaProducer010).     env.execute("Kafka 0.10 Confluent Schema Registry AVRO Example"). }
