commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;39;;public static void main(String[] args) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     // read vertex and edge data     DataSet<Long> vertices = ConnectedComponentsData.getDefaultVertexDataSet(env).rebalance().     DataSet<Tuple2<Long, Long>> edges = ConnectedComponentsData.getDefaultEdgeDataSet(env).rebalance().flatMap(new ConnectedComponents.UndirectEdge()).     // assign the initial components (equal to the vertex id)     DataSet<Tuple2<Long, Long>> verticesWithInitialId = vertices.map(new ConnectedComponents.DuplicateValue<>()).     // open a delta iteration     DeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration = verticesWithInitialId.iterateDelta(verticesWithInitialId, 100, 0).     // apply the step logic: join with the edges, select the minimum neighbor,     // update if the component of the candidate is smaller     DataSet<Tuple2<Long, Long>> changes = iteration.getWorkset().join(edges).where(0).equalTo(0).with(new ConnectedComponents.NeighborWithComponentIDJoin()).groupBy(0).aggregate(Aggregations.MIN, 1).join(iteration.getSolutionSet()).where(0).equalTo(0).with(new ConnectedComponents.ComponentIdFilter()).     // close the delta iteration (delta and new workset are identical)     DataSet<Tuple2<Long, Long>> result = iteration.closeWith(changes, changes).     result.output(new DiscardingOutputFormat<>()).     env.execute(). }
