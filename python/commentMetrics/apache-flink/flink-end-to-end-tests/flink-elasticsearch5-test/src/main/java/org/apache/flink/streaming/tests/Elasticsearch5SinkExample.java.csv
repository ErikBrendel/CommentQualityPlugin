commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public void flatMap(Long value, Collector<Tuple2<String, String>> out) {     final String key = String.valueOf(value).     final String message = "message #" + value.     out.collect(Tuple2.of(key, message + "update #1")).     out.collect(Tuple2.of(key, message + "update #2")). }
false;public,static;1;43;;public static void main(String[] args) throws Exception {     final ParameterTool parameterTool = ParameterTool.fromArgs(args).     if (parameterTool.getNumberOfParameters() < 3) {         System.out.println("Missing parameters!\n" + "Usage: --numRecords <numRecords> --index <index> --type <type>").         return.     }     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.getConfig().disableSysoutLogging().     env.enableCheckpointing(5000).     DataStream<Tuple2<String, String>> source = env.generateSequence(0, parameterTool.getInt("numRecords") - 1).flatMap(new FlatMapFunction<Long, Tuple2<String, String>>() {          @Override         public void flatMap(Long value, Collector<Tuple2<String, String>> out) {             final String key = String.valueOf(value).             final String message = "message #" + value.             out.collect(Tuple2.of(key, message + "update #1")).             out.collect(Tuple2.of(key, message + "update #2")).         }     }).     Map<String, String> userConfig = new HashMap<>().     userConfig.put("cluster.name", "elasticsearch").     // This instructs the sink to emit after every element, otherwise they would be buffered     userConfig.put(ElasticsearchSink.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     List<InetSocketAddress> transports = new ArrayList<>().     transports.add(new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 9300)).     source.addSink(new ElasticsearchSink<>(userConfig, transports, (Tuple2<String, String> element, RuntimeContext ctx, RequestIndexer indexer) -> {         indexer.add(createIndexRequest(element.f1, parameterTool)).         indexer.add(createUpdateRequest(element, parameterTool)).     })).     env.execute("Elasticsearch5.x end to end sink test example"). }
false;private,static;2;10;;private static IndexRequest createIndexRequest(String element, ParameterTool parameterTool) {     Map<String, Object> json = new HashMap<>().     json.put("data", element).     return Requests.indexRequest().index(parameterTool.getRequired("index")).type(parameterTool.getRequired("type")).id(element).source(json). }
false;private,static;2;11;;private static UpdateRequest createUpdateRequest(Tuple2<String, String> element, ParameterTool parameterTool) {     Map<String, Object> json = new HashMap<>().     json.put("data", element.f1).     return new UpdateRequest(parameterTool.getRequired("index"), parameterTool.getRequired("type"), element.f0).doc(json).upsert(json). }
