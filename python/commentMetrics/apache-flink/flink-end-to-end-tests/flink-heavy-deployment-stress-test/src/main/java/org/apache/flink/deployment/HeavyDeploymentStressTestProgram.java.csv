commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;19;;public static void main(String[] args) throws Exception {     final ParameterTool pt = ParameterTool.fromArgs(args).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     setupEnvironment(env, pt).     final int numStates = pt.getInt(NUM_LIST_STATES_PER_OP.key(), NUM_LIST_STATES_PER_OP.defaultValue()).     final int numPartitionsPerState = pt.getInt(NUM_PARTITIONS_PER_LIST_STATE.key(), NUM_PARTITIONS_PER_LIST_STATE.defaultValue()).     Preconditions.checkState(env.getCheckpointInterval() > 0L, "Checkpointing must be enabled for this test!").     env.addSource(new SimpleEndlessSourceWithBloatedState(numStates, numPartitionsPerState)).setParallelism(env.getParallelism()).addSink(new DiscardingSink<>()).setParallelism(1).     env.execute("HeavyDeploymentStressTestProgram"). }
false;public;1;3;;@Override public void snapshotState(FunctionSnapshotContext context) { }
false;public;1;25;;@Override public void initializeState(FunctionInitializationContext context) throws Exception {     readyToFail = false.     if (context.isRestored()) {         isRunning = false.     } else {         isRunning = true.         OperatorStateStore operatorStateStore = context.getOperatorStateStore().         for (int i = 0. i < numListStates. ++i) {             ListStateDescriptor<String> listStateDescriptor = new ListStateDescriptor<>("test-list-state-" + i, String.class).             ListState<String> unionListState = operatorStateStore.getUnionListState(listStateDescriptor).             for (int j = 0. j < numPartitionsPerListState. ++j) {                 unionListState.add(String.valueOf(j)).             }         }     } }
false;public;1;15;;@Override public void run(SourceContext<String> ctx) throws Exception {     while (isRunning) {         if (readyToFail && getRuntimeContext().getIndexOfThisSubtask() == 0) {             throw new Exception("Artificial failure.").         }         synchronized (ctx.getCheckpointLock()) {             ctx.collect("test-element").         }         Thread.sleep(1).     } }
false;public;0;4;;@Override public void cancel() {     this.isRunning = false. }
false;public;1;4;;@Override public void notifyCheckpointComplete(long checkpointId) {     readyToFail = true. }
