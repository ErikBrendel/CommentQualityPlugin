commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void checkOS() {     Assume.assumeFalse("This test does not run on Windows.", OperatingSystem.isWindows()). }
false;public;0;68;;@Test public void testReporter() throws Exception {     dist.copyOptJarsToLib("flink-metrics-prometheus").     final Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "prom." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getCanonicalName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "prom.port", "9000-9100").     dist.appendConfiguration(config).     final Path tmpPrometheusDir = tmp.newFolder().toPath().resolve("prometheus").     final Path prometheusArchive = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME + ".tar.gz").     final Path prometheusBinDir = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME).     final Path prometheusConfig = prometheusBinDir.resolve("prometheus.yml").     final Path prometheusBinary = prometheusBinDir.resolve("prometheus").     Files.createDirectory(tmpPrometheusDir).     runBlocking("Download of Prometheus", Duration.ofMinutes(5), CommandLineWrapper.wget("https://github.com/prometheus/prometheus/releases/download/v" + PROMETHEUS_VERSION + '/' + prometheusArchive.getFileName()).targetDir(tmpPrometheusDir).build()).     runBlocking("Extraction of Prometheus archive", CommandLineWrapper.tar(prometheusArchive).extract().zipped().targetDir(tmpPrometheusDir).build()).     runBlocking("Set Prometheus scrape interval", CommandLineWrapper.sed("s/\\(scrape_interval:\\).*/\\1 1s/", prometheusConfig).inPlace().build()).     dist.startFlinkCluster().     final List<Integer> ports = dist.searchAllLogs(LOG_REPORTER_PORT_PATTERN, matcher -> matcher.group(1)).map(Integer::valueOf).collect(Collectors.toList()).     final String scrapeTargets = ports.stream().map(port -> "'localhost:" + port + "'").collect(Collectors.joining(", ")).     runBlocking("Set Prometheus scrape targets to (" + scrapeTargets + ")", CommandLineWrapper.sed("s/\\(targets:\\).*/\\1 [" + scrapeTargets + "]/", prometheusConfig).inPlace().build()).     try (AutoClosableProcess prometheus = runNonBlocking("Start Prometheus server", prometheusBinary.toAbsolutePath().toString(), "--config.file=" + prometheusConfig.toAbsolutePath(), "--storage.tsdb.path=" + prometheusBinDir.resolve("data").toAbsolutePath())) {         final OkHttpClient client = new OkHttpClient().         checkMetricAvailability(client, "flink_jobmanager_numRegisteredTaskManagers").         checkMetricAvailability(client, "flink_taskmanager_Status_Network_TotalMemorySegments").     } }
false;private,static;2;47;;private static void checkMetricAvailability(final OkHttpClient client, final String metric) throws InterruptedException {     final Request jobManagerRequest = new Request.Builder().get().url("http://localhost:9090/api/v1/query?query=" + metric).build().     Exception reportedException = null.     for (int x = 0. x < 30. x++) {         try (Response response = client.newCall(jobManagerRequest).execute()) {             if (response.isSuccessful()) {                 final String json = response.body().string().                 // Sample response:                 // {                 // "status": "success",                 // "data": {                 // "resultType": "vector",                 // "result": [{                 // "metric": {                 // "__name__": "flink_jobmanager_numRegisteredTaskManagers",                 // "host": "localhost",                 // "instance": "localhost:9000",                 // "job": "prometheus"                 // },                 // "value": [1540548500.107, "1"]                 // }]                 // }                 // }                 OBJECT_MAPPER.readTree(json).get("data").get("result").get(0).get("value").get(1).asInt().                 // if we reach this point some value for the given metric was reported to prometheus                 return.             } else {                 LOG.info("Retrieving metric failed. Retrying... " + response.code() + ":" + response.message()).                 Thread.sleep(1000).             }         } catch (Exception e) {             reportedException = ExceptionUtils.firstOrSuppressed(e, reportedException).             Thread.sleep(1000).         }     }     throw new AssertionError("Could not retrieve metric " + metric + " from Prometheus.", reportedException). }
