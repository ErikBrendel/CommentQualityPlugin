commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int size() {     return treeSet.size(). }
false;public;0;4;;@Override public int maxSize() {     return maxSize. }
false;public;0;4;;@Override public boolean isEmpty() {     return treeSet.isEmpty(). }
false;public;0;4;;@Override public boolean isFull() {     return treeSet.size() >= maxSize. }
false;public;1;4;;@Override public boolean add(@Nonnull byte[] toAdd) {     return treeSet.add(toAdd). }
false;public;1;4;;@Override public boolean remove(@Nonnull byte[] toRemove) {     return treeSet.remove(toRemove). }
false;public;0;5;;@Nullable @Override public byte[] peekFirst() {     return !isEmpty() ? treeSet.first() : null. }
false;public;0;5;;@Nullable @Override public byte[] peekLast() {     return !isEmpty() ? treeSet.last() : null. }
false;public;0;5;;@Nullable @Override public byte[] pollFirst() {     return !isEmpty() ? treeSet.pollFirst() : null. }
false;public;0;5;;@Nullable @Override public byte[] pollLast() {     return !isEmpty() ? treeSet.pollLast() : null. }
false;public;1;7;;@Override public void bulkLoadFromOrderedIterator(@Nonnull Iterator<byte[]> orderedIterator) {     treeSet.clear().     for (int i = maxSize. --i >= 0 && orderedIterator.hasNext(). ) {         treeSet.add(orderedIterator.next()).     } }
