commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;88;/**  * Creates a {@link RocksDBNativeMetricOptions} based on an  * external configuration.  */ ;/**  * Creates a {@link RocksDBNativeMetricOptions} based on an  * external configuration.  */ public static RocksDBNativeMetricOptions fromConfig(Configuration config) {     RocksDBNativeMetricOptions options = new RocksDBNativeMetricOptions().     if (config.getBoolean(MONITOR_NUM_IMMUTABLE_MEM_TABLES)) {         options.enableNumImmutableMemTable().     }     if (config.getBoolean(MONITOR_MEM_TABLE_FLUSH_PENDING)) {         options.enableMemTableFlushPending().     }     if (config.getBoolean(TRACK_COMPACTION_PENDING)) {         options.enableCompactionPending().     }     if (config.getBoolean(MONITOR_BACKGROUND_ERRORS)) {         options.enableBackgroundErrors().     }     if (config.getBoolean(MONITOR_CUR_SIZE_ACTIVE_MEM_TABLE)) {         options.enableCurSizeActiveMemTable().     }     if (config.getBoolean(MONITOR_CUR_SIZE_ALL_MEM_TABLE)) {         options.enableCurSizeAllMemTables().     }     if (config.getBoolean(MONITOR_SIZE_ALL_MEM_TABLES)) {         options.enableSizeAllMemTables().     }     if (config.getBoolean(MONITOR_NUM_ENTRIES_ACTIVE_MEM_TABLE)) {         options.enableNumEntriesActiveMemTable().     }     if (config.getBoolean(MONITOR_NUM_ENTRIES_IMM_MEM_TABLES)) {         options.enableNumEntriesImmMemTables().     }     if (config.getBoolean(MONITOR_NUM_DELETES_ACTIVE_MEM_TABLE)) {         options.enableNumDeletesActiveMemTable().     }     if (config.getBoolean(MONITOR_NUM_DELETES_IMM_MEM_TABLE)) {         options.enableNumDeletesImmMemTables().     }     if (config.getBoolean(ESTIMATE_NUM_KEYS)) {         options.enableEstimateNumKeys().     }     if (config.getBoolean(ESTIMATE_TABLE_READERS_MEM)) {         options.enableEstimateTableReadersMem().     }     if (config.getBoolean(MONITOR_NUM_SNAPSHOTS)) {         options.enableNumSnapshots().     }     if (config.getBoolean(MONITOR_NUM_LIVE_VERSIONS)) {         options.enableNumLiveVersions().     }     if (config.getBoolean(ESTIMATE_LIVE_DATA_SIZE)) {         options.enableEstimateLiveDataSize().     }     if (config.getBoolean(MONITOR_TOTAL_SST_FILES_SIZE)) {         options.enableTotalSstFilesSize().     }     if (config.getBoolean(ESTIMATE_PENDING_COMPACTION_BYTES)) {         options.enableEstimatePendingCompactionBytes().     }     if (config.getBoolean(MONITOR_NUM_RUNNING_COMPACTIONS)) {         options.enableNumRunningCompactions().     }     if (config.getBoolean(MONITOR_NUM_RUNNING_FLUSHES)) {         options.enableNumRunningFlushes().     }     if (config.getBoolean(MONITOR_ACTUAL_DELAYED_WRITE_RATE)) {         options.enableActualDelayedWriteRate().     }     return options. }
true;public;0;3;/**  * Returns number of immutable memtables that have not yet been flushed.  */ ;/**  * Returns number of immutable memtables that have not yet been flushed.  */ public void enableNumImmutableMemTable() {     this.properties.add(RocksDBProperty.NumImmutableMemTable.getRocksDBProperty()). }
true;public;0;3;/**  * Returns 1 if a memtable flush is pending. otherwise, returns 0.  */ ;/**  * Returns 1 if a memtable flush is pending. otherwise, returns 0.  */ public void enableMemTableFlushPending() {     this.properties.add(RocksDBProperty.MemTableFlushPending.getRocksDBProperty()). }
true;public;0;3;/**  * Returns 1 if at least one compaction is pending. otherwise, returns 0.  */ ;/**  * Returns 1 if at least one compaction is pending. otherwise, returns 0.  */ public void enableCompactionPending() {     this.properties.add(RocksDBProperty.CompactionPending.getRocksDBProperty()). }
true;public;0;3;/**  * Returns accumulated number of background errors.  */ ;/**  * Returns accumulated number of background errors.  */ public void enableBackgroundErrors() {     this.properties.add(RocksDBProperty.BackgroundErrors.getRocksDBProperty()). }
true;public;0;3;/**  * Returns approximate size of active memtable (bytes).  */ ;/**  * Returns approximate size of active memtable (bytes).  */ public void enableCurSizeActiveMemTable() {     this.properties.add(RocksDBProperty.CurSizeActiveMemTable.getRocksDBProperty()). }
true;public;0;3;/**  * Returns approximate size of active and unflushed immutable memtables (bytes).  */ ;/**  * Returns approximate size of active and unflushed immutable memtables (bytes).  */ public void enableCurSizeAllMemTables() {     this.properties.add(RocksDBProperty.CurSizeAllMemTables.getRocksDBProperty()). }
true;public;0;3;/**  * Returns approximate size of active, unflushed immutable, and pinned immutable memtables (bytes).  */ ;/**  * Returns approximate size of active, unflushed immutable, and pinned immutable memtables (bytes).  */ public void enableSizeAllMemTables() {     this.properties.add(RocksDBProperty.SizeAllMemTables.getRocksDBProperty()). }
true;public;0;3;/**  * Returns total number of entries in the active memtable.  */ ;/**  * Returns total number of entries in the active memtable.  */ public void enableNumEntriesActiveMemTable() {     this.properties.add(RocksDBProperty.NumEntriesActiveMemTable.getRocksDBProperty()). }
true;public;0;3;/**  * Returns total number of entries in the unflushed immutable memtables.  */ ;/**  * Returns total number of entries in the unflushed immutable memtables.  */ public void enableNumEntriesImmMemTables() {     this.properties.add(RocksDBProperty.NumEntriesImmMemTables.getRocksDBProperty()). }
true;public;0;3;/**  * Returns total number of delete entries in the active memtable.  */ ;/**  * Returns total number of delete entries in the active memtable.  */ public void enableNumDeletesActiveMemTable() {     this.properties.add(RocksDBProperty.NumDeletesActiveMemTable.getRocksDBProperty()). }
true;public;0;3;/**  * Returns total number of delete entries in the unflushed immutable memtables.  */ ;/**  * Returns total number of delete entries in the unflushed immutable memtables.  */ public void enableNumDeletesImmMemTables() {     this.properties.add(RocksDBProperty.NumDeletesImmMemTables.getRocksDBProperty()). }
true;public;0;3;/**  * Returns estimated number of total keys in the active and unflushed immutable memtables and storage.  */ ;/**  * Returns estimated number of total keys in the active and unflushed immutable memtables and storage.  */ public void enableEstimateNumKeys() {     this.properties.add(RocksDBProperty.EstimateNumKeys.getRocksDBProperty()). }
true;public;0;3;/**  * Returns estimated memory used for reading SST tables, excluding memory  * used in block cache (e.g.,filter and index blocks).  */ ;/**  * Returns estimated memory used for reading SST tables, excluding memory  * used in block cache (e.g.,filter and index blocks).  */ public void enableEstimateTableReadersMem() {     this.properties.add(RocksDBProperty.EstimateTableReadersMem.getRocksDBProperty()). }
true;public;0;3;/**  * Returns number of unreleased snapshots of the database.  */ ;/**  * Returns number of unreleased snapshots of the database.  */ public void enableNumSnapshots() {     this.properties.add(RocksDBProperty.NumSnapshots.getRocksDBProperty()). }
true;public;0;3;/**  * Returns number of live versions. `Version`  * is an internal data structure. See version_set.h for details. More  * live versions often mean more SST files are held from being deleted,  * by iterators or unfinished compactions.  */ ;/**  * Returns number of live versions. `Version`  * is an internal data structure. See version_set.h for details. More  * live versions often mean more SST files are held from being deleted,  * by iterators or unfinished compactions.  */ public void enableNumLiveVersions() {     this.properties.add(RocksDBProperty.NumLiveVersions.getRocksDBProperty()). }
true;public;0;3;/**  * Returns an estimate of the amount of live data in bytes.  */ ;/**  * Returns an estimate of the amount of live data in bytes.  */ public void enableEstimateLiveDataSize() {     this.properties.add(RocksDBProperty.EstimateLiveDataSize.getRocksDBProperty()). }
true;public;0;3;/**  * Returns total size (bytes) of all SST files.  * <strong>WARNING</strong>: may slow down online queries if there are too many files.  */ ;/**  * Returns total size (bytes) of all SST files.  * <strong>WARNING</strong>: may slow down online queries if there are too many files.  */ public void enableTotalSstFilesSize() {     this.properties.add(RocksDBProperty.TotalSstFilesSize.getRocksDBProperty()). }
true;public;0;3;/**  * Returns estimated total number of bytes compaction needs to rewrite to get all levels down  * to under target size. Not valid for other compactions than level-based.  */ ;/**  * Returns estimated total number of bytes compaction needs to rewrite to get all levels down  * to under target size. Not valid for other compactions than level-based.  */ public void enableEstimatePendingCompactionBytes() {     this.properties.add(RocksDBProperty.EstimatePendingCompactionBytes.getRocksDBProperty()). }
true;public;0;3;/**  * Returns the number of currently running compactions.  */ ;/**  * Returns the number of currently running compactions.  */ public void enableNumRunningCompactions() {     this.properties.add(RocksDBProperty.NumRunningCompactions.getRocksDBProperty()). }
true;public;0;3;/**  * Returns the number of currently running flushes.  */ ;/**  * Returns the number of currently running flushes.  */ public void enableNumRunningFlushes() {     this.properties.add(RocksDBProperty.NumRunningFlushes.getRocksDBProperty()). }
true;public;0;3;/**  * Returns the current actual delayed write rate. 0 means no delay.  */ ;/**  * Returns the current actual delayed write rate. 0 means no delay.  */ public void enableActualDelayedWriteRate() {     this.properties.add(RocksDBProperty.ActualDelayedWriteRate.getRocksDBProperty()). }
true;public;0;3;/**  * @return the enabled RocksDB metrics  */ ;/**  * @return the enabled RocksDB metrics  */ public Collection<String> getProperties() {     return Collections.unmodifiableCollection(properties). }
true;public;0;3;/**  * {{@link RocksDBNativeMetricMonitor}} is enabled is any property is set.  *  * @return true if {{RocksDBNativeMetricMonitor}} should be enabled, false otherwise.  */ ;/**  * {{@link RocksDBNativeMetricMonitor}} is enabled is any property is set.  *  * @return true if {{RocksDBNativeMetricMonitor}} should be enabled, false otherwise.  */ public boolean isEnabled() {     return !properties.isEmpty(). }
