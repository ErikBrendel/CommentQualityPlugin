commented;modifiers;parameterAmount;loc;comment;code
false;static;2;8;;static int readKeyGroup(int keyGroupPrefixBytes, DataInputView inputView) throws IOException {     int keyGroup = 0.     for (int i = 0. i < keyGroupPrefixBytes. ++i) {         keyGroup <<= 8.         keyGroup |= (inputView.readByte() & 0xFF).     }     return keyGroup. }
false;public,static;3;12;;public static <K> K readKey(TypeSerializer<K> keySerializer, DataInputDeserializer inputView, boolean ambiguousKeyPossible) throws IOException {     int beforeRead = inputView.getPosition().     K key = keySerializer.deserialize(inputView).     if (ambiguousKeyPossible) {         int length = inputView.getPosition() - beforeRead.         readVariableIntBytes(inputView, length).     }     return key. }
false;public,static;3;12;;public static <N> N readNamespace(TypeSerializer<N> namespaceSerializer, DataInputDeserializer inputView, boolean ambiguousKeyPossible) throws IOException {     int beforeRead = inputView.getPosition().     N namespace = namespaceSerializer.deserialize(inputView).     if (ambiguousKeyPossible) {         int length = inputView.getPosition() - beforeRead.         readVariableIntBytes(inputView, length).     }     return namespace. }
false;public,static;4;14;;public static <N> void writeNameSpace(N namespace, TypeSerializer<N> namespaceSerializer, DataOutputSerializer keySerializationDataOutputView, boolean ambiguousKeyPossible) throws IOException {     int beforeWrite = keySerializationDataOutputView.length().     namespaceSerializer.serialize(namespace, keySerializationDataOutputView).     if (ambiguousKeyPossible) {         // write length of namespace         writeLengthFrom(beforeWrite, keySerializationDataOutputView).     } }
false;public,static;1;3;;public static boolean isSerializerTypeVariableSized(@Nonnull TypeSerializer<?> serializer) {     return serializer.getLength() < 0. }
false;public,static;2;3;;public static boolean isAmbiguousKeyPossible(TypeSerializer keySerializer, TypeSerializer namespaceSerializer) {     return (isSerializerTypeVariableSized(keySerializer) && isSerializerTypeVariableSized(namespaceSerializer)). }
false;public,static;3;8;;public static void writeKeyGroup(int keyGroup, int keyGroupPrefixBytes, DataOutputView keySerializationDateDataOutputView) throws IOException {     for (int i = keyGroupPrefixBytes. --i >= 0. ) {         keySerializationDateDataOutputView.writeByte(extractByteAtPosition(keyGroup, i)).     } }
false;public,static;4;14;;public static <K> void writeKey(K key, TypeSerializer<K> keySerializer, DataOutputSerializer keySerializationDataOutputView, boolean ambiguousKeyPossible) throws IOException {     // write key     int beforeWrite = keySerializationDataOutputView.length().     keySerializer.serialize(key, keySerializationDataOutputView).     if (ambiguousKeyPossible) {         // write size of key         writeLengthFrom(beforeWrite, keySerializationDataOutputView).     } }
false;public,static;2;6;;public static void readVariableIntBytes(DataInputView inputView, int value) throws IOException {     do {         inputView.readByte().         value >>>= 8.     } while (value != 0). }
false;private,static;2;6;;private static void writeLengthFrom(int fromPosition, DataOutputSerializer keySerializationDateDataOutputView) throws IOException {     int length = keySerializationDateDataOutputView.length() - fromPosition.     writeVariableIntBytes(length, keySerializationDateDataOutputView). }
false;public,static;2;9;;public static void writeVariableIntBytes(int value, DataOutputView keySerializationDateDataOutputView) throws IOException {     do {         keySerializationDateDataOutputView.writeByte(value).         value >>>= 8.     } while (value != 0). }
false;public,static;2;6;;public static void serializeKeyGroup(int keyGroup, byte[] startKeyGroupPrefixBytes) {     final int keyGroupPrefixBytes = startKeyGroupPrefixBytes.length.     for (int j = 0. j < keyGroupPrefixBytes. ++j) {         startKeyGroupPrefixBytes[j] = extractByteAtPosition(keyGroup, keyGroupPrefixBytes - j - 1).     } }
false;private,static;2;3;;private static byte extractByteAtPosition(int value, int byteIdx) {     return (byte) ((value >>> (byteIdx << 3))). }
false;public,static;1;3;;public static int computeRequiredBytesInKeyGroupPrefix(int totalKeyGroupsInJob) {     return totalKeyGroupsInJob > (Byte.MAX_VALUE + 1) ? 2 : 1. }
