commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<SV>> createForDeserializedState() {     throw new UnsupportedOperationException("Only serialized state filtering is supported in RocksDB backend"). }
false;static;3;14;;@SuppressWarnings("unchecked") static <SV, SEV> StateSnapshotTransformFactory<SV> wrapStateSnapshotTransformFactory(StateDescriptor<?, SV> stateDesc, StateSnapshotTransformFactory<SEV> snapshotTransformFactory, TypeSerializer<SV> stateSerializer) {     if (stateDesc instanceof ListStateDescriptor) {         TypeSerializer<SEV> elementSerializer = ((ListSerializer<SEV>) stateSerializer).getElementSerializer().         return new RocksDBListStateSnapshotTransformFactory<>(snapshotTransformFactory, elementSerializer).     } else if (stateDesc instanceof MapStateDescriptor) {         return new RocksDBMapStateSnapshotTransformFactory<>(snapshotTransformFactory).     } else {         return new RocksDBValueStateSnapshotTransformFactory<>(snapshotTransformFactory).     } }
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<byte[]>> createForSerializedState() {     return snapshotTransformFactory.createForSerializedState(). }
false;public;0;5;;@Override public Optional<StateSnapshotTransformer<byte[]>> createForSerializedState() {     return snapshotTransformFactory.createForSerializedState().map(RocksDBMapState.StateSnapshotTransformerWrapper::new). }
false;public;0;5;;@Override public Optional<StateSnapshotTransformer<byte[]>> createForSerializedState() {     return snapshotTransformFactory.createForDeserializedState().map(est -> new RocksDBListState.StateSnapshotTransformerWrapper<>(est, elementSerializer.duplicate())). }
