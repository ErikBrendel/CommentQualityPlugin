commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * This method should set the additional options on top of the current options object.  * The current options object may contain pre-defined options based on flags that have  * been configured on the state backend.  *  * <p>It is important to set the options on the current object and return the result from  * the setter methods, otherwise the pre-defined options may get lost.  *  * @param currentOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ ;/**  * This method should set the additional options on top of the current options object.  * The current options object may contain pre-defined options based on flags that have  * been configured on the state backend.  *  * <p>It is important to set the options on the current object and return the result from  * the setter methods, otherwise the pre-defined options may get lost.  *  * @param currentOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ DBOptions createDBOptions(DBOptions currentOptions).
true;;1;1;/**  * This method should set the additional options on top of the current options object.  * The current options object may contain pre-defined options based on flags that have  * been configured on the state backend.  *  * <p>It is important to set the options on the current object and return the result from  * the setter methods, otherwise the pre-defined options may get lost.  *  * @param currentOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ ;/**  * This method should set the additional options on top of the current options object.  * The current options object may contain pre-defined options based on flags that have  * been configured on the state backend.  *  * <p>It is important to set the options on the current object and return the result from  * the setter methods, otherwise the pre-defined options may get lost.  *  * @param currentOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ ColumnFamilyOptions createColumnOptions(ColumnFamilyOptions currentOptions).
true;default;1;3;/**  * This method should enable certain RocksDB metrics to be forwarded to  * Flink's metrics reporter.  *  * <p>Enabling these monitoring options may degrade RockDB performance  * and should be set with care.  * @param nativeMetricOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ ;/**  * This method should enable certain RocksDB metrics to be forwarded to  * Flink's metrics reporter.  *  * <p>Enabling these monitoring options may degrade RockDB performance  * and should be set with care.  * @param nativeMetricOptions The options object with the pre-defined options.  * @return The options object on which the additional options are set.  */ default RocksDBNativeMetricOptions createNativeMetricsOptions(RocksDBNativeMetricOptions nativeMetricOptions) {     return nativeMetricOptions. }
