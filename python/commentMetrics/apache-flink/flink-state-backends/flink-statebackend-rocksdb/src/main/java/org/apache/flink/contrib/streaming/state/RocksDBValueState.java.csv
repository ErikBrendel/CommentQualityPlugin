commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return backend.getKeySerializer(). }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<V> getValueSerializer() {     return valueSerializer. }
false;public;0;15;;@Override public V value() {     try {         byte[] valueBytes = backend.db.get(columnFamily, serializeCurrentKeyWithGroupAndNamespace()).         if (valueBytes == null) {             return getDefaultValue().         }         dataInputView.setBuffer(valueBytes).         return valueSerializer.deserialize(dataInputView).     } catch (IOException | RocksDBException e) {         throw new FlinkRuntimeException("Error while retrieving data from RocksDB.", e).     } }
false;public;1;15;;@Override public void update(V value) {     if (value == null) {         clear().         return.     }     try {         backend.db.put(columnFamily, writeOptions, serializeCurrentKeyWithGroupAndNamespace(), serializeValue(value)).     } catch (Exception e) {         throw new FlinkRuntimeException("Error while adding data to RocksDB", e).     } }
false;static;3;12;;@SuppressWarnings("unchecked") static <K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, Tuple2<ColumnFamilyHandle, RegisteredKeyValueStateBackendMetaInfo<N, SV>> registerResult, RocksDBKeyedStateBackend<K> backend) {     return (IS) new RocksDBValueState<>(registerResult.f0, registerResult.f1.getNamespaceSerializer(), registerResult.f1.getStateSerializer(), stateDesc.getDefaultValue(), backend). }
