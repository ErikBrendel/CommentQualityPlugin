commented;modifiers;parameterAmount;loc;comment;code
false;public;4;20;;@Nonnull @Override public RocksDBCachingPriorityQueueSet<T> create(int keyGroupId, int numKeyGroups, @Nonnull KeyExtractorFunction<T> keyExtractor, @Nonnull PriorityComparator<T> elementPriorityComparator) {     TreeOrderedSetCache orderedSetCache = new TreeOrderedSetCache(DEFAULT_CACHES_SIZE).     return new RocksDBCachingPriorityQueueSet<>(keyGroupId, keyGroupPrefixBytes, db, columnFamilyHandle, byteOrderedElementSerializer, sharedElementOutView, sharedElementInView, writeBatchWrapper, orderedSetCache). }
false;public;2;38;;@Nonnull @Override public <T extends HeapPriorityQueueElement & PriorityComparable & Keyed> KeyGroupedInternalPriorityQueue<T> create(@Nonnull String stateName, @Nonnull TypeSerializer<T> byteOrderedElementSerializer) {     final RocksDBKeyedStateBackend.RocksDbKvStateInfo stateCFHandle = tryRegisterPriorityQueueMetaInfo(stateName, byteOrderedElementSerializer).     final ColumnFamilyHandle columnFamilyHandle = stateCFHandle.columnFamilyHandle.     return new KeyGroupPartitionedPriorityQueue<>(KeyExtractorFunction.forKeyedObjects(), PriorityComparator.forPriorityComparableObjects(), new KeyGroupPartitionedPriorityQueue.PartitionQueueSetFactory<T, RocksDBCachingPriorityQueueSet<T>>() {          @Nonnull         @Override         public RocksDBCachingPriorityQueueSet<T> create(int keyGroupId, int numKeyGroups, @Nonnull KeyExtractorFunction<T> keyExtractor, @Nonnull PriorityComparator<T> elementPriorityComparator) {             TreeOrderedSetCache orderedSetCache = new TreeOrderedSetCache(DEFAULT_CACHES_SIZE).             return new RocksDBCachingPriorityQueueSet<>(keyGroupId, keyGroupPrefixBytes, db, columnFamilyHandle, byteOrderedElementSerializer, sharedElementOutView, sharedElementInView, writeBatchWrapper, orderedSetCache).         }     }, keyGroupRange, numberOfKeyGroups). }
false;private;2;50;;@Nonnull private <T> RocksDBKeyedStateBackend.RocksDbKvStateInfo tryRegisterPriorityQueueMetaInfo(@Nonnull String stateName, @Nonnull TypeSerializer<T> byteOrderedElementSerializer) {     RocksDBKeyedStateBackend.RocksDbKvStateInfo stateInfo = kvStateInformation.get(stateName).     if (stateInfo == null) {         // Currently this class is for timer service and TTL feature is not applicable here,         // so no need to register compact filter when creating column family         final ColumnFamilyHandle columnFamilyHandle = RocksDBOperationUtils.createColumnFamily(stateName, columnFamilyOptionsFactory, this.db).         RegisteredPriorityQueueStateBackendMetaInfo<T> metaInfo = new RegisteredPriorityQueueStateBackendMetaInfo<>(stateName, byteOrderedElementSerializer).         stateInfo = new RocksDBKeyedStateBackend.RocksDbKvStateInfo(columnFamilyHandle, metaInfo).         RocksDBOperationUtils.registerKvStateInformation(kvStateInformation, nativeMetricMonitor, stateName, stateInfo).     } else {         // TODO we implement the simple way of supporting the current functionality, mimicking keyed state         // because this should be reworked in FLINK-9376 and then we should have a common algorithm over         // StateMetaInfoSnapshot that avoids this code duplication.         @SuppressWarnings("unchecked")         RegisteredPriorityQueueStateBackendMetaInfo<T> castedMetaInfo = (RegisteredPriorityQueueStateBackendMetaInfo<T>) stateInfo.metaInfo.         TypeSerializer<T> previousElementSerializer = castedMetaInfo.getPreviousElementSerializer().         if (previousElementSerializer != byteOrderedElementSerializer) {             TypeSerializerSchemaCompatibility<T> compatibilityResult = castedMetaInfo.updateElementSerializer(byteOrderedElementSerializer).             // migrating them. Therefore, here we only check for incompatibility.             if (compatibilityResult.isIncompatible()) {                 throw new FlinkRuntimeException(new StateMigrationException("The new priority queue serializer must not be incompatible.")).             }             // update meta info with new serializer             stateInfo = new RocksDBKeyedStateBackend.RocksDbKvStateInfo(stateInfo.columnFamilyHandle, new RegisteredPriorityQueueStateBackendMetaInfo<>(stateName, byteOrderedElementSerializer)).             kvStateInformation.put(stateName, stateInfo).         }     }     return stateInfo. }
