commented;modifiers;parameterAmount;loc;comment;code
false;public,static;5;33;;public static RocksDB openDB(String path, List<ColumnFamilyDescriptor> stateColumnFamilyDescriptors, List<ColumnFamilyHandle> stateColumnFamilyHandles, ColumnFamilyOptions columnFamilyOptions, DBOptions dbOptions) throws IOException {     List<ColumnFamilyDescriptor> columnFamilyDescriptors = new ArrayList<>(1 + stateColumnFamilyDescriptors.size()).     // we add the required descriptor for the default CF in FIRST position, see     // https://github.com/facebook/rocksdb/wiki/RocksJava-Basics#opening-a-database-with-column-families     columnFamilyDescriptors.add(new ColumnFamilyDescriptor(RocksDB.DEFAULT_COLUMN_FAMILY, columnFamilyOptions)).     columnFamilyDescriptors.addAll(stateColumnFamilyDescriptors).     RocksDB dbRef.     try {         dbRef = RocksDB.open(Preconditions.checkNotNull(dbOptions), Preconditions.checkNotNull(path), columnFamilyDescriptors, stateColumnFamilyHandles).     } catch (RocksDBException e) {         IOUtils.closeQuietly(columnFamilyOptions).         columnFamilyDescriptors.forEach((cfd) -> IOUtils.closeQuietly(cfd.getOptions())).         throw new IOException("Error while opening RocksDB instance.", e).     }     // requested + default CF     Preconditions.checkState(1 + stateColumnFamilyDescriptors.size() == stateColumnFamilyHandles.size(), "Not all requested column family handles have been created").     return dbRef. }
false;public,static;2;7;;public static ColumnFamilyDescriptor createColumnFamilyDescriptor(String stateName, ColumnFamilyOptions columnOptions) {     byte[] nameBytes = stateName.getBytes(ConfigConstants.DEFAULT_CHARSET).     Preconditions.checkState(!Arrays.equals(RocksDB.DEFAULT_COLUMN_FAMILY, nameBytes), "The chosen state name 'default' collides with the name of the default column family!").     return new ColumnFamilyDescriptor(nameBytes, columnOptions). }
false;public,static;2;8;;public static ColumnFamilyHandle createColumnFamily(ColumnFamilyDescriptor columnDescriptor, RocksDB db) {     try {         return db.createColumnFamily(columnDescriptor).     } catch (RocksDBException e) {         IOUtils.closeQuietly(columnDescriptor.getOptions()).         throw new FlinkRuntimeException("Error creating ColumnFamilyHandle.", e).     } }
false;public,static;3;7;;public static ColumnFamilyHandle createColumnFamily(String stateName, Function<String, ColumnFamilyOptions> columnFamilyOptionsFactory, RocksDB db) {     ColumnFamilyOptions options = createColumnFamilyOptions(columnFamilyOptionsFactory, stateName).     return createColumnFamily(createColumnFamilyDescriptor(stateName, options), db). }
false;public,static;1;3;;public static RocksIteratorWrapper getRocksIterator(RocksDB db) {     return new RocksIteratorWrapper(db.newIterator()). }
false;public,static;2;5;;public static RocksIteratorWrapper getRocksIterator(RocksDB db, ColumnFamilyHandle columnFamilyHandle) {     return new RocksIteratorWrapper(db.newIterator(columnFamilyHandle)). }
false;public,static;4;11;;public static void registerKvStateInformation(Map<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation, RocksDBNativeMetricMonitor nativeMetricMonitor, String columnFamilyName, RocksDBKeyedStateBackend.RocksDbKvStateInfo registeredColumn) {     kvStateInformation.put(columnFamilyName, registeredColumn).     if (nativeMetricMonitor != null) {         nativeMetricMonitor.registerColumnFamily(columnFamilyName, registeredColumn.columnFamilyHandle).     } }
true;public,static;5;11;/**  * Creates a state info from a new meta info to use with a k/v state.  */ ;/**  * Creates a state info from a new meta info to use with a k/v state.  */ public static RocksDBKeyedStateBackend.RocksDbKvStateInfo createStateInfo(RegisteredStateMetaInfoBase metaInfoBase, RocksDbTtlCompactFiltersManager ttlCompactFiltersManager, TtlTimeProvider ttlTimeProvider, RocksDB db, Function<String, ColumnFamilyOptions> columnFamilyOptionsFactory) {     ColumnFamilyOptions options = createColumnFamilyOptions(columnFamilyOptionsFactory, metaInfoBase.getName()).     ttlCompactFiltersManager.setAndRegisterCompactFilterIfStateTtl(ttlTimeProvider, metaInfoBase, options).     ColumnFamilyDescriptor columnFamilyDescriptor = createColumnFamilyDescriptor(metaInfoBase.getName(), options).     return new RocksDBKeyedStateBackend.RocksDbKvStateInfo(createColumnFamily(columnFamilyDescriptor, db), metaInfoBase). }
false;public,static;2;6;;public static ColumnFamilyOptions createColumnFamilyOptions(Function<String, ColumnFamilyOptions> columnFamilyOptionsFactory, String stateName) {     // ensure that we use the right merge operator, because other code relies on this     return columnFamilyOptionsFactory.apply(stateName).setMergeOperatorName(MERGE_OPERATOR_NAME). }
false;public,static;2;10;;public static void addColumnFamilyOptionsToCloseLater(List<ColumnFamilyOptions> columnFamilyOptions, ColumnFamilyHandle columnFamilyHandle) {     try {         if (columnFamilyHandle != null && columnFamilyHandle.getDescriptor() != null) {             columnFamilyOptions.add(columnFamilyHandle.getDescriptor().getOptions()).         }     } catch (RocksDBException e) {     // ignore     } }
