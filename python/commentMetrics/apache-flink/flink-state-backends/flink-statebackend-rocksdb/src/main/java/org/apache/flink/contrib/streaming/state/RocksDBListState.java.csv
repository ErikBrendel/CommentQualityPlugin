commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return backend.getKeySerializer(). }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<List<V>> getValueSerializer() {     return valueSerializer. }
false;public;0;4;;@Override public Iterable<V> get() {     return getInternal(). }
false;public;0;10;;@Override public List<V> getInternal() {     try {         byte[] key = serializeCurrentKeyWithGroupAndNamespace().         byte[] valueBytes = backend.db.get(columnFamily, key).         return deserializeList(valueBytes).     } catch (RocksDBException e) {         throw new FlinkRuntimeException("Error while retrieving data from RocksDB", e).     } }
false;private;1;15;;private List<V> deserializeList(byte[] valueBytes) {     if (valueBytes == null) {         return null.     }     dataInputView.setBuffer(valueBytes).     List<V> result = new ArrayList<>().     V next.     while ((next = deserializeNextElement(dataInputView, elementSerializer)) != null) {         result.add(next).     }     return result. }
false;private,static;2;14;;private static <V> V deserializeNextElement(DataInputDeserializer in, TypeSerializer<V> elementSerializer) {     try {         if (in.available() > 0) {             V element = elementSerializer.deserialize(in).             if (in.available() > 0) {                 in.readByte().             }             return element.         }     } catch (IOException e) {         throw new FlinkRuntimeException("Unexpected list element deserialization failure").     }     return null. }
false;public;1;15;;@Override public void add(V value) {     Preconditions.checkNotNull(value, "You cannot add null to a ListState.").     try {         backend.db.merge(columnFamily, writeOptions, serializeCurrentKeyWithGroupAndNamespace(), serializeValue(value, elementSerializer)).     } catch (Exception e) {         throw new FlinkRuntimeException("Error while adding data to RocksDB", e).     } }
false;public;2;30;;@Override public void mergeNamespaces(N target, Collection<N> sources) {     if (sources == null || sources.isEmpty()) {         return.     }     try {         // create the target full-binary-key         setCurrentNamespace(target).         final byte[] targetKey = serializeCurrentKeyWithGroupAndNamespace().         // merge the sources to the target         for (N source : sources) {             if (source != null) {                 setCurrentNamespace(source).                 final byte[] sourceKey = serializeCurrentKeyWithGroupAndNamespace().                 byte[] valueBytes = backend.db.get(columnFamily, sourceKey).                 backend.db.delete(columnFamily, writeOptions, sourceKey).                 if (valueBytes != null) {                     backend.db.merge(columnFamily, writeOptions, targetKey, valueBytes).                 }             }         }     } catch (Exception e) {         throw new FlinkRuntimeException("Error while merging state in RocksDB", e).     } }
false;public;1;4;;@Override public void update(List<V> valueToStore) {     updateInternal(valueToStore). }
false;public;1;18;;@Override public void updateInternal(List<V> values) {     Preconditions.checkNotNull(values, "List of values to add cannot be null.").     clear().     if (!values.isEmpty()) {         try {             backend.db.put(columnFamily, writeOptions, serializeCurrentKeyWithGroupAndNamespace(), serializeValueList(values, elementSerializer, DELIMITER)).         } catch (IOException | RocksDBException e) {             throw new FlinkRuntimeException("Error while updating data to RocksDB", e).         }     } }
false;public;1;16;;@Override public void addAll(List<V> values) {     Preconditions.checkNotNull(values, "List of values to add cannot be null.").     if (!values.isEmpty()) {         try {             backend.db.merge(columnFamily, writeOptions, serializeCurrentKeyWithGroupAndNamespace(), serializeValueList(values, elementSerializer, DELIMITER)).         } catch (IOException | RocksDBException e) {             throw new FlinkRuntimeException("Error while updating data to RocksDB", e).         }     } }
false;public;4;28;;@Override public void migrateSerializedValue(DataInputDeserializer serializedOldValueInput, DataOutputSerializer serializedMigratedValueOutput, TypeSerializer<List<V>> priorSerializer, TypeSerializer<List<V>> newSerializer) throws StateMigrationException {     Preconditions.checkArgument(priorSerializer instanceof ListSerializer).     Preconditions.checkArgument(newSerializer instanceof ListSerializer).     TypeSerializer<V> priorElementSerializer = ((ListSerializer<V>) priorSerializer).getElementSerializer().     TypeSerializer<V> newElementSerializer = ((ListSerializer<V>) newSerializer).getElementSerializer().     try {         while (serializedOldValueInput.available() > 0) {             V element = deserializeNextElement(serializedOldValueInput, priorElementSerializer).             newElementSerializer.serialize(element, serializedMigratedValueOutput).             if (serializedOldValueInput.available() > 0) {                 serializedMigratedValueOutput.write(DELIMITER).             }         }     } catch (Exception e) {         throw new StateMigrationException("Error while trying to migrate RocksDB list state.", e).     } }
false;static;3;12;;@SuppressWarnings("unchecked") static <E, K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, Tuple2<ColumnFamilyHandle, RegisteredKeyValueStateBackendMetaInfo<N, SV>> registerResult, RocksDBKeyedStateBackend<K> backend) {     return (IS) new RocksDBListState<>(registerResult.f0, registerResult.f1.getNamespaceSerializer(), (TypeSerializer<List<E>>) registerResult.f1.getStateSerializer(), (List<E>) stateDesc.getDefaultValue(), backend). }
false;public;1;27;;@Override @Nullable public byte[] filterOrTransform(@Nullable byte[] value) {     if (value == null) {         return null.     }     List<T> result = new ArrayList<>().     DataInputDeserializer in = new DataInputDeserializer(value).     T next.     int prevPosition = 0.     while ((next = deserializeNextElement(in, elementSerializer)) != null) {         T transformedElement = elementTransformer.filterOrTransform(next).         if (transformedElement != null) {             if (transformStrategy == STOP_ON_FIRST_INCLUDED) {                 return Arrays.copyOfRange(value, prevPosition, value.length).             } else {                 result.add(transformedElement).             }         }         prevPosition = in.getPosition().     }     try {         return result.isEmpty() ? null : serializeValueList(result, elementSerializer, DELIMITER).     } catch (IOException e) {         throw new FlinkRuntimeException("Failed to serialize transformed list", e).     } }
false;;3;21;;byte[] serializeValueList(List<T> valueList, TypeSerializer<T> elementSerializer, @SuppressWarnings("SameParameterValue") byte delimiter) throws IOException {     out.clear().     boolean first = true.     for (T value : valueList) {         Preconditions.checkNotNull(value, "You cannot add null to a value list.").         if (first) {             first = false.         } else {             out.write(delimiter).         }         elementSerializer.serialize(value, out).     }     return out.getCopyOfBuffer(). }
