commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Override public boolean hasNext() {     try {         while (nextKey == null && iterator.isValid()) {             final byte[] keyBytes = iterator.key().             final K currentKey = deserializeKey(keyBytes, byteArrayDataInputView).             final int namespaceByteStartPos = byteArrayDataInputView.getPosition().             if (isMatchingNameSpace(keyBytes, namespaceByteStartPos) && !Objects.equals(previousKey, currentKey)) {                 previousKey = currentKey.                 nextKey = currentKey.             }             iterator.next().         }     } catch (Exception e) {         throw new FlinkRuntimeException("Failed to access state [" + state + "]", e).     }     return nextKey != null. }
false;public;0;10;;@Override public K next() {     if (!hasNext()) {         throw new NoSuchElementException("Failed to access state [" + state + "]").     }     K tmpKey = nextKey.     nextKey = null.     return tmpKey. }
false;private;2;7;;private K deserializeKey(byte[] keyBytes, DataInputDeserializer readView) throws IOException {     readView.setBuffer(keyBytes, keyGroupPrefixBytes, keyBytes.length - keyGroupPrefixBytes).     return RocksDBKeySerializationUtils.readKey(keySerializer, byteArrayDataInputView, ambiguousKeyPossible). }
false;private;2;13;;private boolean isMatchingNameSpace(@Nonnull byte[] key, int beginPos) {     final int namespaceBytesLength = namespaceBytes.length.     final int basicLength = namespaceBytesLength + beginPos.     if (key.length >= basicLength) {         for (int i = 0. i < namespaceBytesLength. ++i) {             if (key[beginPos + i] != namespaceBytes[i]) {                 return false.             }         }         return true.     }     return false. }
false;public;0;4;;@Override public void close() {     iterator.close(). }
