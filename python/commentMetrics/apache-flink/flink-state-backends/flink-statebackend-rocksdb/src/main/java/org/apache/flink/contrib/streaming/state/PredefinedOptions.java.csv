commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public DBOptions createDBOptions() {     return new DBOptions().setUseFsync(false). }
false;public;0;4;;@Override public ColumnFamilyOptions createColumnOptions() {     return new ColumnFamilyOptions(). }
false;public;0;8;;@Override public DBOptions createDBOptions() {     return new DBOptions().setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1). }
false;public;0;6;;@Override public ColumnFamilyOptions createColumnOptions() {     return new ColumnFamilyOptions().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true). }
false;public;0;8;;@Override public DBOptions createDBOptions() {     return new DBOptions().setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1). }
false;public;0;23;;@Override public ColumnFamilyOptions createColumnOptions() {     final long blockCacheSize = 256 * 1024 * 1024.     final long blockSize = 128 * 1024.     final long targetFileSize = 256 * 1024 * 1024.     final long writeBufferSize = 64 * 1024 * 1024.     return new ColumnFamilyOptions().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true).setTargetFileSizeBase(targetFileSize).setMaxBytesForLevelBase(4 * targetFileSize).setWriteBufferSize(writeBufferSize).setMinWriteBufferNumberToMerge(3).setMaxWriteBufferNumber(4).setTableFormatConfig(new BlockBasedTableConfig().setBlockCacheSize(blockCacheSize).setBlockSize(blockSize).setFilter(new BloomFilter())). }
false;public;0;7;;@Override public DBOptions createDBOptions() {     return new DBOptions().setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1). }
false;public;0;4;;@Override public ColumnFamilyOptions createColumnOptions() {     return new ColumnFamilyOptions(). }
true;public,abstract;0;1;/**  * Creates the {@link DBOptions}for this pre-defined setting.  *  * @return The pre-defined options object.  */ ;// ------------------------------------------------------------------------ /**  * Creates the {@link DBOptions}for this pre-defined setting.  *  * @return The pre-defined options object.  */ public abstract DBOptions createDBOptions().
true;public,abstract;0;1;/**  * Creates the {@link org.rocksdb.ColumnFamilyOptions}for this pre-defined setting.  *  * @return The pre-defined options object.  */ ;/**  * Creates the {@link org.rocksdb.ColumnFamilyOptions}for this pre-defined setting.  *  * @return The pre-defined options object.  */ public abstract ColumnFamilyOptions createColumnOptions().
