# id;timestamp;commentText;codeText;commentWords;codeWords
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1519061869;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1519568061;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1519829281;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1525123423;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1531145571;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1531419503;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1533212741;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1539939663;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1545300278;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1548411242;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1550581511;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1550681446;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1550863001;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend);1551262917;@deprecated Use {@link #RocksDBStateBackend(StateBackend)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};deprecated,use,link,rocks,dbstate,backend,state,backend,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1519061869;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1519568061;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1519829281;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1525123423;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1531145571;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1531419503;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1531771917;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1531771917;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1531771917;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1533212741;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1539939663;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1545300278;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1548411242;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1550581511;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1550681446;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1550863001;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public StateBackend getCheckpointBackend();1551262917;Gets the state backend that this RocksDB state backend uses to persist_its bytes to.__<p>This RocksDB state backend only implements the RocksDB specific parts, it_relies on the 'CheckpointBackend' to persist the checkpoint and savepoint bytes_streams.;public StateBackend getCheckpointBackend() {_		return checkpointStreamBackend__	};gets,the,state,backend,that,this,rocks,db,state,backend,uses,to,persist,its,bytes,to,p,this,rocks,db,state,backend,only,implements,the,rocks,db,specific,parts,it,relies,on,the,checkpoint,backend,to,persist,the,checkpoint,and,savepoint,bytes,streams;public,state,backend,get,checkpoint,backend,return,checkpoint,stream,backend
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1519061869;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1519568061;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1519829281;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1525123423;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1531145571;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1531419503;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1533212741;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1539939663;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1545300278;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1548411242;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1550581511;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1550681446;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1550863001;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri) throws IOException;1551262917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri) throws IOException {_		this(new Path(checkpointDataUri).toUri())__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1519061869;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		if (original.enableIncrementalCheckpointing != null) {_			this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing__		}_		else {_			this.enableIncrementalCheckpointing =_					config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS)__		}__		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,if,original,enable,incremental,checkpointing,null,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,else,this,enable,incremental,checkpointing,config,get,boolean,checkpointing,options,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1519568061;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1519829281;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1525123423;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1531145571;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(PRIORITY_QUEUE_STATE_TYPE.key(), "")___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,key,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1531419503;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(PRIORITY_QUEUE_STATE_TYPE.key(), "")___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(CheckpointingOptions.ROCKSDB_LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,key,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,checkpointing,options,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1531771917;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_IMPL.key(), "")___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,key,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1531771917;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_IMPL.key(), "")___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,key,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1531771917;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_IMPL)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1533212741;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1539939663;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1545300278;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfRestoringThreads == UNDEFINED_NUMBER_OF_RESTORING_THREADS) {_			this.numberOfRestoringThreads = config.getInteger(RocksDBOptions.CHECKPOINT_RESTORE_THREAD_NUM)__		} else {_			this.numberOfRestoringThreads = original.numberOfRestoringThreads__		}__		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,restoring,threads,this,number,of,restoring,threads,config,get,integer,rocks,dboptions,else,this,number,of,restoring,threads,original,number,of,restoring,threads,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1548411242;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS) {_			this.numberOfTransferingThreads = config.getInteger(CHECKPOINT_TRANSFER_THREAD_NUM)__		} else {_			this.numberOfTransferingThreads = original.numberOfTransferingThreads__		}__		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,transfering,threads,this,number,of,transfering,threads,config,get,integer,else,this,number,of,transfering,threads,original,number,of,transfering,threads,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config);1550581511;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS) {_			this.numberOfTransferingThreads = config.getInteger(CHECKPOINT_TRANSFER_THREAD_NUM)__		} else {_			this.numberOfTransferingThreads = original.numberOfTransferingThreads__		}__		this.enableTtlCompactionFilter = original.enableTtlCompactionFilter_			.resolveUndefined(config.getBoolean(TTL_COMPACT_FILTER_ENABLED))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,transfering,threads,this,number,of,transfering,threads,config,get,integer,else,this,number,of,transfering,threads,original,number,of,transfering,threads,this,enable,ttl,compaction,filter,original,enable,ttl,compaction,filter,resolve,undefined,config,get,boolean,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> public String[] getDbStoragePaths();1519061869;@return The configured DB storage paths, or null, if none were configured.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};return,the,configured,db,storage,paths,or,null,if,none,were,configured;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1519568061;@return The configured DB storage paths, or null, if none were configured.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};return,the,configured,db,storage,paths,or,null,if,none,were,configured;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1519829281;@return The configured DB storage paths, or null, if none were configured.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};return,the,configured,db,storage,paths,or,null,if,none,were,configured;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1525123423;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1531145571;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1531419503;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1531771917;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1531771917;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1531771917;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1533212741;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1539939663;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1545300278;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1548411242;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1550581511;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1550681446;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1550863001;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> public String[] getDbStoragePaths();1551262917;Gets the configured local DB storage paths, or null, if none were configured.__<p>Under these directories on the TaskManager, RocksDB stores its SST files and_metadata files. These directories do not need to be persistent, they can be ephermeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.;public String[] getDbStoragePaths() {_		if (localRocksDbDirectories == null) {_			return null__		} else {_			String[] paths = new String[localRocksDbDirectories.length]__			for (int i = 0_ i < paths.length_ i++) {_				paths[i] = localRocksDbDirectories[i].toString()__			}_			return paths__		}_	};gets,the,configured,local,db,storage,paths,or,null,if,none,were,configured,p,under,these,directories,on,the,task,manager,rocks,db,stores,its,sst,files,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephermeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories;public,string,get,db,storage,paths,if,local,rocks,db,directories,null,return,null,else,string,paths,new,string,local,rocks,db,directories,length,for,int,i,0,i,paths,length,i,paths,i,local,rocks,db,directories,i,to,string,return,paths
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1519061869;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1519568061;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1519829281;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1525123423;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1531145571;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1531419503;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1531771917;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1531771917;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1531771917;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1533212741;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1539939663;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1545300278;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1548411242;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config);1550581511;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config) {_		return new RocksDBStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,return,new,rocks,dbstate,backend,this,config
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1519568061;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1519829281;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1525123423;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1531145571;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1531419503;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1533212741;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1539939663;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1545300278;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfRestoringThreads = UNDEFINED_NUMBER_OF_RESTORING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,restoring,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1548411242;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfTransferingThreads = UNDEFINED_NUMBER_OF_TRANSFERING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,transfering,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1550581511;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfTransferingThreads = UNDEFINED_NUMBER_OF_TRANSFERING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__		this.enableTtlCompactionFilter = TernaryBoolean.UNDEFINED__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,transfering,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options,this,enable,ttl,compaction,filter,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1550681446;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfTransferingThreads = UNDEFINED_NUMBER_OF_TRANSFERING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__		this.enableTtlCompactionFilter = TernaryBoolean.UNDEFINED__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,transfering,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options,this,enable,ttl,compaction,filter,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1550863001;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfTransferingThreads = UNDEFINED_NUMBER_OF_TRANSFERING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__		this.enableTtlCompactionFilter = TernaryBoolean.UNDEFINED__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,transfering,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options,this,enable,ttl,compaction,filter,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing);1551262917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled.;public RocksDBStateBackend(StateBackend checkpointStreamBackend, TernaryBoolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__		this.numberOfTransferingThreads = UNDEFINED_NUMBER_OF_TRANSFERING_THREADS__		_		this.priorityQueueStateType = PriorityQueueStateType.HEAP__		this.defaultMetricOptions = new RocksDBNativeMetricOptions()__		this.enableTtlCompactionFilter = TernaryBoolean.UNDEFINED__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,ternary,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing,this,number,of,transfering,threads,this,priority,queue,state,type,priority,queue,state,type,heap,this,default,metric,options,new,rocks,dbnative,metric,options,this,enable,ttl,compaction,filter,ternary,boolean,undefined
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1519061869;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1519568061;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1519829281;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1525123423;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1531145571;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1531419503;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1531771917;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1531771917;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1531771917;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1533212741;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1539939663;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1545300278;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1548411242;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1550581511;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1550681446;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1550863001;Sets the predefined options for RocksDB.__<p>If a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public void setPredefinedOptions(PredefinedOptions options);1551262917;Sets the predefined options for RocksDB.__<p>If user-configured options within {@link RocksDBConfigurableOptions} is set (through flink-conf.yaml)_or a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the here specified_predefined options and customized options.__@param options The options to set (must not be null).;public void setPredefinedOptions(PredefinedOptions options) {_		predefinedOptions = checkNotNull(options)__	};sets,the,predefined,options,for,rocks,db,p,if,user,configured,options,within,link,rocks,dbconfigurable,options,is,set,through,flink,conf,yaml,or,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,here,specified,predefined,options,and,customized,options,param,options,the,options,to,set,must,not,be,null;public,void,set,predefined,options,predefined,options,options,predefined,options,check,not,null,options
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1519061869;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1519568061;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1519829281;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1525123423;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1531145571;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1531419503;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1531771917;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1531771917;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1531771917;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1533212741;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1539939663;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1545300278;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1548411242;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1550581511;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1550681446;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1550863001;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = predefinedOptions.createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> public ColumnFamilyOptions getColumnOptions();1551262917;Gets the RocksDB {@link ColumnFamilyOptions} to be used for all RocksDB instances.;public ColumnFamilyOptions getColumnOptions() {_		_		ColumnFamilyOptions opt = getPredefinedOptions().createColumnOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createColumnOptions(opt)__		}__		return opt__	};gets,the,rocks,db,link,column,family,options,to,be,used,for,all,rocks,db,instances;public,column,family,options,get,column,options,column,family,options,opt,get,predefined,options,create,column,options,if,options,factory,null,opt,options,factory,create,column,options,opt,return,opt
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1519061869;@deprecated Use {@link #RocksDBStateBackend(StateBackend, boolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__		this.enableIncrementalCheckpointing = enableIncrementalCheckpointing__	};deprecated,use,link,rocks,dbstate,backend,state,backend,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend,this,enable,incremental,checkpointing,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1519568061;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1519829281;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1525123423;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1531145571;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1531419503;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1531771917;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1533212741;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1539939663;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1545300278;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1548411242;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1550581511;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1550681446;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1550863001;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> @Deprecated 	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing);1551262917;@deprecated Use {@link #RocksDBStateBackend(StateBackend, TernaryBoolean)} instead.;@Deprecated_	public RocksDBStateBackend(AbstractStateBackend checkpointStreamBackend, boolean enableIncrementalCheckpointing) {_		this(checkpointStreamBackend, TernaryBoolean.fromBoolean(enableIncrementalCheckpointing))__	};deprecated,use,link,rocks,dbstate,backend,state,backend,ternary,boolean,instead;deprecated,public,rocks,dbstate,backend,abstract,state,backend,checkpoint,stream,backend,boolean,enable,incremental,checkpointing,this,checkpoint,stream,backend,ternary,boolean,from,boolean,enable,incremental,checkpointing
RocksDBStateBackend -> public void setDbStoragePath(String path);1519061869;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1519568061;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1519829281;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1525123423;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1531145571;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1531419503;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1531771917;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1531771917;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1531771917;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1533212741;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1539939663;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1545300278;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1548411242;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1550581511;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1550681446;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1550863001;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public void setDbStoragePath(String path);1551262917;Sets the path where the RocksDB local database files should be stored on the local_file system. Setting this path overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param path The path where the local RocksDB database files are stored.;public void setDbStoragePath(String path) {_		setDbStoragePaths(path == null ? null : new String[] { path })__	};sets,the,path,where,the,rocks,db,local,database,files,should,be,stored,on,the,local,file,system,setting,this,path,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,path,the,path,where,the,local,rocks,db,database,files,are,stored;public,void,set,db,storage,path,string,path,set,db,storage,paths,path,null,null,new,string,path
RocksDBStateBackend -> public boolean isTtlCompactionFilterEnabled();1550863001;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isTtlCompactionFilterEnabled() {_		return enableTtlCompactionFilter.getOrDefault(TTL_COMPACT_FILTER_ENABLED.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,ttl,compaction,filter,enabled,return,enable,ttl,compaction,filter,get,or,default,default,value
RocksDBStateBackend -> public boolean isTtlCompactionFilterEnabled();1551262917;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isTtlCompactionFilterEnabled() {_		return enableTtlCompactionFilter.getOrDefault(TTL_COMPACT_FILTER_ENABLED.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,ttl,compaction,filter,enabled,return,enable,ttl,compaction,filter,get,or,default,default,value
RocksDBStateBackend -> public int getNumberOfTransferingThreads();1548411242;Gets the number of threads used to transfer files while snapshotting/restoring.;public int getNumberOfTransferingThreads() {_		return numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS ?_			CHECKPOINT_TRANSFER_THREAD_NUM.defaultValue() : numberOfTransferingThreads__	};gets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,int,get,number,of,transfering,threads,return,number,of,transfering,threads,default,value,number,of,transfering,threads
RocksDBStateBackend -> public int getNumberOfTransferingThreads();1550581511;Gets the number of threads used to transfer files while snapshotting/restoring.;public int getNumberOfTransferingThreads() {_		return numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS ?_			CHECKPOINT_TRANSFER_THREAD_NUM.defaultValue() : numberOfTransferingThreads__	};gets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,int,get,number,of,transfering,threads,return,number,of,transfering,threads,default,value,number,of,transfering,threads
RocksDBStateBackend -> public int getNumberOfTransferingThreads();1550681446;Gets the number of threads used to transfer files while snapshotting/restoring.;public int getNumberOfTransferingThreads() {_		return numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS ?_			CHECKPOINT_TRANSFER_THREAD_NUM.defaultValue() : numberOfTransferingThreads__	};gets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,int,get,number,of,transfering,threads,return,number,of,transfering,threads,default,value,number,of,transfering,threads
RocksDBStateBackend -> public int getNumberOfTransferingThreads();1550863001;Gets the number of threads used to transfer files while snapshotting/restoring.;public int getNumberOfTransferingThreads() {_		return numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS ?_			CHECKPOINT_TRANSFER_THREAD_NUM.defaultValue() : numberOfTransferingThreads__	};gets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,int,get,number,of,transfering,threads,return,number,of,transfering,threads,default,value,number,of,transfering,threads
RocksDBStateBackend -> public int getNumberOfTransferingThreads();1551262917;Gets the number of threads used to transfer files while snapshotting/restoring.;public int getNumberOfTransferingThreads() {_		return numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS ?_			CHECKPOINT_TRANSFER_THREAD_NUM.defaultValue() : numberOfTransferingThreads__	};gets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,int,get,number,of,transfering,threads,return,number,of,transfering,threads,default,value,number,of,transfering,threads
RocksDBStateBackend -> public OptionsFactory getOptions();1519061869;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1519568061;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1519829281;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1525123423;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1531145571;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1531419503;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1531771917;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1531771917;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1531771917;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1533212741;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1539939663;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1545300278;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1548411242;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1550581511;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1550681446;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1550863001;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> public OptionsFactory getOptions();1551262917;Gets the options factory that lazily creates the RocksDB options.__@return The options factory.;public OptionsFactory getOptions() {_		return optionsFactory__	};gets,the,options,factory,that,lazily,creates,the,rocks,db,options,return,the,options,factory;public,options,factory,get,options,return,options,factory
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader);1550681446;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config The configuration._@param classLoader The class loader._@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new RocksDBStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,param,class,loader,the,class,loader,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,class,loader,class,loader,return,new,rocks,dbstate,backend,this,config,class,loader
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader);1550863001;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config The configuration._@param classLoader The class loader._@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new RocksDBStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,param,class,loader,the,class,loader,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,class,loader,class,loader,return,new,rocks,dbstate,backend,this,config,class,loader
RocksDBStateBackend -> @Override 	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader);1551262917;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not yet specified in this state backend.__@param config The configuration._@param classLoader The class loader._@return The re-configured variant of the state backend;@Override_	public RocksDBStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new RocksDBStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,yet,specified,in,this,state,backend,param,config,the,configuration,param,class,loader,the,class,loader,return,the,re,configured,variant,of,the,state,backend;override,public,rocks,dbstate,backend,configure,configuration,config,class,loader,class,loader,return,new,rocks,dbstate,backend,this,config,class,loader
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1519061869;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1519568061;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1519829281;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1525123423;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1531145571;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1531419503;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1531771917;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1531771917;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1531771917;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1533212741;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1539939663;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1545300278;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1548411242;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1550581511;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1550681446;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1550863001;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If a user-defined  options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,return,predefined,options
RocksDBStateBackend -> public PredefinedOptions getPredefinedOptions();1551262917;Gets the currently set predefined options for RocksDB._The default options (if nothing was set via {@link #setPredefinedOptions(PredefinedOptions)})_are {@link PredefinedOptions#DEFAULT}.__<p>If user-configured options within {@link RocksDBConfigurableOptions} is set (through flink-conf.yaml)_of a user-defined options factory is set (via {@link #setOptions(OptionsFactory)}),_then the options from the factory are applied on top of the predefined and customized options.__@return The currently set predefined options for RocksDB.;public PredefinedOptions getPredefinedOptions() {_		if (predefinedOptions == null) {_			predefinedOptions = PredefinedOptions.DEFAULT__		}_		return predefinedOptions__	};gets,the,currently,set,predefined,options,for,rocks,db,the,default,options,if,nothing,was,set,via,link,set,predefined,options,predefined,options,are,link,predefined,options,default,p,if,user,configured,options,within,link,rocks,dbconfigurable,options,is,set,through,flink,conf,yaml,of,a,user,defined,options,factory,is,set,via,link,set,options,options,factory,then,the,options,from,the,factory,are,applied,on,top,of,the,predefined,and,customized,options,return,the,currently,set,predefined,options,for,rocks,db;public,predefined,options,get,predefined,options,if,predefined,options,null,predefined,options,predefined,options,default,return,predefined,options
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1525123423;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531145571;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531419503;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1533212741;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1539939663;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1545300278;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1548411242;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550581511;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550681446;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550863001;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1551262917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1519061869;Sets the paths across which the local RocksDB database files are distributed on the local_file system. Setting these paths overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			Path[] pp = new Path[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				if (paths[i] == null) {_					throw new IllegalArgumentException("null path")__				}__				pp[i] = new Path(paths[i])__				String scheme = pp[i].toUri().getScheme()__				if (scheme != null && !scheme.equalsIgnoreCase("file")) {_					throw new IllegalArgumentException("Path " + paths[i] + " has a non local scheme")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,paths,across,which,the,local,rocks,db,database,files,are,distributed,on,the,local,file,system,setting,these,paths,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,path,pp,new,path,paths,length,for,int,i,0,i,paths,length,i,if,paths,i,null,throw,new,illegal,argument,exception,null,path,pp,i,new,path,paths,i,string,scheme,pp,i,to,uri,get,scheme,if,scheme,null,scheme,equals,ignore,case,file,throw,new,illegal,argument,exception,path,paths,i,has,a,non,local,scheme,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1519568061;Sets the paths across which the local RocksDB database files are distributed on the local_file system. Setting these paths overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			Path[] pp = new Path[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				if (paths[i] == null) {_					throw new IllegalArgumentException("null path")__				}__				pp[i] = new Path(paths[i])__				String scheme = pp[i].toUri().getScheme()__				if (scheme != null && !scheme.equalsIgnoreCase("file")) {_					throw new IllegalArgumentException("Path " + paths[i] + " has a non local scheme")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,paths,across,which,the,local,rocks,db,database,files,are,distributed,on,the,local,file,system,setting,these,paths,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,path,pp,new,path,paths,length,for,int,i,0,i,paths,length,i,if,paths,i,null,throw,new,illegal,argument,exception,null,path,pp,i,new,path,paths,i,string,scheme,pp,i,to,uri,get,scheme,if,scheme,null,scheme,equals,ignore,case,file,throw,new,illegal,argument,exception,path,paths,i,has,a,non,local,scheme,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1519829281;Sets the paths across which the local RocksDB database files are distributed on the local_file system. Setting these paths overrides the default behavior, where the_files are stored across the configured temp directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			Path[] pp = new Path[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				if (paths[i] == null) {_					throw new IllegalArgumentException("null path")__				}__				pp[i] = new Path(paths[i])__				String scheme = pp[i].toUri().getScheme()__				if (scheme != null && !scheme.equalsIgnoreCase("file")) {_					throw new IllegalArgumentException("Path " + paths[i] + " has a non local scheme")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,paths,across,which,the,local,rocks,db,database,files,are,distributed,on,the,local,file,system,setting,these,paths,overrides,the,default,behavior,where,the,files,are,stored,across,the,configured,temp,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,path,pp,new,path,paths,length,for,int,i,0,i,paths,length,i,if,paths,i,null,throw,new,illegal,argument,exception,null,path,pp,i,new,path,paths,i,string,scheme,pp,i,to,uri,get,scheme,if,scheme,null,scheme,equals,ignore,case,file,throw,new,illegal,argument,exception,path,paths,i,has,a,non,local,scheme,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1525123423;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1531145571;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1531419503;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1531771917;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1531771917;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1531771917;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1533212741;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1539939663;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1545300278;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1548411242;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1550581511;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1550681446;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1550863001;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void setDbStoragePaths(String... paths);1551262917;Sets the directories in which the local RocksDB database puts its files (like SST and_metadata files). These directories do not need to be persistent, they can be ephemeral,_meaning that they are lost on a machine failure, because state in RocksDB is persisted_in checkpoints.__<p>If nothing is configured, these directories default to the TaskManager's local_temporary file directories.__<p>Each distinct state will be stored in one path, but when the state backend creates_multiple states, they will store their files on different paths.__<p>Passing {@code null} to this function restores the default behavior, where the configured_temp directories will be used.__@param paths The paths across which the local RocksDB database files will be spread.;public void setDbStoragePaths(String... paths) {_		if (paths == null) {_			localRocksDbDirectories = null__		}_		else if (paths.length == 0) {_			throw new IllegalArgumentException("empty paths")__		}_		else {_			File[] pp = new File[paths.length]___			for (int i = 0_ i < paths.length_ i++) {_				final String rawPath = paths[i]__				final String path___				if (rawPath == null) {_					throw new IllegalArgumentException("null path")__				}_				else {_					_					URI uri = null__					try {_						uri = new Path(rawPath).toUri()__					}_					catch (Exception e) {_						_					}__					if (uri != null && uri.getScheme() != null) {_						if ("file".equalsIgnoreCase(uri.getScheme())) {_							path = uri.getPath()__						}_						else {_							throw new IllegalArgumentException("Path " + rawPath + " has a non-local scheme")__						}_					}_					else {_						path = rawPath__					}_				}__				pp[i] = new File(path)__				if (!pp[i].isAbsolute()) {_					throw new IllegalArgumentException("Relative paths are not supported")__				}_			}__			localRocksDbDirectories = pp__		}_	};sets,the,directories,in,which,the,local,rocks,db,database,puts,its,files,like,sst,and,metadata,files,these,directories,do,not,need,to,be,persistent,they,can,be,ephemeral,meaning,that,they,are,lost,on,a,machine,failure,because,state,in,rocks,db,is,persisted,in,checkpoints,p,if,nothing,is,configured,these,directories,default,to,the,task,manager,s,local,temporary,file,directories,p,each,distinct,state,will,be,stored,in,one,path,but,when,the,state,backend,creates,multiple,states,they,will,store,their,files,on,different,paths,p,passing,code,null,to,this,function,restores,the,default,behavior,where,the,configured,temp,directories,will,be,used,param,paths,the,paths,across,which,the,local,rocks,db,database,files,will,be,spread;public,void,set,db,storage,paths,string,paths,if,paths,null,local,rocks,db,directories,null,else,if,paths,length,0,throw,new,illegal,argument,exception,empty,paths,else,file,pp,new,file,paths,length,for,int,i,0,i,paths,length,i,final,string,raw,path,paths,i,final,string,path,if,raw,path,null,throw,new,illegal,argument,exception,null,path,else,uri,uri,null,try,uri,new,path,raw,path,to,uri,catch,exception,e,if,uri,null,uri,get,scheme,null,if,file,equals,ignore,case,uri,get,scheme,path,uri,get,path,else,throw,new,illegal,argument,exception,path,raw,path,has,a,non,local,scheme,else,path,raw,path,pp,i,new,file,path,if,pp,i,is,absolute,throw,new,illegal,argument,exception,relative,paths,are,not,supported,local,rocks,db,directories,pp
RocksDBStateBackend -> public void enableTtlCompactionFilter();1550581511;Enable compaction filter to cleanup state with TTL is enabled.__<p>Note: User can still decide in state TTL configuration in state descriptor_whether the filter is active for particular state or not.;public void enableTtlCompactionFilter() {_		enableTtlCompactionFilter = TernaryBoolean.TRUE__	};enable,compaction,filter,to,cleanup,state,with,ttl,is,enabled,p,note,user,can,still,decide,in,state,ttl,configuration,in,state,descriptor,whether,the,filter,is,active,for,particular,state,or,not;public,void,enable,ttl,compaction,filter,enable,ttl,compaction,filter,ternary,boolean,true
RocksDBStateBackend -> public void enableTtlCompactionFilter();1550681446;Enable compaction filter to cleanup state with TTL is enabled.__<p>Note: User can still decide in state TTL configuration in state descriptor_whether the filter is active for particular state or not.;public void enableTtlCompactionFilter() {_		enableTtlCompactionFilter = TernaryBoolean.TRUE__	};enable,compaction,filter,to,cleanup,state,with,ttl,is,enabled,p,note,user,can,still,decide,in,state,ttl,configuration,in,state,descriptor,whether,the,filter,is,active,for,particular,state,or,not;public,void,enable,ttl,compaction,filter,enable,ttl,compaction,filter,ternary,boolean,true
RocksDBStateBackend -> public void enableTtlCompactionFilter();1550863001;Enable compaction filter to cleanup state with TTL is enabled.__<p>Note: User can still decide in state TTL configuration in state descriptor_whether the filter is active for particular state or not.;public void enableTtlCompactionFilter() {_		enableTtlCompactionFilter = TernaryBoolean.TRUE__	};enable,compaction,filter,to,cleanup,state,with,ttl,is,enabled,p,note,user,can,still,decide,in,state,ttl,configuration,in,state,descriptor,whether,the,filter,is,active,for,particular,state,or,not;public,void,enable,ttl,compaction,filter,enable,ttl,compaction,filter,ternary,boolean,true
RocksDBStateBackend -> public void enableTtlCompactionFilter();1551262917;Enable compaction filter to cleanup state with TTL is enabled.__<p>Note: User can still decide in state TTL configuration in state descriptor_whether the filter is active for particular state or not.;public void enableTtlCompactionFilter() {_		enableTtlCompactionFilter = TernaryBoolean.TRUE__	};enable,compaction,filter,to,cleanup,state,with,ttl,is,enabled,p,note,user,can,still,decide,in,state,ttl,configuration,in,state,descriptor,whether,the,filter,is,active,for,particular,state,or,not;public,void,enable,ttl,compaction,filter,enable,ttl,compaction,filter,ternary,boolean,true
RocksDBStateBackend -> public DBOptions getDbOptions();1519061869;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1519568061;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1519829281;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1525123423;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1531145571;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1531419503;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1531771917;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1531771917;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1531771917;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1533212741;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1539939663;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1545300278;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1548411242;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1550581511;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1550681446;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1550863001;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = predefinedOptions.createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public DBOptions getDbOptions();1551262917;Gets the RocksDB {@link DBOptions} to be used for all RocksDB instances.;public DBOptions getDbOptions() {_		_		DBOptions opt = getPredefinedOptions().createDBOptions()___		_		if (optionsFactory != null) {_			opt = optionsFactory.createDBOptions(opt)__		}__		_		opt = opt.setCreateIfMissing(true)___		return opt__	};gets,the,rocks,db,link,dboptions,to,be,used,for,all,rocks,db,instances;public,dboptions,get,db,options,dboptions,opt,get,predefined,options,create,dboptions,if,options,factory,null,opt,options,factory,create,dboptions,opt,opt,opt,set,create,if,missing,true,return,opt
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1519061869;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1519568061;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1519829281;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1525123423;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1531145571;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1531419503;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1531771917;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1531771917;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1531771917;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1533212741;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1539939663;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1545300278;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1548411242;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1550581511;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1550681446;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1550863001;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setOptions(OptionsFactory optionsFactory);1551262917;Sets {@link org.rocksdb.Options} for the RocksDB instances._Because the options are not serializable and hold native code references,_they must be specified through a factory.__<p>The options created by the factory here are applied on top of the pre-defined_options profile selected via {@link #setPredefinedOptions(PredefinedOptions)}._If the pre-defined options profile is the default_({@link PredefinedOptions#DEFAULT}), then the factory fully controls the RocksDB_options.__@param optionsFactory The options factory that lazily creates the RocksDB options.;public void setOptions(OptionsFactory optionsFactory) {_		this.optionsFactory = optionsFactory__	};sets,link,org,rocksdb,options,for,the,rocks,db,instances,because,the,options,are,not,serializable,and,hold,native,code,references,they,must,be,specified,through,a,factory,p,the,options,created,by,the,factory,here,are,applied,on,top,of,the,pre,defined,options,profile,selected,via,link,set,predefined,options,predefined,options,if,the,pre,defined,options,profile,is,the,default,link,predefined,options,default,then,the,factory,fully,controls,the,rocks,db,options,param,options,factory,the,options,factory,that,lazily,creates,the,rocks,db,options;public,void,set,options,options,factory,options,factory,this,options,factory,options,factory
RocksDBStateBackend -> public void setNumberOfTransferingThreads(int numberOfTransferingThreads);1548411242;Sets the number of threads used to transfer files while snapshotting/restoring.__@param numberOfTransferingThreads The number of threads used to transfer files while snapshotting/restoring.;public void setNumberOfTransferingThreads(int numberOfTransferingThreads) {_		Preconditions.checkArgument(numberOfTransferingThreads > 0,_			"The number of threads used to transfer files in RocksDBStateBackend should be greater than zero.")__		this.numberOfTransferingThreads = numberOfTransferingThreads__	};sets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring,param,number,of,transfering,threads,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,void,set,number,of,transfering,threads,int,number,of,transfering,threads,preconditions,check,argument,number,of,transfering,threads,0,the,number,of,threads,used,to,transfer,files,in,rocks,dbstate,backend,should,be,greater,than,zero,this,number,of,transfering,threads,number,of,transfering,threads
RocksDBStateBackend -> public void setNumberOfTransferingThreads(int numberOfTransferingThreads);1550581511;Sets the number of threads used to transfer files while snapshotting/restoring.__@param numberOfTransferingThreads The number of threads used to transfer files while snapshotting/restoring.;public void setNumberOfTransferingThreads(int numberOfTransferingThreads) {_		Preconditions.checkArgument(numberOfTransferingThreads > 0,_			"The number of threads used to transfer files in RocksDBStateBackend should be greater than zero.")__		this.numberOfTransferingThreads = numberOfTransferingThreads__	};sets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring,param,number,of,transfering,threads,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,void,set,number,of,transfering,threads,int,number,of,transfering,threads,preconditions,check,argument,number,of,transfering,threads,0,the,number,of,threads,used,to,transfer,files,in,rocks,dbstate,backend,should,be,greater,than,zero,this,number,of,transfering,threads,number,of,transfering,threads
RocksDBStateBackend -> public void setNumberOfTransferingThreads(int numberOfTransferingThreads);1550681446;Sets the number of threads used to transfer files while snapshotting/restoring.__@param numberOfTransferingThreads The number of threads used to transfer files while snapshotting/restoring.;public void setNumberOfTransferingThreads(int numberOfTransferingThreads) {_		Preconditions.checkArgument(numberOfTransferingThreads > 0,_			"The number of threads used to transfer files in RocksDBStateBackend should be greater than zero.")__		this.numberOfTransferingThreads = numberOfTransferingThreads__	};sets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring,param,number,of,transfering,threads,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,void,set,number,of,transfering,threads,int,number,of,transfering,threads,preconditions,check,argument,number,of,transfering,threads,0,the,number,of,threads,used,to,transfer,files,in,rocks,dbstate,backend,should,be,greater,than,zero,this,number,of,transfering,threads,number,of,transfering,threads
RocksDBStateBackend -> public void setNumberOfTransferingThreads(int numberOfTransferingThreads);1550863001;Sets the number of threads used to transfer files while snapshotting/restoring.__@param numberOfTransferingThreads The number of threads used to transfer files while snapshotting/restoring.;public void setNumberOfTransferingThreads(int numberOfTransferingThreads) {_		Preconditions.checkArgument(numberOfTransferingThreads > 0,_			"The number of threads used to transfer files in RocksDBStateBackend should be greater than zero.")__		this.numberOfTransferingThreads = numberOfTransferingThreads__	};sets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring,param,number,of,transfering,threads,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,void,set,number,of,transfering,threads,int,number,of,transfering,threads,preconditions,check,argument,number,of,transfering,threads,0,the,number,of,threads,used,to,transfer,files,in,rocks,dbstate,backend,should,be,greater,than,zero,this,number,of,transfering,threads,number,of,transfering,threads
RocksDBStateBackend -> public void setNumberOfTransferingThreads(int numberOfTransferingThreads);1551262917;Sets the number of threads used to transfer files while snapshotting/restoring.__@param numberOfTransferingThreads The number of threads used to transfer files while snapshotting/restoring.;public void setNumberOfTransferingThreads(int numberOfTransferingThreads) {_		Preconditions.checkArgument(numberOfTransferingThreads > 0,_			"The number of threads used to transfer files in RocksDBStateBackend should be greater than zero.")__		this.numberOfTransferingThreads = numberOfTransferingThreads__	};sets,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring,param,number,of,transfering,threads,the,number,of,threads,used,to,transfer,files,while,snapshotting,restoring;public,void,set,number,of,transfering,threads,int,number,of,transfering,threads,preconditions,check,argument,number,of,transfering,threads,0,the,number,of,threads,used,to,transfer,files,in,rocks,dbstate,backend,should,be,greater,than,zero,this,number,of,transfering,threads,number,of,transfering,threads
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519061869;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519568061;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519829281;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1525123423;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531145571;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531419503;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1533212741;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1539939663;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1545300278;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1548411242;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550581511;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550681446;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1550863001;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1551262917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(String checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new Path(checkpointDataUri).toUri(), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,string,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,path,checkpoint,data,uri,to,uri,enable,incremental,checkpointing
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader);1550681446;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration._@param classLoader The class loader.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config, classLoader) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS) {_			this.numberOfTransferingThreads = config.getInteger(CHECKPOINT_TRANSFER_THREAD_NUM)__		} else {_			this.numberOfTransferingThreads = original.numberOfTransferingThreads__		}__		this.enableTtlCompactionFilter = original.enableTtlCompactionFilter_			.resolveUndefined(config.getBoolean(TTL_COMPACT_FILTER_ENABLED))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration,param,class,loader,the,class,loader;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,class,loader,class,loader,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,class,loader,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,transfering,threads,this,number,of,transfering,threads,config,get,integer,else,this,number,of,transfering,threads,original,number,of,transfering,threads,this,enable,ttl,compaction,filter,original,enable,ttl,compaction,filter,resolve,undefined,config,get,boolean,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader);1550863001;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration._@param classLoader The class loader.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config, classLoader) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS) {_			this.numberOfTransferingThreads = config.getInteger(CHECKPOINT_TRANSFER_THREAD_NUM)__		} else {_			this.numberOfTransferingThreads = original.numberOfTransferingThreads__		}__		this.enableTtlCompactionFilter = original.enableTtlCompactionFilter_			.resolveUndefined(config.getBoolean(TTL_COMPACT_FILTER_ENABLED))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions__		this.optionsFactory = original.optionsFactory__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration,param,class,loader,the,class,loader;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,class,loader,class,loader,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,class,loader,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,transfering,threads,this,number,of,transfering,threads,config,get,integer,else,this,number,of,transfering,threads,original,number,of,transfering,threads,this,enable,ttl,compaction,filter,original,enable,ttl,compaction,filter,resolve,undefined,config,get,boolean,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,this,options,factory,original,options,factory
RocksDBStateBackend -> private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader);1551262917;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure._@param config The configuration._@param classLoader The class loader.;private RocksDBStateBackend(RocksDBStateBackend original, Configuration config, ClassLoader classLoader) {_		_		final StateBackend originalStreamBackend = original.checkpointStreamBackend__		this.checkpointStreamBackend = originalStreamBackend instanceof ConfigurableStateBackend ?_				((ConfigurableStateBackend) originalStreamBackend).configure(config, classLoader) :_				originalStreamBackend___		_		this.enableIncrementalCheckpointing = original.enableIncrementalCheckpointing.resolveUndefined(_			config.getBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS))___		if (original.numberOfTransferingThreads == UNDEFINED_NUMBER_OF_TRANSFERING_THREADS) {_			this.numberOfTransferingThreads = config.getInteger(CHECKPOINT_TRANSFER_THREAD_NUM)__		} else {_			this.numberOfTransferingThreads = original.numberOfTransferingThreads__		}__		this.enableTtlCompactionFilter = original.enableTtlCompactionFilter_			.resolveUndefined(config.getBoolean(TTL_COMPACT_FILTER_ENABLED))___		final String priorityQueueTypeString = config.getString(TIMER_SERVICE_FACTORY)___		this.priorityQueueStateType = priorityQueueTypeString.length() > 0 ?_			PriorityQueueStateType.valueOf(priorityQueueTypeString.toUpperCase()) : original.priorityQueueStateType___		_		if (original.localRocksDbDirectories != null) {_			this.localRocksDbDirectories = original.localRocksDbDirectories__		}_		else {_			final String rocksdbLocalPaths = config.getString(RocksDBOptions.LOCAL_DIRECTORIES)__			if (rocksdbLocalPaths != null) {_				String[] directories = rocksdbLocalPaths.split(",|" + File.pathSeparator)___				try {_					setDbStoragePaths(directories)__				}_				catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException("Invalid configuration for RocksDB state " +_							"backend's local storage directories: " + e.getMessage(), e)__				}_			}_		}__		_		this.defaultMetricOptions = RocksDBNativeMetricOptions.fromConfig(config)___		_		this.predefinedOptions = original.predefinedOptions == null ?_			PredefinedOptions.valueOf(config.getString(RocksDBOptions.PREDEFINED_OPTIONS)) : original.predefinedOptions__		LOG.info("Using predefined options: {}.", predefinedOptions.name())___		_		try {_			this.optionsFactory = configureOptionsFactory(_				original.optionsFactory,_				config.getString(RocksDBOptions.OPTIONS_FACTORY),_				config,_				classLoader)__		} catch (DynamicCodeLoadingException e) {_			throw new FlinkRuntimeException(e)__		}_	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,config,the,configuration,param,class,loader,the,class,loader;private,rocks,dbstate,backend,rocks,dbstate,backend,original,configuration,config,class,loader,class,loader,final,state,backend,original,stream,backend,original,checkpoint,stream,backend,this,checkpoint,stream,backend,original,stream,backend,instanceof,configurable,state,backend,configurable,state,backend,original,stream,backend,configure,config,class,loader,original,stream,backend,this,enable,incremental,checkpointing,original,enable,incremental,checkpointing,resolve,undefined,config,get,boolean,checkpointing,options,if,original,number,of,transfering,threads,this,number,of,transfering,threads,config,get,integer,else,this,number,of,transfering,threads,original,number,of,transfering,threads,this,enable,ttl,compaction,filter,original,enable,ttl,compaction,filter,resolve,undefined,config,get,boolean,final,string,priority,queue,type,string,config,get,string,this,priority,queue,state,type,priority,queue,type,string,length,0,priority,queue,state,type,value,of,priority,queue,type,string,to,upper,case,original,priority,queue,state,type,if,original,local,rocks,db,directories,null,this,local,rocks,db,directories,original,local,rocks,db,directories,else,final,string,rocksdb,local,paths,config,get,string,rocks,dboptions,if,rocksdb,local,paths,null,string,directories,rocksdb,local,paths,split,file,path,separator,try,set,db,storage,paths,directories,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,invalid,configuration,for,rocks,db,state,backend,s,local,storage,directories,e,get,message,e,this,default,metric,options,rocks,dbnative,metric,options,from,config,config,this,predefined,options,original,predefined,options,null,predefined,options,value,of,config,get,string,rocks,dboptions,original,predefined,options,log,info,using,predefined,options,predefined,options,name,try,this,options,factory,configure,options,factory,original,options,factory,config,get,string,rocks,dboptions,config,class,loader,catch,dynamic,code,loading,exception,e,throw,new,flink,runtime,exception,e
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1519061869;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		if (enableIncrementalCheckpointing != null) {_			return enableIncrementalCheckpointing__		}_		else {_			return CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue()__		}_	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,if,enable,incremental,checkpointing,null,return,enable,incremental,checkpointing,else,return,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1519568061;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1519829281;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1525123423;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1531145571;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1531419503;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1531771917;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1531771917;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1531771917;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1533212741;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1539939663;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1545300278;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1548411242;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1550581511;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1550681446;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1550863001;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public boolean isIncrementalCheckpointsEnabled();1551262917;Gets whether incremental checkpoints are enabled for this state backend.;public boolean isIncrementalCheckpointsEnabled() {_		return enableIncrementalCheckpointing.getOrDefault(CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue())__	};gets,whether,incremental,checkpoints,are,enabled,for,this,state,backend;public,boolean,is,incremental,checkpoints,enabled,return,enable,incremental,checkpointing,get,or,default,checkpointing,options,default,value
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1519061869;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this.checkpointStreamBackend = checkNotNull(checkpointStreamBackend)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,check,not,null,checkpoint,stream,backend
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1519568061;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1519829281;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1525123423;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1531145571;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1531419503;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1531771917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1533212741;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1539939663;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1545300278;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1548411242;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1550581511;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1550681446;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1550863001;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(StateBackend checkpointStreamBackend);1551262917;Creates a new {@code RocksDBStateBackend} that uses the given state backend to store its_checkpoint data streams. Typically, one would supply a filesystem or database state backend_here where the snapshots from RocksDB would be stored.__<p>The snapshots of the RocksDB state will be stored using the given backend's_{@link StateBackend#createCheckpointStorage(JobID)}.__@param checkpointStreamBackend The backend write the checkpoint streams to.;public RocksDBStateBackend(StateBackend checkpointStreamBackend) {_		this(checkpointStreamBackend, TernaryBoolean.UNDEFINED)__	};creates,a,new,code,rocks,dbstate,backend,that,uses,the,given,state,backend,to,store,its,checkpoint,data,streams,typically,one,would,supply,a,filesystem,or,database,state,backend,here,where,the,snapshots,from,rocks,db,would,be,stored,p,the,snapshots,of,the,rocks,db,state,will,be,stored,using,the,given,backend,s,link,state,backend,create,checkpoint,storage,job,id,param,checkpoint,stream,backend,the,backend,write,the,checkpoint,streams,to;public,rocks,dbstate,backend,state,backend,checkpoint,stream,backend,this,checkpoint,stream,backend,ternary,boolean,undefined
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519061869;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519568061;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException;1519829281;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@param enableIncrementalCheckpointing True if incremental checkpointing is enabled._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri, boolean enableIncrementalCheckpointing) throws IOException {_		this(new FsStateBackend(checkpointDataUri), enableIncrementalCheckpointing)__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,param,enable,incremental,checkpointing,true,if,incremental,checkpointing,is,enabled,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,boolean,enable,incremental,checkpointing,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri,enable,incremental,checkpointing
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1525123423;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1531145571;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1531419503;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1531771917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1533212741;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1539939663;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1545300278;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1548411242;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1550581511;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1550681446;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1550863001;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> @SuppressWarnings("deprecation") 	public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1551262917;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;@SuppressWarnings("deprecation")_	public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;suppress,warnings,deprecation,public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1519061869;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1519568061;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
RocksDBStateBackend -> public RocksDBStateBackend(URI checkpointDataUri) throws IOException;1519829281;Creates a new {@code RocksDBStateBackend} that stores its checkpoint data in the_file system and location defined by the given URI.__<p>A state backend that stores checkpoints in HDFS or S3 must specify the file system_host and port in the URI, or have the Hadoop configuration that describes the file system_(host / high-availability group / possibly credentials) either referenced from the Flink_config, or included in the classpath.__@param checkpointDataUri The URI describing the filesystem and path to the checkpoint data directory._@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public RocksDBStateBackend(URI checkpointDataUri) throws IOException {_		this(new FsStateBackend(checkpointDataUri))__	};creates,a,new,code,rocks,dbstate,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,state,backend,that,stores,checkpoints,in,hdfs,or,s3,must,specify,the,file,system,host,and,port,in,the,uri,or,have,the,hadoop,configuration,that,describes,the,file,system,host,high,availability,group,possibly,credentials,either,referenced,from,the,flink,config,or,included,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,and,path,to,the,checkpoint,data,directory,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,rocks,dbstate,backend,uri,checkpoint,data,uri,throws,ioexception,this,new,fs,state,backend,checkpoint,data,uri
