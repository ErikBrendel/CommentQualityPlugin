commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;// ------------------------------------------------------------------------ @Override public void clear() {     try {         backend.db.delete(columnFamily, writeOptions, serializeCurrentKeyWithGroupAndNamespace()).     } catch (RocksDBException e) {         throw new FlinkRuntimeException("Error while removing entry from RocksDB", e).     } }
false;public;1;4;;@Override public void setCurrentNamespace(N namespace) {     this.currentNamespace = namespace. }
false;public;4;23;;@Override public byte[] getSerializedValue(final byte[] serializedKeyAndNamespace, final TypeSerializer<K> safeKeySerializer, final TypeSerializer<N> safeNamespaceSerializer, final TypeSerializer<V> safeValueSerializer) throws Exception {     // TODO make KvStateSerializer key-group aware to save this round trip and key-group computation     Tuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer).     int keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups()).     RocksDBSerializedCompositeKeyBuilder<K> keyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(safeKeySerializer, backend.getKeyGroupPrefixBytes(), 32).     keyBuilder.setKeyAndKeyGroup(keyAndNamespace.f0, keyGroup).     byte[] key = keyBuilder.buildCompositeKeyNamespace(keyAndNamespace.f1, namespaceSerializer).     return backend.db.get(columnFamily, key). }
false;;2;10;;<UK> byte[] serializeCurrentKeyWithGroupAndNamespacePlusUserKey(UK userKey, TypeSerializer<UK> userKeySerializer) throws IOException {     return sharedKeyNamespaceSerializer.buildCompositeKeyNamesSpaceUserKey(currentNamespace, namespaceSerializer, userKey, userKeySerializer). }
false;private;2;4;;private <T> byte[] serializeValueInternal(T value, TypeSerializer<T> serializer) throws IOException {     serializer.serialize(value, dataOutputView).     return dataOutputView.getCopyOfBuffer(). }
false;;0;3;;byte[] serializeCurrentKeyWithGroupAndNamespace() {     return sharedKeyNamespaceSerializer.buildCompositeKeyNamespace(currentNamespace, namespaceSerializer). }
false;;1;3;;byte[] serializeValue(V value) throws IOException {     return serializeValue(value, valueSerializer). }
false;;2;5;;<T> byte[] serializeValueNullSensitive(T value, TypeSerializer<T> serializer) throws IOException {     dataOutputView.clear().     dataOutputView.writeBoolean(value == null).     return serializeValueInternal(value, serializer). }
false;;2;4;;<T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException {     dataOutputView.clear().     return serializeValueInternal(value, serializer). }
false;;3;21;;<T> byte[] serializeValueList(List<T> valueList, TypeSerializer<T> elementSerializer, byte delimiter) throws IOException {     dataOutputView.clear().     boolean first = true.     for (T value : valueList) {         Preconditions.checkNotNull(value, "You cannot add null to a value list.").         if (first) {             first = false.         } else {             dataOutputView.write(delimiter).         }         elementSerializer.serialize(value, dataOutputView).     }     return dataOutputView.getCopyOfBuffer(). }
false;public;4;13;;public void migrateSerializedValue(DataInputDeserializer serializedOldValueInput, DataOutputSerializer serializedMigratedValueOutput, TypeSerializer<V> priorSerializer, TypeSerializer<V> newSerializer) throws StateMigrationException {     try {         V value = priorSerializer.deserialize(serializedOldValueInput).         newSerializer.serialize(value, serializedMigratedValueOutput).     } catch (Exception e) {         throw new StateMigrationException("Error while trying to migrate RocksDB state.", e).     } }
false;;0;3;;byte[] getKeyBytes() {     return serializeCurrentKeyWithGroupAndNamespace(). }
false;;1;9;;byte[] getValueBytes(V value) {     try {         dataOutputView.clear().         valueSerializer.serialize(value, dataOutputView).         return dataOutputView.getCopyOfBuffer().     } catch (IOException e) {         throw new FlinkRuntimeException("Error while serializing value", e).     } }
false;protected;0;7;;protected V getDefaultValue() {     if (defaultValue != null) {         return valueSerializer.copy(defaultValue).     } else {         return null.     } }
false;public;1;4;;@Override public StateIncrementalVisitor<K, N, V> getStateIncrementalVisitor(int recommendedMaxNumberOfReturnedRecords) {     throw new UnsupportedOperationException("Global state entry iterator is unsupported for RocksDb backend"). }
