commented;modifiers;parameterAmount;loc;comment;code
false;public;0;63;;@Test(timeout = 2000) @RetryOnFailure(times = 3) public void testRocksDbListStateAPIs() throws Exception {     final File rocksDir = tmp.newFolder().     // ensure the RocksDB library is loaded to a distinct location each retry     NativeLibraryLoader.getInstance().loadLibrary(rocksDir.getAbsolutePath()).     final String key1 = "key1".     final String key2 = "key2".     final String value = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ7890654321".     final byte[] keyBytes1 = key1.getBytes(StandardCharsets.UTF_8).     final byte[] keyBytes2 = key2.getBytes(StandardCharsets.UTF_8).     final byte[] valueBytes = value.getBytes(StandardCharsets.UTF_8).     // The number of values added to ListState. Can be changed for benchmarking     final int num = 10.     try (final Options options = new Options().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true).setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1).setCreateIfMissing(true).setMergeOperatorName(RocksDBKeyedStateBackend.MERGE_OPERATOR_NAME).         final WriteOptions writeOptions = new WriteOptions().setSync(false).setDisableWAL(true).         final RocksDB rocksDB = RocksDB.open(options, rocksDir.getAbsolutePath())) {         // ----- add() API -----         log.info("begin add").         final long beginInsert1 = System.nanoTime().         for (int i = 0. i < num. i++) {             rocksDB.merge(writeOptions, keyBytes1, valueBytes).         }         final long endInsert1 = System.nanoTime().         log.info("end add - duration: {} ns", (endInsert1 - beginInsert1)).         // ----- update() API -----         List<byte[]> list = new ArrayList<>(num).         for (int i = 0. i < num. i++) {             list.add(valueBytes).         }         byte[] premerged = merge(list).         log.info("begin update").         final long beginInsert2 = System.nanoTime().         rocksDB.merge(writeOptions, keyBytes2, premerged).         final long endInsert2 = System.nanoTime().         log.info("end update - duration: {} ns", (endInsert2 - beginInsert2)).     } }
true;public,static;1;28;/**  * Merge operands into a single value that can be put directly into RocksDB.  */ ;/**  * Merge operands into a single value that can be put directly into RocksDB.  */ public static byte[] merge(List<byte[]> operands) {     if (operands == null || operands.size() == 0) {         return null.     }     if (operands.size() == 1) {         return operands.get(0).     }     int numBytes = 0.     for (byte[] arr : operands) {         numBytes += arr.length + 1.     }     numBytes--.     byte[] result = new byte[numBytes].     System.arraycopy(operands.get(0), 0, result, 0, operands.get(0).length).     for (int i = 1, arrIndex = operands.get(0).length. i < operands.size(). i++) {         result[arrIndex] = DELIMITER.         arrIndex += 1.         System.arraycopy(operands.get(i), 0, result, arrIndex, operands.get(i).length).         arrIndex += operands.get(i).length.     }     return result. }
