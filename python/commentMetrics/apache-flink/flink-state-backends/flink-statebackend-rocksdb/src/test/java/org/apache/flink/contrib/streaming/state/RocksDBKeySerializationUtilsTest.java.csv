commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testIsAmbiguousKeyPossible() {     Assert.assertFalse(RocksDBKeySerializationUtils.isAmbiguousKeyPossible(IntSerializer.INSTANCE, StringSerializer.INSTANCE)).     Assert.assertTrue(RocksDBKeySerializationUtils.isAmbiguousKeyPossible(StringSerializer.INSTANCE, StringSerializer.INSTANCE)). }
false;public;0;16;;@Test public void testKeyGroupSerializationAndDeserialization() throws Exception {     ByteArrayOutputStreamWithPos outputStream = new ByteArrayOutputStreamWithPos(8).     DataOutputView outputView = new DataOutputViewStreamWrapper(outputStream).     for (int keyGroupPrefixBytes = 1. keyGroupPrefixBytes <= 2. ++keyGroupPrefixBytes) {         for (int orgKeyGroup = 0. orgKeyGroup < 128. ++orgKeyGroup) {             outputStream.reset().             RocksDBKeySerializationUtils.writeKeyGroup(orgKeyGroup, keyGroupPrefixBytes, outputView).             int deserializedKeyGroup = RocksDBKeySerializationUtils.readKeyGroup(keyGroupPrefixBytes, new DataInputViewStreamWrapper(new ByteArrayInputStreamWithPos(outputStream.toByteArray()))).             Assert.assertEquals(orgKeyGroup, deserializedKeyGroup).         }     } }
false;public;0;19;;@Test public void testKeySerializationAndDeserialization() throws Exception {     final DataOutputSerializer outputView = new DataOutputSerializer(8).     final DataInputDeserializer inputView = new DataInputDeserializer().     // test for key     for (int orgKey = 0. orgKey < 100. ++orgKey) {         outputView.clear().         RocksDBKeySerializationUtils.writeKey(orgKey, IntSerializer.INSTANCE, outputView, false).         inputView.setBuffer(outputView.getCopyOfBuffer()).         int deserializedKey = RocksDBKeySerializationUtils.readKey(IntSerializer.INSTANCE, inputView, false).         Assert.assertEquals(orgKey, deserializedKey).         RocksDBKeySerializationUtils.writeKey(orgKey, IntSerializer.INSTANCE, outputView, true).         inputView.setBuffer(outputView.getCopyOfBuffer()).         deserializedKey = RocksDBKeySerializationUtils.readKey(IntSerializer.INSTANCE, inputView, true).         Assert.assertEquals(orgKey, deserializedKey).     } }
false;public;0;18;;@Test public void testNamespaceSerializationAndDeserialization() throws Exception {     final DataOutputSerializer outputView = new DataOutputSerializer(8).     final DataInputDeserializer inputView = new DataInputDeserializer().     for (int orgNamespace = 0. orgNamespace < 100. ++orgNamespace) {         outputView.clear().         RocksDBKeySerializationUtils.writeNameSpace(orgNamespace, IntSerializer.INSTANCE, outputView, false).         inputView.setBuffer(outputView.getCopyOfBuffer()).         int deserializedNamepsace = RocksDBKeySerializationUtils.readNamespace(IntSerializer.INSTANCE, inputView, false).         Assert.assertEquals(orgNamespace, deserializedNamepsace).         RocksDBKeySerializationUtils.writeNameSpace(orgNamespace, IntSerializer.INSTANCE, outputView, true).         inputView.setBuffer(outputView.getCopyOfBuffer()).         deserializedNamepsace = RocksDBKeySerializationUtils.readNamespace(IntSerializer.INSTANCE, inputView, true).         Assert.assertEquals(orgNamespace, deserializedNamepsace).     } }
