commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public DBOptions createDBOptions(DBOptions currentOptions) {     // close it before reuse the reference.     try {         currentOptions.close().     } catch (Exception e) {         LOG.error("Close previous DBOptions's instance failed.", e).     }     return PredefinedOptions.FLASH_SSD_OPTIMIZED.createDBOptions(). }
false;public;1;11;;@Override public ColumnFamilyOptions createColumnOptions(ColumnFamilyOptions currentOptions) {     // close it before reuse the reference.     try {         currentOptions.close().     } catch (Exception e) {         LOG.error("Close previous ColumnOptions's instance failed.", e).     }     return PredefinedOptions.FLASH_SSD_OPTIMIZED.createColumnOptions(). }
false;public;0;3;;public ColumnFamilyHandle getDefaultColumnFamily() {     return columnFamilyHandles.get(0). }
false;public;0;3;;public WriteOptions getWriteOptions() {     return writeOptions. }
false;public;0;3;;public RocksDB getRocksDB() {     return rocksDB. }
false;public;0;3;;public ReadOptions getReadOptions() {     return readOptions. }
false;public;0;3;;public RocksDBWriteBatchWrapper getBatchWrapper() {     return batchWrapper. }
true;public;1;10;/**  * Creates and returns a new column family with the given name.  */ ;/**  * Creates and returns a new column family with the given name.  */ public ColumnFamilyHandle createNewColumnFamily(String name) {     try {         final ColumnFamilyHandle columnFamily = rocksDB.createColumnFamily(new ColumnFamilyDescriptor(name.getBytes(), columnFamilyOptions)).         columnFamilyHandles.add(columnFamily).         return columnFamily.     } catch (Exception ex) {         throw new FlinkRuntimeException("Could not create column family.", ex).     } }
false;protected;0;19;;@Override protected void before() throws Throwable {     this.temporaryFolder = new TemporaryFolder().     this.temporaryFolder.create().     final File rocksFolder = temporaryFolder.newFolder().     this.dbOptions = optionsFactory.createDBOptions(PredefinedOptions.DEFAULT.createDBOptions()).setCreateIfMissing(true).     this.columnFamilyOptions = optionsFactory.createColumnOptions(PredefinedOptions.DEFAULT.createColumnOptions()).     this.writeOptions = new WriteOptions().     this.writeOptions.disableWAL().     this.readOptions = new ReadOptions().     this.columnFamilyHandles = new ArrayList<>(1).     this.rocksDB = RocksDB.open(dbOptions, rocksFolder.getAbsolutePath(), Collections.singletonList(new ColumnFamilyDescriptor("default".getBytes(), columnFamilyOptions)), columnFamilyHandles).     this.batchWrapper = new RocksDBWriteBatchWrapper(rocksDB, writeOptions). }
false;protected;0;14;;@Override protected void after() {     // destruct in reversed order of creation.     IOUtils.closeQuietly(this.batchWrapper).     for (ColumnFamilyHandle columnFamilyHandle : columnFamilyHandles) {         IOUtils.closeQuietly(columnFamilyHandle).     }     IOUtils.closeQuietly(this.rocksDB).     IOUtils.closeQuietly(this.readOptions).     IOUtils.closeQuietly(this.writeOptions).     IOUtils.closeQuietly(this.columnFamilyOptions).     IOUtils.closeQuietly(this.dbOptions).     temporaryFolder.delete(). }
