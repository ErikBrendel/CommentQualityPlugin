commented;modifiers;parameterAmount;loc;comment;code
false;public;0;50;;@Test public void testMetricMonitorLifecycle() throws Throwable {     // We use a local variable here to manually control the life-cycle.     // This allows us to verify that metrics do not try to access     // RocksDB after the monitor was closed.     RocksDBResource localRocksDBResource = new RocksDBResource().     localRocksDBResource.before().     SimpleMetricRegistry registry = new SimpleMetricRegistry().     GenericMetricGroup group = new GenericMetricGroup(registry, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(), OPERATOR_NAME).     RocksDBNativeMetricOptions options = new RocksDBNativeMetricOptions().     // always returns a non-zero     // value since empty memtables     // have overhead.     options.enableSizeAllMemTables().     RocksDBNativeMetricMonitor monitor = new RocksDBNativeMetricMonitor(options, group, localRocksDBResource.getRocksDB()).     ColumnFamilyHandle handle = localRocksDBResource.createNewColumnFamily(COLUMN_FAMILY_NAME).     monitor.registerColumnFamily(COLUMN_FAMILY_NAME, handle).     Assert.assertEquals("Failed to register metrics for column family", 1, registry.metrics.size()).     RocksDBNativeMetricMonitor.RocksDBNativeMetricView view = registry.metrics.get(0).     view.update().     Assert.assertNotEquals("Failed to pull metric from RocksDB", BigInteger.ZERO, view.getValue()).     view.setValue(0L).     // After the monitor is closed no metric should be accessing RocksDB anymore.     // If they do, then this test will likely fail with a segmentation fault.     monitor.close().     localRocksDBResource.after().     view.update().     Assert.assertEquals("Failed to release RocksDB reference", BigInteger.ZERO, view.getValue()). }
false;public;0;32;;@Test public void testReturnsUnsigned() throws Throwable {     RocksDBResource localRocksDBResource = new RocksDBResource().     localRocksDBResource.before().     SimpleMetricRegistry registry = new SimpleMetricRegistry().     GenericMetricGroup group = new GenericMetricGroup(registry, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(), OPERATOR_NAME).     RocksDBNativeMetricOptions options = new RocksDBNativeMetricOptions().     options.enableSizeAllMemTables().     RocksDBNativeMetricMonitor monitor = new RocksDBNativeMetricMonitor(options, group, localRocksDBResource.getRocksDB()).     ColumnFamilyHandle handle = rocksDBResource.createNewColumnFamily(COLUMN_FAMILY_NAME).     monitor.registerColumnFamily(COLUMN_FAMILY_NAME, handle).     RocksDBNativeMetricMonitor.RocksDBNativeMetricView view = registry.metrics.get(0).     view.setValue(-1).     BigInteger result = view.getValue().     localRocksDBResource.after().     Assert.assertEquals("Failed to interpret RocksDB result as an unsigned long", 1, result.signum()). }
false;public;0;28;;@Test public void testClosedGaugesDontRead() {     SimpleMetricRegistry registry = new SimpleMetricRegistry().     GenericMetricGroup group = new GenericMetricGroup(registry, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(), OPERATOR_NAME).     RocksDBNativeMetricOptions options = new RocksDBNativeMetricOptions().     options.enableSizeAllMemTables().     RocksDBNativeMetricMonitor monitor = new RocksDBNativeMetricMonitor(options, group, rocksDBResource.getRocksDB()).     ColumnFamilyHandle handle = rocksDBResource.createNewColumnFamily(COLUMN_FAMILY_NAME).     monitor.registerColumnFamily(COLUMN_FAMILY_NAME, handle).     RocksDBNativeMetricMonitor.RocksDBNativeMetricView view = registry.metrics.get(0).     view.close().     view.update().     Assert.assertEquals("Closed gauge still queried RocksDB", BigInteger.ZERO, view.getValue()). }
false;public;0;4;;@Override public char getDelimiter() {     return 0. }
false;public;1;4;;@Override public char getDelimiter(int index) {     return 0. }
false;public;0;4;;@Override public int getNumberReporters() {     return 0. }
false;public;3;6;;@Override public void register(Metric metric, String metricName, AbstractMetricGroup group) {     if (metric instanceof RocksDBNativeMetricMonitor.RocksDBNativeMetricView) {         metrics.add((RocksDBNativeMetricMonitor.RocksDBNativeMetricView) metric).     } }
false;public;3;4;;@Override public void unregister(Metric metric, String metricName, AbstractMetricGroup group) { }
false;public;0;11;;@Override public ScopeFormats getScopeFormats() {     Configuration config = new Configuration().     config.setString(MetricOptions.SCOPE_NAMING_TM, "A").     config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B").     config.setString(MetricOptions.SCOPE_NAMING_TASK, "C").     config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D").     return ScopeFormats.fromConfig(config). }
false;public;0;5;;@Nullable @Override public String getMetricQueryServicePath() {     return null. }
