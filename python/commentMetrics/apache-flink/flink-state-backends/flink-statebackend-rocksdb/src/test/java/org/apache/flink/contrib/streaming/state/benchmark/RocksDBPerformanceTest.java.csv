commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void init() throws IOException {     rocksDir = tmp.newFolder().     // ensure the RocksDB library is loaded to a distinct location each retry     NativeLibraryLoader.getInstance().loadLibrary(rocksDir.getAbsolutePath()).     options = new Options().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true).setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1).setCreateIfMissing(true).setMergeOperatorName(RocksDBKeyedStateBackend.MERGE_OPERATOR_NAME).     writeOptions = new WriteOptions().setSync(false).setDisableWAL(true). }
false;public;0;51;;@Test(timeout = 2000) @RetryOnFailure(times = 3) public void testRocksDbMergePerformance() throws Exception {     final int num = 50000.     try (RocksDB rocksDB = RocksDB.open(options, rocksDir.getAbsolutePath())) {         // ----- insert -----         log.info("begin insert").         final long beginInsert = System.nanoTime().         for (int i = 0. i < num. i++) {             rocksDB.merge(writeOptions, keyBytes, valueBytes).         }         final long endInsert = System.nanoTime().         log.info("end insert - duration: {} ms", (endInsert - beginInsert) / 1_000_000).         // ----- read (attempt 1) -----         final byte[] resultHolder = new byte[num * (valueBytes.length + 2)].         final long beginGet1 = System.nanoTime().         rocksDB.get(keyBytes, resultHolder).         final long endGet1 = System.nanoTime().         log.info("end get - duration: {} ms", (endGet1 - beginGet1) / 1_000_000).         // ----- read (attempt 2) -----         final long beginGet2 = System.nanoTime().         rocksDB.get(keyBytes, resultHolder).         final long endGet2 = System.nanoTime().         log.info("end get - duration: {} ms", (endGet2 - beginGet2) / 1_000_000).         // ----- compact -----         log.info("compacting...").         final long beginCompact = System.nanoTime().         rocksDB.compactRange().         final long endCompact = System.nanoTime().         log.info("end compaction - duration: {} ms", (endCompact - beginCompact) / 1_000_000).         // ----- read (attempt 3) -----         final long beginGet3 = System.nanoTime().         rocksDB.get(keyBytes, resultHolder).         final long endGet3 = System.nanoTime().         log.info("end get - duration: {} ms", (endGet3 - beginGet3) / 1_000_000).     } }
false;public;0;48;;@Test(timeout = 2000) @RetryOnFailure(times = 3) public void testRocksDbRangeGetPerformance() throws Exception {     final int num = 50000.     try (RocksDB rocksDB = RocksDB.open(options, rocksDir.getAbsolutePath())) {         final byte[] keyTemplate = Arrays.copyOf(keyBytes, keyBytes.length + 4).         final Unsafe unsafe = MemoryUtils.UNSAFE.         final long offset = unsafe.arrayBaseOffset(byte[].class) + keyTemplate.length - 4.         log.info("begin insert").         final long beginInsert = System.nanoTime().         for (int i = 0. i < num. i++) {             unsafe.putInt(keyTemplate, offset, i).             rocksDB.put(writeOptions, keyTemplate, valueBytes).         }         final long endInsert = System.nanoTime().         log.info("end insert - duration: {} ms", (endInsert - beginInsert) / 1_000_000).         @SuppressWarnings("MismatchedReadAndWriteOfArray")         final byte[] resultHolder = new byte[num * valueBytes.length].         final long beginGet = System.nanoTime().         int pos = 0.         try (final RocksIteratorWrapper iterator = RocksDBOperationUtils.getRocksIterator(rocksDB)) {             // seek to start             unsafe.putInt(keyTemplate, offset, 0).             iterator.seek(keyTemplate).             // iterate             while (iterator.isValid() && samePrefix(keyBytes, iterator.key())) {                 byte[] currValue = iterator.value().                 System.arraycopy(currValue, 0, resultHolder, pos, currValue.length).                 pos += currValue.length.                 iterator.next().             }         }         final long endGet = System.nanoTime().         log.info("end get - duration: {} ms", (endGet - beginGet) / 1_000_000).     } }
false;private,static;2;9;;private static boolean samePrefix(byte[] prefix, byte[] key) {     for (int i = 0. i < prefix.length. i++) {         if (prefix[i] != key[i]) {             return false.         }     }     return true. }
false;public;0;5;;@After public void close() {     options.close().     writeOptions.close(). }
