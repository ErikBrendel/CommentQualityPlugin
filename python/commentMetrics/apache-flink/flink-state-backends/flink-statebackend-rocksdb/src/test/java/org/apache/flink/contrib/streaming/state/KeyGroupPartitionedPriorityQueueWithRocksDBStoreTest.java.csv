commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;@Override protected InternalPriorityQueue<TestElement> newPriorityQueue(int initialCapacity) {     return new KeyGroupPartitionedPriorityQueue<>(KEY_EXTRACTOR_FUNCTION, TEST_ELEMENT_PRIORITY_COMPARATOR, newFactory(), KEY_GROUP_RANGE, KEY_GROUP_RANGE.getNumberOfKeyGroups()). }
false;protected;0;4;;@Override protected boolean testSetSemanticsAgainstDuplicateElements() {     return true. }
false;private;0;20;;private KeyGroupPartitionedPriorityQueue.PartitionQueueSetFactory<TestElement, RocksDBCachingPriorityQueueSet<TestElement>> newFactory() {     return (keyGroupId, numKeyGroups, keyExtractorFunction, elementComparator) -> {         DataOutputSerializer outputStreamWithPos = new DataOutputSerializer(128).         DataInputDeserializer inputStreamWithPos = new DataInputDeserializer().         int keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numKeyGroups).         TreeOrderedSetCache orderedSetCache = new TreeOrderedSetCache(32).         return new RocksDBCachingPriorityQueueSet<>(keyGroupId, keyGroupPrefixBytes, rocksDBResource.getRocksDB(), rocksDBResource.getDefaultColumnFamily(), TestElementSerializer.INSTANCE, outputStreamWithPos, inputStreamWithPos, rocksDBResource.getBatchWrapper(), orderedSetCache).     }. }
