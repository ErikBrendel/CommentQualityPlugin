# id;timestamp;commentText;codeText;commentWords;codeWords
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1519061869;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<KeyedStateHandle> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1519568061;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1524563522;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1531771917;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1533212741;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1534854671;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtil.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,util,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1547722029;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {__			keyedStateBackend.restore(null)___			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtils.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,restore,null,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,utils,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCleanupOfSnapshotsInFailureCase() throws Exception;1550863001;Test that the snapshot files are cleaned up in case of a failure during the snapshot_procedure.;@Test_	public void testCleanupOfSnapshotsInFailureCase() throws Exception {_		long checkpointId = 1L__		long timestamp = 42L___		Environment env = new DummyEnvironment("test task", 1, 0)___		final IOException testException = new IOException("Test exception")__		CheckpointStateOutputStream outputStream = spy(new FailingStream(testException))___		RocksDBStateBackend backend = new RocksDBStateBackend((StateBackend) new MemoryStateBackend())___		backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString())___		AbstractKeyedStateBackend<Void> keyedStateBackend = backend.createKeyedStateBackend(_			env,_			new JobID(),_			"test operator",_			VoidSerializer.INSTANCE,_			1,_			new KeyGroupRange(0, 0),_			null)___		try {_			_			keyedStateBackend.getPartitionedState(_				"namespace",_				StringSerializer.INSTANCE,_				new ValueStateDescriptor<>("foobar", String.class))___			RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture = keyedStateBackend.snapshot(_				checkpointId, timestamp,_				new TestCheckpointStreamFactory(() -> outputStream),_				CheckpointOptions.forCheckpointWithDefaultLocation())___			try {_				FutureUtils.runIfNotDoneAndGet(snapshotFuture)__				fail("Expected an exception to be thrown here.")__			} catch (ExecutionException e) {_				Assert.assertEquals(testException, e.getCause())__			}__			verify(outputStream).close()__		} finally {_			IOUtils.closeQuietly(keyedStateBackend)__			keyedStateBackend.dispose()__		}_	};test,that,the,snapshot,files,are,cleaned,up,in,case,of,a,failure,during,the,snapshot,procedure;test,public,void,test,cleanup,of,snapshots,in,failure,case,throws,exception,long,checkpoint,id,1l,long,timestamp,42l,environment,env,new,dummy,environment,test,task,1,0,final,ioexception,test,exception,new,ioexception,test,exception,checkpoint,state,output,stream,output,stream,spy,new,failing,stream,test,exception,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,new,memory,state,backend,backend,set,db,storage,path,temporary,folder,new,folder,to,uri,to,string,abstract,keyed,state,backend,void,keyed,state,backend,backend,create,keyed,state,backend,env,new,job,id,test,operator,void,serializer,instance,1,new,key,group,range,0,0,null,try,keyed,state,backend,get,partitioned,state,namespace,string,serializer,instance,new,value,state,descriptor,foobar,string,class,runnable,future,snapshot,result,keyed,state,handle,snapshot,future,keyed,state,backend,snapshot,checkpoint,id,timestamp,new,test,checkpoint,stream,factory,output,stream,checkpoint,options,for,checkpoint,with,default,location,try,future,utils,run,if,not,done,and,get,snapshot,future,fail,expected,an,exception,to,be,thrown,here,catch,execution,exception,e,assert,assert,equals,test,exception,e,get,cause,verify,output,stream,close,finally,ioutils,close,quietly,keyed,state,backend,keyed,state,backend,dispose
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1519061869;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = 1___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws Exception {_				_				_				if (count > 0) {_					--count__					return new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()__		Assert.assertTrue(blockerCheckpointStreamFactory.getLastCreatedStream().isClosed())___		try {_			ExecutorService threadPool = task.getAsyncOperationsThreadPool()__			threadPool.shutdown()__			Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))__			testHarness.waitForTaskCompletion()___			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,1,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,exception,if,count,0,count,return,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,assert,assert,true,blocker,checkpoint,stream,factory,get,last,created,stream,is,closed,try,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1519568061;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = 1___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				_				_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()__		Assert.assertTrue(blockerCheckpointStreamFactory.getLastCreatedStream().isClosed())___		try {_			ExecutorService threadPool = task.getAsyncOperationsThreadPool()__			threadPool.shutdown()__			Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))__			testHarness.waitForTaskCompletion()___			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,1,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,assert,assert,true,blocker,checkpoint,stream,factory,get,last,created,stream,is,closed,try,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1524563522;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = 1___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				_				_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,1,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1531771917;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		final RocksDBStateBackend.PriorityQueueStateType timerServicePriorityQueueType = RocksDBStateBackend.PriorityQueueStateType.valueOf(RocksDBOptions.TIMER_SERVICE_IMPL.defaultValue())___		final int skipStreams___		if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.HEAP) {_			_			_			skipStreams = 1__		} else if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.ROCKSDB) {_			skipStreams = 0__		} else {_			throw new AssertionError(String.format("Unknown timer service priority queue type %s.", timerServicePriorityQueueType))__		}__		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = skipStreams___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,final,rocks,dbstate,backend,priority,queue,state,type,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,value,of,rocks,dboptions,default,value,final,int,skip,streams,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,heap,skip,streams,1,else,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,rocksdb,skip,streams,0,else,throw,new,assertion,error,string,format,unknown,timer,service,priority,queue,type,s,timer,service,priority,queue,type,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,skip,streams,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1533212741;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		final RocksDBStateBackend.PriorityQueueStateType timerServicePriorityQueueType = RocksDBStateBackend.PriorityQueueStateType.valueOf(RocksDBOptions.TIMER_SERVICE_FACTORY.defaultValue())___		final int skipStreams___		if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.HEAP) {_			_			_			skipStreams = 1__		} else if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.ROCKSDB) {_			skipStreams = 0__		} else {_			throw new AssertionError(String.format("Unknown timer service priority queue type %s.", timerServicePriorityQueueType))__		}__		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = skipStreams___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,final,rocks,dbstate,backend,priority,queue,state,type,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,value,of,rocks,dboptions,default,value,final,int,skip,streams,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,heap,skip,streams,1,else,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,rocksdb,skip,streams,0,else,throw,new,assertion,error,string,format,unknown,timer,service,priority,queue,type,s,timer,service,priority,queue,type,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,skip,streams,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1534854671;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		final RocksDBStateBackend.PriorityQueueStateType timerServicePriorityQueueType = RocksDBStateBackend.PriorityQueueStateType.valueOf(RocksDBOptions.TIMER_SERVICE_FACTORY.defaultValue())___		final int skipStreams___		if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.HEAP) {_			_			_			skipStreams = 1__		} else if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.ROCKSDB) {_			skipStreams = 0__		} else {_			throw new AssertionError(String.format("Unknown timer service priority queue type %s.", timerServicePriorityQueueType))__		}__		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = skipStreams___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,final,rocks,dbstate,backend,priority,queue,state,type,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,value,of,rocks,dboptions,default,value,final,int,skip,streams,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,heap,skip,streams,1,else,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,rocksdb,skip,streams,0,else,throw,new,assertion,error,string,format,unknown,timer,service,priority,queue,type,s,timer,service,priority,queue,type,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,skip,streams,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1547722029;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		final RocksDBStateBackend.PriorityQueueStateType timerServicePriorityQueueType = RocksDBStateBackend.PriorityQueueStateType.valueOf(RocksDBOptions.TIMER_SERVICE_FACTORY.defaultValue())___		final int skipStreams___		if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.HEAP) {_			_			_			skipStreams = 1__		} else if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.ROCKSDB) {_			skipStreams = 0__		} else {_			throw new AssertionError(String.format("Unknown timer service priority queue type %s.", timerServicePriorityQueueType))__		}__		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = skipStreams___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,final,rocks,dbstate,backend,priority,queue,state,type,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,value,of,rocks,dboptions,default,value,final,int,skip,streams,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,heap,skip,streams,1,else,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,rocksdb,skip,streams,0,else,throw,new,assertion,error,string,format,unknown,timer,service,priority,queue,type,s,timer,service,priority,queue,type,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,skip,streams,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testCancelFullyAsyncCheckpoints() throws Exception;1550863001;This tests ensures that canceling of asynchronous snapshots works as expected and does not block.;@Test_	public void testCancelFullyAsyncCheckpoints() throws Exception {_		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(value -> value, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		final RocksDBStateBackend.PriorityQueueStateType timerServicePriorityQueueType = RocksDBStateBackend.PriorityQueueStateType.valueOf(RocksDBOptions.TIMER_SERVICE_FACTORY.defaultValue())___		final int skipStreams___		if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.HEAP) {_			_			_			skipStreams = 1__		} else if (timerServicePriorityQueueType == RocksDBStateBackend.PriorityQueueStateType.ROCKSDB) {_			skipStreams = 0__		} else {_			throw new AssertionError(String.format("Unknown timer service priority queue type %s.", timerServicePriorityQueueType))__		}__		_		BlockerCheckpointStreamFactory blockerCheckpointStreamFactory =_			new BlockerCheckpointStreamFactory(4 * 1024 * 1024) {__			int count = skipStreams___			@Override_			public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException {_				if (count > 0) {_					--count__					return new BlockingCheckpointOutputStream(_						new MemCheckpointStreamFactory.MemoryCheckpointOutputStream(maxSize),_						null,_						null,_						Integer.MAX_VALUE)__				} else {_					return super.createCheckpointStateOutputStream(scope)__				}_			}_		}___		_		__		StateBackend stateBackend = new BackendForTestStream(new StaticForwardFactory(blockerCheckpointStreamFactory))___		RocksDBStateBackend backend = new RocksDBStateBackend(stateBackend)__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager()___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_				testHarness.jobConfig,_				testHarness.taskConfig,_				testHarness.memorySize,_				new MockInputSplitProvider(),_				testHarness.bufferSize,_				taskStateManagerTestMock)___		blockerCheckpointStreamFactory.setBlockerLatch(new OneShotLatch())__		blockerCheckpointStreamFactory.setWaiterLatch(new OneShotLatch())___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(_			new CheckpointMetaData(42, 17),_			CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))__		blockerCheckpointStreamFactory.getWaiterLatch().await()__		task.cancel()__		blockerCheckpointStreamFactory.getBlockerLatch().trigger()__		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		Set<BlockingCheckpointOutputStream> createdStreams = blockerCheckpointStreamFactory.getAllCreatedStreams()___		for (BlockingCheckpointOutputStream stream : createdStreams) {_			Assert.assertTrue(_				"Not all of the " + createdStreams.size() + " created streams have been closed.",_				stream.isClosed())__		}__		try {_			testHarness.waitForTaskCompletion()__			fail("Operation completed. Cancel failed.")__		} catch (Exception expected) {__			Throwable cause = expected.getCause()___			if (!(cause instanceof CancelTaskException)) {_				fail("Unexpected exception: " + expected)__			}_		}_	};this,tests,ensures,that,canceling,of,asynchronous,snapshots,works,as,expected,and,does,not,block;test,public,void,test,cancel,fully,async,checkpoints,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,value,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,final,rocks,dbstate,backend,priority,queue,state,type,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,value,of,rocks,dboptions,default,value,final,int,skip,streams,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,heap,skip,streams,1,else,if,timer,service,priority,queue,type,rocks,dbstate,backend,priority,queue,state,type,rocksdb,skip,streams,0,else,throw,new,assertion,error,string,format,unknown,timer,service,priority,queue,type,s,timer,service,priority,queue,type,blocker,checkpoint,stream,factory,blocker,checkpoint,stream,factory,new,blocker,checkpoint,stream,factory,4,1024,1024,int,count,skip,streams,override,public,checkpoint,state,output,stream,create,checkpoint,state,output,stream,checkpointed,state,scope,scope,throws,ioexception,if,count,0,count,return,new,blocking,checkpoint,output,stream,new,mem,checkpoint,stream,factory,memory,checkpoint,output,stream,max,size,null,null,integer,else,return,super,create,checkpoint,state,output,stream,scope,state,backend,state,backend,new,backend,for,test,stream,new,static,forward,factory,blocker,checkpoint,stream,factory,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,blocker,checkpoint,stream,factory,set,blocker,latch,new,one,shot,latch,blocker,checkpoint,stream,factory,set,waiter,latch,new,one,shot,latch,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,blocker,checkpoint,stream,factory,get,waiter,latch,await,task,cancel,blocker,checkpoint,stream,factory,get,blocker,latch,trigger,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,set,blocking,checkpoint,output,stream,created,streams,blocker,checkpoint,stream,factory,get,all,created,streams,for,blocking,checkpoint,output,stream,stream,created,streams,assert,assert,true,not,all,of,the,created,streams,size,created,streams,have,been,closed,stream,is,closed,try,test,harness,wait,for,task,completion,fail,operation,completed,cancel,failed,catch,exception,expected,throwable,cause,expected,get,cause,if,cause,instanceof,cancel,task,exception,fail,unexpected,exception,expected
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1519061869;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock)___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1519568061;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1524563522;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1531771917;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1533212741;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1534854671;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1547722029;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
RocksDBAsyncSnapshotTest -> @Test 	public void testFullyAsyncSnapshot() throws Exception;1550863001;This ensures that asynchronous state handles are actually materialized asynchronously.__<p>We use latches to block at various stages and see if the code still continues through_the parts that are not asynchronous. If the checkpoint is not done asynchronously the_test will simply lock forever.;@Test_	public void testFullyAsyncSnapshot() throws Exception {__		final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		testHarness.configureForKeyedStream(new KeySelector<String, String>() {_			@Override_			public String getKey(String value) throws Exception {_				return value__			}_		}, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()___		File dbDir = temporaryFolder.newFolder()___		RocksDBStateBackend backend = new RocksDBStateBackend(new MemoryStateBackend())__		backend.setDbStoragePath(dbDir.getAbsolutePath())___		streamConfig.setStateBackend(backend)___		streamConfig.setStreamOperator(new AsyncCheckpointOperator())__		streamConfig.setOperatorID(new OperatorID())___		final OneShotLatch delayCheckpointLatch = new OneShotLatch()__		final OneShotLatch ensureCheckpointLatch = new OneShotLatch()___		CheckpointResponder checkpointResponderMock = new CheckpointResponder() {__			@Override_			public void acknowledgeCheckpoint(_				JobID jobID,_				ExecutionAttemptID executionAttemptID,_				long checkpointId,_				CheckpointMetrics checkpointMetrics,_				TaskStateSnapshot subtaskState) {_				_				_				try {_					delayCheckpointLatch.await()__				} catch (InterruptedException e) {_					throw new RuntimeException(e)__				}__				boolean hasManagedKeyedState = false__				for (Map.Entry<OperatorID, OperatorSubtaskState> entry : subtaskState.getSubtaskStateMappings()) {_					OperatorSubtaskState state = entry.getValue()__					if (state != null) {_						hasManagedKeyedState |= state.getManagedKeyedState() != null__					}_				}__				_				assertTrue(hasManagedKeyedState)___				_				ensureCheckpointLatch.trigger()__			}__			@Override_			public void declineCheckpoint(_				JobID jobID, ExecutionAttemptID executionAttemptID,_				long checkpointId, Throwable cause) {__			}_		}___		JobID jobID = new JobID()__		ExecutionAttemptID executionAttemptID = new ExecutionAttemptID(0L, 0L)__		TestTaskStateManager taskStateManagerTestMock = new TestTaskStateManager(_			jobID,_			executionAttemptID,_			checkpointResponderMock,_			TestLocalRecoveryConfig.disabled())___		StreamMockEnvironment mockEnv = new StreamMockEnvironment(_			testHarness.jobConfig,_			testHarness.taskConfig,_			testHarness.memorySize,_			new MockInputSplitProvider(),_			testHarness.bufferSize,_			taskStateManagerTestMock)___		testHarness.invoke(mockEnv)___		final OneInputStreamTask<String, String> task = testHarness.getTask()___		_		for (Field field: StreamTask.class.getDeclaredFields()) {_			if (field.getName().equals("isRunning")) {_				field.setAccessible(true)__				while (!field.getBoolean(task)) {_					Thread.sleep(10)__				}_			}_		}__		task.triggerCheckpoint(new CheckpointMetaData(42, 17), CheckpointOptions.forCheckpointWithDefaultLocation())___		testHarness.processElement(new StreamRecord<>("Wohoo", 0))___		_		delayCheckpointLatch.trigger()___		_		ensureCheckpointLatch.await()___		testHarness.endInput()___		ExecutorService threadPool = task.getAsyncOperationsThreadPool()__		threadPool.shutdown()__		Assert.assertTrue(threadPool.awaitTermination(60_000, TimeUnit.MILLISECONDS))___		testHarness.waitForTaskCompletion()__		if (mockEnv.wasFailedExternally()) {_			fail("Unexpected exception during execution.")__		}_	};this,ensures,that,asynchronous,state,handles,are,actually,materialized,asynchronously,p,we,use,latches,to,block,at,various,stages,and,see,if,the,code,still,continues,through,the,parts,that,are,not,asynchronous,if,the,checkpoint,is,not,done,asynchronously,the,test,will,simply,lock,forever;test,public,void,test,fully,async,snapshot,throws,exception,final,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,configure,for,keyed,stream,new,key,selector,string,string,override,public,string,get,key,string,value,throws,exception,return,value,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,file,db,dir,temporary,folder,new,folder,rocks,dbstate,backend,backend,new,rocks,dbstate,backend,new,memory,state,backend,backend,set,db,storage,path,db,dir,get,absolute,path,stream,config,set,state,backend,backend,stream,config,set,stream,operator,new,async,checkpoint,operator,stream,config,set,operator,id,new,operator,id,final,one,shot,latch,delay,checkpoint,latch,new,one,shot,latch,final,one,shot,latch,ensure,checkpoint,latch,new,one,shot,latch,checkpoint,responder,checkpoint,responder,mock,new,checkpoint,responder,override,public,void,acknowledge,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,checkpoint,metrics,checkpoint,metrics,task,state,snapshot,subtask,state,try,delay,checkpoint,latch,await,catch,interrupted,exception,e,throw,new,runtime,exception,e,boolean,has,managed,keyed,state,false,for,map,entry,operator,id,operator,subtask,state,entry,subtask,state,get,subtask,state,mappings,operator,subtask,state,state,entry,get,value,if,state,null,has,managed,keyed,state,state,get,managed,keyed,state,null,assert,true,has,managed,keyed,state,ensure,checkpoint,latch,trigger,override,public,void,decline,checkpoint,job,id,job,id,execution,attempt,id,execution,attempt,id,long,checkpoint,id,throwable,cause,job,id,job,id,new,job,id,execution,attempt,id,execution,attempt,id,new,execution,attempt,id,0l,0l,test,task,state,manager,task,state,manager,test,mock,new,test,task,state,manager,job,id,execution,attempt,id,checkpoint,responder,mock,test,local,recovery,config,disabled,stream,mock,environment,mock,env,new,stream,mock,environment,test,harness,job,config,test,harness,task,config,test,harness,memory,size,new,mock,input,split,provider,test,harness,buffer,size,task,state,manager,test,mock,test,harness,invoke,mock,env,final,one,input,stream,task,string,string,task,test,harness,get,task,for,field,field,stream,task,class,get,declared,fields,if,field,get,name,equals,is,running,field,set,accessible,true,while,field,get,boolean,task,thread,sleep,10,task,trigger,checkpoint,new,checkpoint,meta,data,42,17,checkpoint,options,for,checkpoint,with,default,location,test,harness,process,element,new,stream,record,wohoo,0,delay,checkpoint,latch,trigger,ensure,checkpoint,latch,await,test,harness,end,input,executor,service,thread,pool,task,get,async,operations,thread,pool,thread,pool,shutdown,assert,assert,true,thread,pool,await,termination,time,unit,milliseconds,test,harness,wait,for,task,completion,if,mock,env,was,failed,externally,fail,unexpected,exception,during,execution
