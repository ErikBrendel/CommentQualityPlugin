commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void before() {     dataOutputSerializer.clear(). }
false;public;0;7;;@Test public void testSetKey() throws IOException {     for (int parallelism : TEST_PARALLELISMS) {         testSetKeyInternal(IntSerializer.INSTANCE, TEST_INTS, parallelism).         testSetKeyInternal(StringSerializer.INSTANCE, TEST_STRINGS, parallelism).     } }
false;public;0;9;;@Test public void testSetKeyNamespace() throws IOException {     for (int parallelism : TEST_PARALLELISMS) {         testSetKeyNamespaceInternal(IntSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_INTS, TEST_INTS, parallelism).         testSetKeyNamespaceInternal(IntSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_INTS, TEST_STRINGS, parallelism).         testSetKeyNamespaceInternal(StringSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_STRINGS, TEST_INTS, parallelism).         testSetKeyNamespaceInternal(StringSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_STRINGS, TEST_STRINGS, parallelism).     } }
false;public;0;13;;@Test public void testSetKeyNamespaceUserKey() throws IOException {     for (int parallelism : TEST_PARALLELISMS) {         testSetKeyNamespaceUserKeyInternal(IntSerializer.INSTANCE, IntSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_INTS, TEST_INTS, TEST_INTS, parallelism).         testSetKeyNamespaceUserKeyInternal(IntSerializer.INSTANCE, StringSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_INTS, TEST_STRINGS, TEST_INTS, parallelism).         testSetKeyNamespaceUserKeyInternal(StringSerializer.INSTANCE, IntSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_STRINGS, TEST_INTS, TEST_INTS, parallelism).         testSetKeyNamespaceUserKeyInternal(StringSerializer.INSTANCE, StringSerializer.INSTANCE, IntSerializer.INSTANCE, TEST_STRINGS, TEST_STRINGS, TEST_INTS, parallelism).         testSetKeyNamespaceUserKeyInternal(IntSerializer.INSTANCE, IntSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_INTS, TEST_INTS, TEST_STRINGS, parallelism).         testSetKeyNamespaceUserKeyInternal(IntSerializer.INSTANCE, StringSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_INTS, TEST_STRINGS, TEST_STRINGS, parallelism).         testSetKeyNamespaceUserKeyInternal(StringSerializer.INSTANCE, IntSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_STRINGS, TEST_INTS, TEST_STRINGS, parallelism).         testSetKeyNamespaceUserKeyInternal(StringSerializer.INSTANCE, StringSerializer.INSTANCE, StringSerializer.INSTANCE, TEST_STRINGS, TEST_STRINGS, TEST_STRINGS, parallelism).     } }
false;private;3;14;;private <K> void testSetKeyInternal(TypeSerializer<K> serializer, Collection<K> testKeys, int maxParallelism) throws IOException {     final int prefixBytes = maxParallelism > Byte.MAX_VALUE ? 2 : 1.     RocksDBSerializedCompositeKeyBuilder<K> keyBuilder = createRocksDBSerializedCompositeKeyBuilder(serializer, prefixBytes).     final DataInputDeserializer deserializer = new DataInputDeserializer().     for (K testKey : testKeys) {         int keyGroup = setKeyAndReturnKeyGroup(keyBuilder, testKey, maxParallelism).         byte[] result = dataOutputSerializer.getCopyOfBuffer().         deserializer.setBuffer(result).         assertKeyKeyGroupBytes(testKey, keyGroup, prefixBytes, serializer, deserializer, false).         Assert.assertEquals(0, deserializer.available()).     } }
false;private;5;33;;private <K, N> void testSetKeyNamespaceInternal(TypeSerializer<K> keySerializer, TypeSerializer<N> namespaceSerializer, Collection<K> testKeys, Collection<N> testNamespaces, int maxParallelism) throws IOException {     final int prefixBytes = maxParallelism > Byte.MAX_VALUE ? 2 : 1.     RocksDBSerializedCompositeKeyBuilder<K> keyBuilder = createRocksDBSerializedCompositeKeyBuilder(keySerializer, prefixBytes).     final DataInputDeserializer deserializer = new DataInputDeserializer().     final boolean ambiguousPossible = keyBuilder.isAmbiguousCompositeKeyPossible(namespaceSerializer).     for (K testKey : testKeys) {         int keyGroup = setKeyAndReturnKeyGroup(keyBuilder, testKey, maxParallelism).         for (N testNamespace : testNamespaces) {             byte[] compositeBytes = keyBuilder.buildCompositeKeyNamespace(testNamespace, namespaceSerializer).             deserializer.setBuffer(compositeBytes).             assertKeyGroupKeyNamespaceBytes(testKey, keyGroup, prefixBytes, keySerializer, testNamespace, namespaceSerializer, deserializer, ambiguousPossible).             Assert.assertEquals(0, deserializer.available()).         }     } }
false;private;7;45;;private <K, N, U> void testSetKeyNamespaceUserKeyInternal(TypeSerializer<K> keySerializer, TypeSerializer<N> namespaceSerializer, TypeSerializer<U> userKeySerializer, Collection<K> testKeys, Collection<N> testNamespaces, Collection<U> testUserKeys, int maxParallelism) throws IOException {     final int prefixBytes = maxParallelism > Byte.MAX_VALUE ? 2 : 1.     RocksDBSerializedCompositeKeyBuilder<K> keyBuilder = createRocksDBSerializedCompositeKeyBuilder(keySerializer, prefixBytes).     final DataInputDeserializer deserializer = new DataInputDeserializer().     final boolean ambiguousPossible = keyBuilder.isAmbiguousCompositeKeyPossible(namespaceSerializer).     for (K testKey : testKeys) {         int keyGroup = setKeyAndReturnKeyGroup(keyBuilder, testKey, maxParallelism).         for (N testNamespace : testNamespaces) {             for (U testUserKey : testUserKeys) {                 byte[] compositeBytes = keyBuilder.buildCompositeKeyNamesSpaceUserKey(testNamespace, namespaceSerializer, testUserKey, userKeySerializer).                 deserializer.setBuffer(compositeBytes).                 assertKeyGroupKeyNamespaceUserKeyBytes(testKey, keyGroup, prefixBytes, keySerializer, testNamespace, namespaceSerializer, testUserKey, userKeySerializer, deserializer, ambiguousPossible).                 Assert.assertEquals(0, deserializer.available()).             }         }     } }
false;private;2;11;;private <K> RocksDBSerializedCompositeKeyBuilder<K> createRocksDBSerializedCompositeKeyBuilder(TypeSerializer<K> serializer, int prefixBytes) {     final boolean variableSize = RocksDBKeySerializationUtils.isSerializerTypeVariableSized(serializer).     return new RocksDBSerializedCompositeKeyBuilder<>(serializer, dataOutputSerializer, prefixBytes, variableSize, 0). }
false;private;3;9;;private <K> int setKeyAndReturnKeyGroup(RocksDBSerializedCompositeKeyBuilder<K> compositeKeyBuilder, K key, int maxParallelism) {     int keyGroup = KeyGroupRangeAssignment.assignKeyToParallelOperator(key, maxParallelism, maxParallelism).     compositeKeyBuilder.setKeyAndKeyGroup(key, keyGroup).     return keyGroup. }
false;private;6;11;;private <K> void assertKeyKeyGroupBytes(K key, int keyGroup, int prefixBytes, TypeSerializer<K> typeSerializer, DataInputDeserializer deserializer, boolean ambiguousCompositeKeyPossible) throws IOException {     Assert.assertEquals(keyGroup, RocksDBKeySerializationUtils.readKeyGroup(prefixBytes, deserializer)).     Assert.assertEquals(key, RocksDBKeySerializationUtils.readKey(typeSerializer, deserializer, ambiguousCompositeKeyPossible)). }
false;private;8;14;;private <K, N> void assertKeyGroupKeyNamespaceBytes(K key, int keyGroup, int prefixBytes, TypeSerializer<K> keySerializer, N namespace, TypeSerializer<N> namespaceSerializer, DataInputDeserializer deserializer, boolean ambiguousCompositeKeyPossible) throws IOException {     assertKeyKeyGroupBytes(key, keyGroup, prefixBytes, keySerializer, deserializer, ambiguousCompositeKeyPossible).     N readNamespace = RocksDBKeySerializationUtils.readNamespace(namespaceSerializer, deserializer, ambiguousCompositeKeyPossible).     Assert.assertEquals(namespace, readNamespace). }
false;private;10;22;;private <K, N, U> void assertKeyGroupKeyNamespaceUserKeyBytes(K key, int keyGroup, int prefixBytes, TypeSerializer<K> keySerializer, N namespace, TypeSerializer<N> namespaceSerializer, U userKey, TypeSerializer<U> userKeySerializer, DataInputDeserializer deserializer, boolean ambiguousCompositeKeyPossible) throws IOException {     assertKeyGroupKeyNamespaceBytes(key, keyGroup, prefixBytes, keySerializer, namespace, namespaceSerializer, deserializer, ambiguousCompositeKeyPossible).     Assert.assertEquals(userKey, userKeySerializer.deserialize(deserializer)). }
