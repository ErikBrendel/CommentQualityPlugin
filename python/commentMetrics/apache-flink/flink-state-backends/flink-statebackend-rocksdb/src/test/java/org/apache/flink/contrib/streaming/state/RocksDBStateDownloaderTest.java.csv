commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public FSDataInputStream openInputStream() throws IOException {     throw expectedException. }
false;public;0;4;;@Override public void discardState() { }
false;public;0;4;;@Override public long getStateSize() {     return 0. }
true;public;0;42;/**  * Test that the exception arose in the thread pool will rethrow to the main thread.  */ ;/**  * Test that the exception arose in the thread pool will rethrow to the main thread.  */ @Test public void testMultiThreadRestoreThreadPoolExceptionRethrow() {     SpecifiedException expectedException = new SpecifiedException("throw exception while multi thread restore.").     StreamStateHandle stateHandle = new StreamStateHandle() {          @Override         public FSDataInputStream openInputStream() throws IOException {             throw expectedException.         }          @Override         public void discardState() {         }          @Override         public long getStateSize() {             return 0.         }     }.     Map<StateHandleID, StreamStateHandle> stateHandles = new HashMap<>(1).     stateHandles.put(new StateHandleID("state1"), stateHandle).     IncrementalRemoteKeyedStateHandle incrementalKeyedStateHandle = new IncrementalRemoteKeyedStateHandle(UUID.randomUUID(), KeyGroupRange.EMPTY_KEY_GROUP_RANGE, 1, stateHandles, stateHandles, stateHandle).     try (RocksDBStateDownloader rocksDBStateDownloader = new RocksDBStateDownloader(5)) {         rocksDBStateDownloader.transferAllStateDataToDirectory(incrementalKeyedStateHandle, new Path(temporaryFolder.newFolder().toURI()), new CloseableRegistry()).         fail().     } catch (Exception e) {         assertEquals(expectedException, e).     } }
true;public;0;40;/**  * Tests that download files with multi-thread correctly.  */ ;/**  * Tests that download files with multi-thread correctly.  */ @Test public void testMultiThreadRestoreCorrectly() throws Exception {     Random random = new Random().     int contentNum = 6.     byte[][] contents = new byte[contentNum][].     for (int i = 0. i < contentNum. ++i) {         contents[i] = new byte[random.nextInt(100000) + 1].         random.nextBytes(contents[i]).     }     List<StreamStateHandle> handles = new ArrayList<>(contentNum).     for (int i = 0. i < contentNum. ++i) {         handles.add(new ByteStreamStateHandle(String.format("state%d", i), contents[i])).     }     Map<StateHandleID, StreamStateHandle> sharedStates = new HashMap<>(contentNum).     Map<StateHandleID, StreamStateHandle> privateStates = new HashMap<>(contentNum).     for (int i = 0. i < contentNum. ++i) {         sharedStates.put(new StateHandleID(String.format("sharedState%d", i)), handles.get(i)).         privateStates.put(new StateHandleID(String.format("privateState%d", i)), handles.get(i)).     }     IncrementalRemoteKeyedStateHandle incrementalKeyedStateHandle = new IncrementalRemoteKeyedStateHandle(UUID.randomUUID(), KeyGroupRange.of(0, 1), 1, sharedStates, privateStates, handles.get(0)).     Path dstPath = new Path(temporaryFolder.newFolder().toURI()).     try (RocksDBStateDownloader rocksDBStateDownloader = new RocksDBStateDownloader(5)) {         rocksDBStateDownloader.transferAllStateDataToDirectory(incrementalKeyedStateHandle, dstPath, new CloseableRegistry()).     }     for (int i = 0. i < contentNum. ++i) {         assertStateContentEqual(contents[i], new Path(dstPath, String.format("sharedState%d", i))).     } }
false;private;2;4;;private void assertStateContentEqual(byte[] expected, Path path) throws IOException {     byte[] actual = Files.readAllBytes(Paths.get(path.toUri())).     assertArrayEquals(expected, actual). }
