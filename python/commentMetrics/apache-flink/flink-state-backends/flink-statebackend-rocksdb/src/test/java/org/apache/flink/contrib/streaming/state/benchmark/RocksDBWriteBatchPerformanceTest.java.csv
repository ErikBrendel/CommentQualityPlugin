commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test(timeout = 2000) @RetryOnFailure(times = 3) public void benchMark() throws Exception {     int num = 10000.     List<Tuple2<byte[], byte[]>> data = new ArrayList<>(num).     for (int i = 0. i < num. ++i) {         data.add(new Tuple2<>((KEY_PREFIX + i).getBytes(), VALUE.getBytes())).     }     log.info("--------------> put VS WriteBatch with disableWAL=false <--------------").     long t1 = benchMarkHelper(data, false, WRITETYPE.PUT).     long t2 = benchMarkHelper(data, false, WRITETYPE.WRITE_BATCH).     log.info("Single Put with disableWAL is false for {} records costs {}", num, t1).     log.info("WriteBatch with disableWAL is false for {} records costs {}", num, t2).     log.info("--------------> put VS WriteBatch with disableWAL=true <--------------").     t1 = benchMarkHelper(data, true, WRITETYPE.PUT).     t2 = benchMarkHelper(data, true, WRITETYPE.WRITE_BATCH).     log.info("Single Put with disableWAL is true for {} records costs {}", num, t1).     log.info("WriteBatch with disableWAL is true for {} records costs {}", num, t2). }
false;private;3;33;;private long benchMarkHelper(List<Tuple2<byte[], byte[]>> data, boolean disableWAL, WRITETYPE type) throws Exception {     final File rocksDir = folder.newFolder().     // ensure the RocksDB library is loaded to a distinct location each retry     NativeLibraryLoader.getInstance().loadLibrary(rocksDir.getAbsolutePath()).     switch(type) {         case PUT:             try (RocksDB db = RocksDB.open(rocksDir.getAbsolutePath()).                 WriteOptions options = new WriteOptions().setDisableWAL(disableWAL).                 ColumnFamilyHandle handle = db.createColumnFamily(new ColumnFamilyDescriptor("test".getBytes()))) {                 long t1 = System.nanoTime().                 for (Tuple2<byte[], byte[]> item : data) {                     db.put(handle, options, item.f0, item.f1).                 }                 return System.nanoTime() - t1.             }         case WRITE_BATCH:             try (RocksDB db = RocksDB.open(rocksDir.getAbsolutePath()).                 WriteOptions options = new WriteOptions().setDisableWAL(disableWAL).                 ColumnFamilyHandle handle = db.createColumnFamily(new ColumnFamilyDescriptor("test".getBytes())).                 RocksDBWriteBatchWrapper writeBatchWrapper = new RocksDBWriteBatchWrapper(db, options)) {                 long t1 = System.nanoTime().                 for (Tuple2<byte[], byte[]> item : data) {                     writeBatchWrapper.put(handle, item.f0, item.f1).                 }                 writeBatchWrapper.flush().                 return System.nanoTime() - t1.             }         default:             throw new RuntimeException("Unknown benchmark type:" + type).     } }
