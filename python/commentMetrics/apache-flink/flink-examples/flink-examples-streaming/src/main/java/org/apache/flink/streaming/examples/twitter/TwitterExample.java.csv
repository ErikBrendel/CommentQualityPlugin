# id;timestamp;commentText;codeText;commentWords;codeWords
TwitterExample -> SelectEnglishAndTokenizeFlatMap -> @Override 		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception;1458145850;Select the language from the incoming JSON text;@Override_		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {_			if(jsonParser == null) {_				jsonParser = new ObjectMapper()__			}_			JsonNode jsonNode = jsonParser.readValue(value, JsonNode.class)__			if (jsonNode.has("user") && jsonNode.get("user").get("lang").asText().equals("en")) {_				_				StringTokenizer tokenizer = new StringTokenizer(jsonNode.get("text").asText())___				_				while (tokenizer.hasMoreTokens()) {_					String result = tokenizer.nextToken().replaceAll("\\s*", "").toLowerCase()___					if (!result.equals("")) {_						out.collect(new Tuple2<>(result, 1))__					}_				}_			}_		};select,the,language,from,the,incoming,json,text;override,public,void,flat,map,string,value,collector,tuple2,string,integer,out,throws,exception,if,json,parser,null,json,parser,new,object,mapper,json,node,json,node,json,parser,read,value,value,json,node,class,if,json,node,has,user,json,node,get,user,get,lang,as,text,equals,en,string,tokenizer,tokenizer,new,string,tokenizer,json,node,get,text,as,text,while,tokenizer,has,more,tokens,string,result,tokenizer,next,token,replace,all,s,to,lower,case,if,result,equals,out,collect,new,tuple2,result,1
TwitterExample -> SelectEnglishAndTokenizeFlatMap -> @Override 		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception;1459766894;Select the language from the incoming JSON text;@Override_		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {_			if(jsonParser == null) {_				jsonParser = new ObjectMapper()__			}_			JsonNode jsonNode = jsonParser.readValue(value, JsonNode.class)__			boolean isEnglish = jsonNode.has("user") && jsonNode.get("user").has("lang") && jsonNode.get("user").get("lang").asText().equals("en")__			boolean hasText = jsonNode.has("text")__			if (isEnglish && hasText) {_				_				StringTokenizer tokenizer = new StringTokenizer(jsonNode.get("text").asText())___				_				while (tokenizer.hasMoreTokens()) {_					String result = tokenizer.nextToken().replaceAll("\\s*", "").toLowerCase()___					if (!result.equals("")) {_						out.collect(new Tuple2<>(result, 1))__					}_				}_			}_		};select,the,language,from,the,incoming,json,text;override,public,void,flat,map,string,value,collector,tuple2,string,integer,out,throws,exception,if,json,parser,null,json,parser,new,object,mapper,json,node,json,node,json,parser,read,value,value,json,node,class,boolean,is,english,json,node,has,user,json,node,get,user,has,lang,json,node,get,user,get,lang,as,text,equals,en,boolean,has,text,json,node,has,text,if,is,english,has,text,string,tokenizer,tokenizer,new,string,tokenizer,json,node,get,text,as,text,while,tokenizer,has,more,tokens,string,result,tokenizer,next,token,replace,all,s,to,lower,case,if,result,equals,out,collect,new,tuple2,result,1
TwitterExample -> SelectEnglishAndTokenizeFlatMap -> @Override 		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception;1493895399;Select the language from the incoming JSON text;@Override_		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {_			if(jsonParser == null) {_				jsonParser = new ObjectMapper()__			}_			JsonNode jsonNode = jsonParser.readValue(value, JsonNode.class)__			boolean isEnglish = jsonNode.has("user") && jsonNode.get("user").has("lang") && jsonNode.get("user").get("lang").asText().equals("en")__			boolean hasText = jsonNode.has("text")__			if (isEnglish && hasText) {_				_				StringTokenizer tokenizer = new StringTokenizer(jsonNode.get("text").asText())___				_				while (tokenizer.hasMoreTokens()) {_					String result = tokenizer.nextToken().replaceAll("\\s*", "").toLowerCase()___					if (!result.equals("")) {_						out.collect(new Tuple2<>(result, 1))__					}_				}_			}_		};select,the,language,from,the,incoming,json,text;override,public,void,flat,map,string,value,collector,tuple2,string,integer,out,throws,exception,if,json,parser,null,json,parser,new,object,mapper,json,node,json,node,json,parser,read,value,value,json,node,class,boolean,is,english,json,node,has,user,json,node,get,user,has,lang,json,node,get,user,get,lang,as,text,equals,en,boolean,has,text,json,node,has,text,if,is,english,has,text,string,tokenizer,tokenizer,new,string,tokenizer,json,node,get,text,as,text,while,tokenizer,has,more,tokens,string,result,tokenizer,next,token,replace,all,s,to,lower,case,if,result,equals,out,collect,new,tuple2,result,1
TwitterExample -> SelectEnglishAndTokenizeFlatMap -> @Override 		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception;1495698510;Select the language from the incoming JSON text.;@Override_		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {_			if (jsonParser == null) {_				jsonParser = new ObjectMapper()__			}_			JsonNode jsonNode = jsonParser.readValue(value, JsonNode.class)__			boolean isEnglish = jsonNode.has("user") && jsonNode.get("user").has("lang") && jsonNode.get("user").get("lang").asText().equals("en")__			boolean hasText = jsonNode.has("text")__			if (isEnglish && hasText) {_				_				StringTokenizer tokenizer = new StringTokenizer(jsonNode.get("text").asText())___				_				while (tokenizer.hasMoreTokens()) {_					String result = tokenizer.nextToken().replaceAll("\\s*", "").toLowerCase()___					if (!result.equals("")) {_						out.collect(new Tuple2<>(result, 1))__					}_				}_			}_		};select,the,language,from,the,incoming,json,text;override,public,void,flat,map,string,value,collector,tuple2,string,integer,out,throws,exception,if,json,parser,null,json,parser,new,object,mapper,json,node,json,node,json,parser,read,value,value,json,node,class,boolean,is,english,json,node,has,user,json,node,get,user,has,lang,json,node,get,user,get,lang,as,text,equals,en,boolean,has,text,json,node,has,text,if,is,english,has,text,string,tokenizer,tokenizer,new,string,tokenizer,json,node,get,text,as,text,while,tokenizer,has,more,tokens,string,result,tokenizer,next,token,replace,all,s,to,lower,case,if,result,equals,out,collect,new,tuple2,result,1
TwitterExample -> SelectEnglishAndTokenizeFlatMap -> @Override 		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception;1509447226;Select the language from the incoming JSON text.;@Override_		public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {_			if (jsonParser == null) {_				jsonParser = new ObjectMapper()__			}_			JsonNode jsonNode = jsonParser.readValue(value, JsonNode.class)__			boolean isEnglish = jsonNode.has("user") && jsonNode.get("user").has("lang") && jsonNode.get("user").get("lang").asText().equals("en")__			boolean hasText = jsonNode.has("text")__			if (isEnglish && hasText) {_				_				StringTokenizer tokenizer = new StringTokenizer(jsonNode.get("text").asText())___				_				while (tokenizer.hasMoreTokens()) {_					String result = tokenizer.nextToken().replaceAll("\\s*", "").toLowerCase()___					if (!result.equals("")) {_						out.collect(new Tuple2<>(result, 1))__					}_				}_			}_		};select,the,language,from,the,incoming,json,text;override,public,void,flat,map,string,value,collector,tuple2,string,integer,out,throws,exception,if,json,parser,null,json,parser,new,object,mapper,json,node,json,node,json,parser,read,value,value,json,node,class,boolean,is,english,json,node,has,user,json,node,get,user,has,lang,json,node,get,user,get,lang,as,text,equals,en,boolean,has,text,json,node,has,text,if,is,english,has,text,string,tokenizer,tokenizer,new,string,tokenizer,json,node,get,text,as,text,while,tokenizer,has,more,tokens,string,result,tokenizer,next,token,replace,all,s,to,lower,case,if,result,equals,out,collect,new,tuple2,result,1
