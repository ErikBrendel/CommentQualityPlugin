commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the event's type.  */ ;/**  * Gets the event's type.  */ public EventType type() {     return type. }
true;public;0;3;/**  * Gets the event's source address.  */ ;/**  * Gets the event's source address.  */ public int sourceAddress() {     return sourceAddress. }
false;public;0;4;;// ------------------------------------------------------------------------ // Miscellaneous // ------------------------------------------------------------------------ @Override public int hashCode() {     return 31 * type.hashCode() + sourceAddress. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     } else if (obj == null || getClass() != obj.getClass()) {         return false.     } else {         final Event that = (Event) obj.         return this.type == that.type && this.sourceAddress == that.sourceAddress.     } }
false;public;0;4;;@Override public String toString() {     return "Event " + formatAddress(sourceAddress) + " : " + type.name(). }
true;public,static;1;8;/**  * Util method to create a string representation of a 32 bit integer representing  * an IPv4 address.  *  * @param address The address, MSB first.  * @return The IP address string.  */ ;// ------------------------------------------------------------------------ // Utils // ------------------------------------------------------------------------ /**  * Util method to create a string representation of a 32 bit integer representing  * an IPv4 address.  *  * @param address The address, MSB first.  * @return The IP address string.  */ public static String formatAddress(int address) {     int b1 = (address >>> 24) & 0xff.     int b2 = (address >>> 16) & 0xff.     int b3 = (address >>> 8) & 0xff.     int b4 = address & 0xff.     return "" + b1 + '.' + b2 + '.' + b3 + '.' + b4. }
