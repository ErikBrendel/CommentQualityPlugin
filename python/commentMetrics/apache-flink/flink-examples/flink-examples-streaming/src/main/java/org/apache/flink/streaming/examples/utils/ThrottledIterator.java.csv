commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean hasNext() {     return source.hasNext(). }
false;public;0;25;;@Override public T next() {     // delay if necessary     if (lastBatchCheckTime > 0) {         if (++num >= sleepBatchSize) {             num = 0.             final long now = System.currentTimeMillis().             final long elapsed = now - lastBatchCheckTime.             if (elapsed < sleepBatchTime) {                 try {                     Thread.sleep(sleepBatchTime - elapsed).                 } catch (InterruptedException e) {                     // restore interrupt flag and proceed                     Thread.currentThread().interrupt().                 }             }             lastBatchCheckTime = now.         }     } else {         lastBatchCheckTime = System.currentTimeMillis().     }     return source.next(). }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
