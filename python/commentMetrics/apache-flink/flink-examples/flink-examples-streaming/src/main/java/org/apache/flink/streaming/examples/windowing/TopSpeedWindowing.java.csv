commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public double getDelta(Tuple4<Integer, Integer, Double, Long> oldDataPoint, Tuple4<Integer, Integer, Double, Long> newDataPoint) {     return newDataPoint.f2 - oldDataPoint.f2. }
false;public,static;1;47;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime).     env.getConfig().setGlobalJobParameters(params).     @SuppressWarnings({ "rawtypes", "serial" })     DataStream<Tuple4<Integer, Integer, Double, Long>> carData.     if (params.has("input")) {         carData = env.readTextFile(params.get("input")).map(new ParseCarData()).     } else {         System.out.println("Executing TopSpeedWindowing example with default input data set.").         System.out.println("Use --input to specify file input.").         carData = env.addSource(CarSource.create(2)).     }     int evictionSec = 10.     double triggerMeters = 50.     DataStream<Tuple4<Integer, Integer, Double, Long>> topSpeeds = carData.assignTimestampsAndWatermarks(new CarTimestamp()).keyBy(0).window(GlobalWindows.create()).evictor(TimeEvictor.of(Time.of(evictionSec, TimeUnit.SECONDS))).trigger(DeltaTrigger.of(triggerMeters, new DeltaFunction<Tuple4<Integer, Integer, Double, Long>>() {          private static final long serialVersionUID = 1L.          @Override         public double getDelta(Tuple4<Integer, Integer, Double, Long> oldDataPoint, Tuple4<Integer, Integer, Double, Long> newDataPoint) {             return newDataPoint.f2 - oldDataPoint.f2.         }     }, carData.getType().createSerializer(env.getConfig()))).maxBy(1).     if (params.has("output")) {         topSpeeds.writeAsText(params.get("output")).     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         topSpeeds.print().     }     env.execute("CarTopSpeedWindowingExample"). }
false;public,static;1;3;;public static CarSource create(int cars) {     return new CarSource(cars). }
false;public;1;18;;@Override public void run(SourceContext<Tuple4<Integer, Integer, Double, Long>> ctx) throws Exception {     while (isRunning) {         Thread.sleep(100).         for (int carId = 0. carId < speeds.length. carId++) {             if (rand.nextBoolean()) {                 speeds[carId] = Math.min(100, speeds[carId] + 5).             } else {                 speeds[carId] = Math.max(0, speeds[carId] - 5).             }             distances[carId] += speeds[carId] / 3.6d.             Tuple4<Integer, Integer, Double, Long> record = new Tuple4<>(carId, speeds[carId], distances[carId], System.currentTimeMillis()).             ctx.collect(record).         }     } }
false;public;0;4;;@Override public void cancel() {     isRunning = false. }
false;public;1;6;;@Override public Tuple4<Integer, Integer, Double, Long> map(String record) {     String rawData = record.substring(1, record.length() - 1).     String[] data = rawData.split(",").     return new Tuple4<>(Integer.valueOf(data[0]), Integer.valueOf(data[1]), Double.valueOf(data[2]), Long.valueOf(data[3])). }
false;public;1;4;;@Override public long extractAscendingTimestamp(Tuple4<Integer, Integer, Double, Long> element) {     return element.f3. }
