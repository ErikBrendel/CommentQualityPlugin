commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Integer getKey(String value) throws Exception {     return 0. }
false;public;1;4;;@Override public String map(String value) throws Exception {     return "rejected: " + value. }
false;public,static;1;66;;public static void main(String[] args) throws Exception {     // Checking input parameters     final ParameterTool params = ParameterTool.fromArgs(args).     // set up the execution environment     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // get input data     DataStream<String> text.     if (params.has("input")) {         // read the text file from given input path         text = env.readTextFile(params.get("input")).     } else {         System.out.println("Executing WordCount example with default input data set.").         System.out.println("Use --input to specify file input.").         // get default test text data         text = env.fromElements(WordCountData.WORDS).     }     SingleOutputStreamOperator<Tuple2<String, Integer>> tokenized = text.keyBy(new KeySelector<String, Integer>() {          private static final long serialVersionUID = 1L.          @Override         public Integer getKey(String value) throws Exception {             return 0.         }     }).process(new Tokenizer()).     DataStream<String> rejectedWords = tokenized.getSideOutput(rejectedWordsTag).map(new MapFunction<String, String>() {          private static final long serialVersionUID = 1L.          @Override         public String map(String value) throws Exception {             return "rejected: " + value.         }     }).     DataStream<Tuple2<String, Integer>> counts = tokenized.keyBy(0).window(TumblingEventTimeWindows.of(Time.seconds(5))).sum(1).     // emit result     if (params.has("output")) {         counts.writeAsText(params.get("output")).         rejectedWords.writeAsText(params.get("rejected-words-output")).     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         counts.print().         rejectedWords.print().     }     // execute program     env.execute("Streaming WordCount SideOutput"). }
false;public;3;18;;@Override public void processElement(String value, Context ctx, Collector<Tuple2<String, Integer>> out) throws Exception {     // normalize and split the line     String[] tokens = value.toLowerCase().split("\\W+").     // emit the pairs     for (String token : tokens) {         if (token.length() > 5) {             ctx.output(rejectedWordsTag, token).         } else if (token.length() > 0) {             out.collect(new Tuple2<>(token, 1)).         }     } }
