commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;30;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     // parse the parameters     final ParameterTool params = ParameterTool.fromArgs(args).     final long windowSize = params.getLong("windowSize", 2000).     final long rate = params.getLong("rate", 3L).     System.out.println("Using windowSize=" + windowSize + ", data rate=" + rate).     System.out.println("To customize example, use: WindowJoin [--windowSize <window-size-in-millis>] [--rate <elements-per-second>]").     // obtain execution environment, run this example in "ingestion time"     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // create the data sources for both grades and salaries     DataStream<Tuple2<String, Integer>> grades = GradeSource.getSource(env, rate).     DataStream<Tuple2<String, Integer>> salaries = SalarySource.getSource(env, rate).     // run the actual window join program     // for testability, this functionality is in a separate method.     DataStream<Tuple3<String, Integer, Integer>> joinedStream = runWindowJoin(grades, salaries, windowSize).     // print the results with a single thread, rather than in parallel     joinedStream.print().setParallelism(1).     // execute program     env.execute("Windowed Join Example"). }
false;public;2;6;;@Override public Tuple3<String, Integer, Integer> join(Tuple2<String, Integer> first, Tuple2<String, Integer> second) {     return new Tuple3<String, Integer, Integer>(first.f0, first.f1, second.f1). }
false;public,static;3;21;;public static DataStream<Tuple3<String, Integer, Integer>> runWindowJoin(DataStream<Tuple2<String, Integer>> grades, DataStream<Tuple2<String, Integer>> salaries, long windowSize) {     return grades.join(salaries).where(new NameKeySelector()).equalTo(new NameKeySelector()).window(TumblingEventTimeWindows.of(Time.milliseconds(windowSize))).apply(new JoinFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>>() {          @Override         public Tuple3<String, Integer, Integer> join(Tuple2<String, Integer> first, Tuple2<String, Integer> second) {             return new Tuple3<String, Integer, Integer>(first.f0, first.f1, second.f1).         }     }). }
false;public;1;4;;@Override public String getKey(Tuple2<String, Integer> value) {     return value.f0. }
