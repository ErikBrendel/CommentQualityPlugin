commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;44;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String... args) throws Exception {     // Checking input parameters     final ParameterTool params = ParameterTool.fromArgs(args).     // set up execution environment     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final int maxIterations = params.getInt("iterations", 10).     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // read vertex and edge data     DataSet<Long> vertices = getVertexDataSet(env, params).     DataSet<Tuple2<Long, Long>> edges = getEdgeDataSet(env, params).flatMap(new UndirectEdge()).     // assign the initial components (equal to the vertex id)     DataSet<Tuple2<Long, Long>> verticesWithInitialId = vertices.map(new DuplicateValue<Long>()).     // open a delta iteration     DeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration = verticesWithInitialId.iterateDelta(verticesWithInitialId, maxIterations, 0).     // apply the step logic: join with the edges, select the minimum neighbor, update if the component of the candidate is smaller     DataSet<Tuple2<Long, Long>> changes = iteration.getWorkset().join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).aggregate(Aggregations.MIN, 1).join(iteration.getSolutionSet()).where(0).equalTo(0).with(new ComponentIdFilter()).     // close the delta iteration (delta and new workset are identical)     DataSet<Tuple2<Long, Long>> result = iteration.closeWith(changes, changes).     // emit result     if (params.has("output")) {         result.writeAsCsv(params.get("output"), "\n", " ").         // execute program         env.execute("Connected Components Example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         result.print().     } }
false;public;1;4;;@Override public Tuple2<T, T> map(T vertex) {     return new Tuple2<T, T>(vertex, vertex). }
false;public;2;7;;@Override public void flatMap(Tuple2<Long, Long> edge, Collector<Tuple2<Long, Long>> out) {     invertedEdge.f0 = edge.f1.     invertedEdge.f1 = edge.f0.     out.collect(edge).     out.collect(invertedEdge). }
false;public;2;4;;@Override public Tuple2<Long, Long> join(Tuple2<Long, Long> vertexWithComponent, Tuple2<Long, Long> edge) {     return new Tuple2<Long, Long>(edge.f1, vertexWithComponent.f1). }
false;public;3;6;;@Override public void join(Tuple2<Long, Long> candidate, Tuple2<Long, Long> old, Collector<Tuple2<Long, Long>> out) {     if (candidate.f1 < old.f1) {         out.collect(candidate).     } }
false;public;1;3;;public Long map(Tuple1<Long> value) {     return value.f0. }
false;private,static;2;14;;// ************************************************************************* // UTIL METHODS // ************************************************************************* private static DataSet<Long> getVertexDataSet(ExecutionEnvironment env, ParameterTool params) {     if (params.has("vertices")) {         return env.readCsvFile(params.get("vertices")).types(Long.class).map(new MapFunction<Tuple1<Long>, Long>() {              public Long map(Tuple1<Long> value) {                 return value.f0.             }         }).     } else {         System.out.println("Executing Connected Components example with default vertices data set.").         System.out.println("Use --vertices to specify file input.").         return ConnectedComponentsData.getDefaultVertexDataSet(env).     } }
false;private,static;2;9;;private static DataSet<Tuple2<Long, Long>> getEdgeDataSet(ExecutionEnvironment env, ParameterTool params) {     if (params.has("edges")) {         return env.readCsvFile(params.get("edges")).fieldDelimiter(" ").types(Long.class, Long.class).     } else {         System.out.println("Executing Connected Components example with default edges data set.").         System.out.println("Use --edges to specify file input.").         return ConnectedComponentsData.getDefaultEdgeDataSet(env).     } }
