commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;// getters setters ;// getters setters public String getWord() {     return word. }
false;public;1;3;;public void setWord(String word) {     this.word = word. }
false;public;0;3;;public int getFrequency() {     return frequency. }
false;public;1;3;;public void setFrequency(int frequency) {     this.frequency = frequency. }
false;public;0;4;;@Override public String toString() {     return "Word=" + word + " freq=" + frequency. }
false;public;2;4;;@Override public Word reduce(Word value1, Word value2) throws Exception {     return new Word(value1.word, value1.frequency + value2.frequency). }
false;public,static;1;44;;public static void main(String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     // set up the execution environment     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // get input data     DataSet<String> text.     if (params.has("input")) {         // read the text file from given input path         text = env.readTextFile(params.get("input")).     } else {         // get default test text data         System.out.println("Executing WordCount example with default input data set.").         System.out.println("Use --input to specify file input.").         text = WordCountData.getDefaultTextLineDataSet(env).     }     DataSet<Word> counts = // split up the lines into Word objects (with frequency = 1)     text.flatMap(new Tokenizer()).groupBy("word").reduce(new ReduceFunction<Word>() {          @Override         public Word reduce(Word value1, Word value2) throws Exception {             return new Word(value1.word, value1.frequency + value2.frequency).         }     }).     if (params.has("output")) {         counts.writeAsText(params.get("output"), WriteMode.OVERWRITE).         // execute program         env.execute("WordCount-Pojo Example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         counts.print().     } }
false;public;2;12;;@Override public void flatMap(String value, Collector<Word> out) {     // normalize and split the line     String[] tokens = value.toLowerCase().split("\\W+").     // emit the pairs     for (String token : tokens) {         if (token.length() > 0) {             out.collect(new Word(token, 1)).         }     } }
