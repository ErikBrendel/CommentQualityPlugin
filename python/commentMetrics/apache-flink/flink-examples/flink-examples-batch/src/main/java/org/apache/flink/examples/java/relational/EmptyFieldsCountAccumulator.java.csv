commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;32;;public static void main(final String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // get the data set     final DataSet<StringTriple> file = getDataSet(env, params).     // filter lines with empty fields     final DataSet<StringTriple> filteredLines = file.filter(new EmptyFieldFilter()).     // Here, we could do further processing with the filtered lines...     JobExecutionResult result.     // output the filtered lines     if (params.has("output")) {         filteredLines.writeAsCsv(params.get("output")).         // execute program         result = env.execute("Accumulator example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         filteredLines.print().         result = env.getLastJobExecutionResult().     }     // get the accumulator result via its registration key     final List<Integer> emptyFields = result.getAccumulatorResult(EMPTY_FIELD_ACCUMULATOR).     System.out.format("Number of detected empty fields per column: %s\n", emptyFields). }
false;private,static;2;12;;// ************************************************************************* // UTIL METHODS // ************************************************************************* @SuppressWarnings("unchecked") private static DataSet<StringTriple> getDataSet(ExecutionEnvironment env, ParameterTool params) {     if (params.has("input")) {         return env.readCsvFile(params.get("input")).fieldDelimiter(".").pojoType(StringTriple.class).     } else {         System.out.println("Executing EmptyFieldsCountAccumulator example with default input data set.").         System.out.println("Use --input to specify file input.").         return env.fromCollection(getExampleInputTuples()).     } }
false;private,static;0;9;;private static Collection<StringTriple> getExampleInputTuples() {     Collection<StringTriple> inputTuples = new ArrayList<StringTriple>().     inputTuples.add(new StringTriple("John", "Doe", "Foo Str.")).     inputTuples.add(new StringTriple("Joe", "Johnson", "")).     inputTuples.add(new StringTriple(null, "Kate Morn", "Bar Blvd.")).     inputTuples.add(new StringTriple("Tim", "Rinny", "")).     inputTuples.add(new StringTriple("Alicia", "Jackson", "  ")).     return inputTuples. }
false;public;1;8;;@Override public void open(final Configuration parameters) throws Exception {     super.open(parameters).     // register the accumulator instance     getRuntimeContext().addAccumulator(EMPTY_FIELD_ACCUMULATOR, this.emptyFieldCounter). }
false;public;1;19;;@Override public boolean filter(final StringTriple t) {     boolean containsEmptyFields = false.     // iterate over the tuple fields looking for empty ones     for (int pos = 0. pos < t.getArity(). pos++) {         final String field = t.getField(pos).         if (field == null || field.trim().isEmpty()) {             containsEmptyFields = true.             // if an empty field is encountered, update the             // accumulator             this.emptyFieldCounter.add(pos).         }     }     return !containsEmptyFields. }
true;public;1;4;/**  * Increases the result vector component at the specified position by 1.  */ ;/**  * Increases the result vector component at the specified position by 1.  */ @Override public void add(Integer position) {     updateResultVector(position, 1). }
true;private;2;10;/**  * Increases the result vector component at the specified position by the specified delta.  */ ;/**  * Increases the result vector component at the specified position by the specified delta.  */ private void updateResultVector(int position, int delta) {     // inflate the vector to contain the given position     while (this.resultVector.size() <= position) {         this.resultVector.add(0).     }     // increment the component value     final int component = this.resultVector.get(position).     this.resultVector.set(position, component + delta). }
false;public;0;4;;@Override public ArrayList<Integer> getLocalValue() {     return this.resultVector. }
false;public;0;5;;@Override public void resetLocal() {     // clear the result vector if the accumulator instance shall be reused     this.resultVector.clear(). }
false;public;1;8;;@Override public void merge(final Accumulator<Integer, ArrayList<Integer>> other) {     // merge two vector accumulators by adding their up their vector components     final List<Integer> otherVector = other.getLocalValue().     for (int index = 0. index < otherVector.size(). index++) {         updateResultVector(index, otherVector.get(index)).     } }
false;public;0;4;;@Override public Accumulator<Integer, ArrayList<Integer>> clone() {     return new VectorAccumulator(new ArrayList<Integer>(resultVector)). }
false;public;0;4;;@Override public String toString() {     return StringUtils.join(resultVector, ','). }
