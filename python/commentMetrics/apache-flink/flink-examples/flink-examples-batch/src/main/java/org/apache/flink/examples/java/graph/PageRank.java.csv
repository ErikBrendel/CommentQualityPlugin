commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;52;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     ParameterTool params = ParameterTool.fromArgs(args).     final int numPages = params.getInt("numPages", PageRankData.getNumberOfPages()).     final int maxIterations = params.getInt("iterations", 10).     // set up execution environment     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // make the parameters available to the web ui     env.getConfig().setGlobalJobParameters(params).     // get input data     DataSet<Long> pagesInput = getPagesDataSet(env, params).     DataSet<Tuple2<Long, Long>> linksInput = getLinksDataSet(env, params).     // assign initial rank to pages     DataSet<Tuple2<Long, Double>> pagesWithRanks = pagesInput.map(new RankAssigner((1.0d / numPages))).     // build adjacency list from link input     DataSet<Tuple2<Long, Long[]>> adjacencyListInput = linksInput.groupBy(0).reduceGroup(new BuildOutgoingEdgeList()).     // set iterative data set     IterativeDataSet<Tuple2<Long, Double>> iteration = pagesWithRanks.iterate(maxIterations).     DataSet<Tuple2<Long, Double>> newRanks = iteration.join(adjacencyListInput).where(0).equalTo(0).flatMap(new JoinVertexWithEdgesMatch()).groupBy(0).aggregate(SUM, 1).map(new Dampener(DAMPENING_FACTOR, numPages)).     DataSet<Tuple2<Long, Double>> finalPageRanks = iteration.closeWith(newRanks, newRanks.join(iteration).where(0).equalTo(0).filter(new EpsilonFilter())).     // emit result     if (params.has("output")) {         finalPageRanks.writeAsCsv(params.get("output"), "\n", " ").         // execute program         env.execute("Basic Page Rank Example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         finalPageRanks.print().     } }
false;public;1;5;;@Override public Tuple2<Long, Double> map(Long page) {     outPageWithRank.f0 = page.     return outPageWithRank. }
false;public;2;11;;@Override public void reduce(Iterable<Tuple2<Long, Long>> values, Collector<Tuple2<Long, Long[]>> out) {     neighbors.clear().     Long id = 0L.     for (Tuple2<Long, Long> n : values) {         id = n.f0.         neighbors.add(n.f1).     }     out.collect(new Tuple2<Long, Long[]>(id, neighbors.toArray(new Long[neighbors.size()]))). }
false;public;2;10;;@Override public void flatMap(Tuple2<Tuple2<Long, Double>, Tuple2<Long, Long[]>> value, Collector<Tuple2<Long, Double>> out) {     Long[] neighbors = value.f1.f1.     double rank = value.f0.f1.     double rankToDistribute = rank / ((double) neighbors.length).     for (Long neighbor : neighbors) {         out.collect(new Tuple2<Long, Double>(neighbor, rankToDistribute)).     } }
false;public;1;5;;@Override public Tuple2<Long, Double> map(Tuple2<Long, Double> value) {     value.f1 = (value.f1 * dampening) + randomJump.     return value. }
false;public;1;4;;@Override public boolean filter(Tuple2<Tuple2<Long, Double>, Tuple2<Long, Double>> value) {     return Math.abs(value.f0.f1 - value.f1.f1) > EPSILON. }
false;public;1;4;;@Override public Long map(Tuple1<Long> v) {     return v.f0. }
false;private,static;2;18;;// ************************************************************************* // UTIL METHODS // ************************************************************************* private static DataSet<Long> getPagesDataSet(ExecutionEnvironment env, ParameterTool params) {     if (params.has("pages")) {         return env.readCsvFile(params.get("pages")).fieldDelimiter(" ").lineDelimiter("\n").types(Long.class).map(new MapFunction<Tuple1<Long>, Long>() {              @Override             public Long map(Tuple1<Long> v) {                 return v.f0.             }         }).     } else {         System.out.println("Executing PageRank example with default pages data set.").         System.out.println("Use --pages to specify file input.").         return PageRankData.getDefaultPagesDataSet(env).     } }
false;private,static;2;12;;private static DataSet<Tuple2<Long, Long>> getLinksDataSet(ExecutionEnvironment env, ParameterTool params) {     if (params.has("links")) {         return env.readCsvFile(params.get("links")).fieldDelimiter(" ").lineDelimiter("\n").types(Long.class, Long.class).     } else {         System.out.println("Executing PageRank example with default links data set.").         System.out.println("Use --links to specify file input.").         return PageRankData.getDefaultEdgeDataSet(env).     } }
