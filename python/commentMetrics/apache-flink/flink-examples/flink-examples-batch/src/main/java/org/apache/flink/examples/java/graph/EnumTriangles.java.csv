commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;45;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     // Checking input parameters     final ParameterTool params = ParameterTool.fromArgs(args).     // set up execution environment     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // read input data     DataSet<Edge> edges.     if (params.has("edges")) {         edges = env.readCsvFile(params.get("edges")).fieldDelimiter(" ").includeFields(true, true).types(Integer.class, Integer.class).map(new TupleEdgeConverter()).     } else {         System.out.println("Executing EnumTriangles example with default edges data set.").         System.out.println("Use --edges to specify file input.").         edges = EnumTrianglesData.getDefaultEdgeDataSet(env).     }     // project edges by vertex id     DataSet<Edge> edgesById = edges.map(new EdgeByIdProjector()).     DataSet<Triad> triangles = edgesById.groupBy(Edge.V1).sortGroup(Edge.V2, Order.ASCENDING).reduceGroup(new TriadBuilder()).join(edgesById).where(Triad.V2, Triad.V3).equalTo(Edge.V1, Edge.V2).with(new TriadFilter()).     // emit result     if (params.has("output")) {         triangles.writeAsCsv(params.get("output"), "\n", ",").         // execute program         env.execute("Basic Triangle Enumeration Example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         triangles.print().     } }
false;public;1;5;;@Override public Edge map(Tuple2<Integer, Integer> t) throws Exception {     outEdge.copyVerticesFromTuple2(t).     return outEdge. }
false;public;1;10;;@Override public Edge map(Edge inEdge) throws Exception {     // flip vertices if necessary     if (inEdge.getFirstVertex() > inEdge.getSecondVertex()) {         inEdge.flipVertices().     }     return inEdge. }
false;public;2;26;;@Override public void reduce(Iterable<Edge> edgesIter, Collector<Triad> out) throws Exception {     final Iterator<Edge> edges = edgesIter.iterator().     // clear vertex list     vertices.clear().     // read first edge     Edge firstEdge = edges.next().     outTriad.setFirstVertex(firstEdge.getFirstVertex()).     vertices.add(firstEdge.getSecondVertex()).     // build and emit triads     while (edges.hasNext()) {         Integer higherVertexId = edges.next().getSecondVertex().         // combine vertex with all previously read vertices         for (Integer lowerVertexId : vertices) {             outTriad.setSecondVertex(lowerVertexId).             outTriad.setThirdVertex(higherVertexId).             out.collect(outTriad).         }         vertices.add(higherVertexId).     } }
false;public;2;4;;@Override public Triad join(Triad triad, Edge edge) throws Exception {     return triad. }
