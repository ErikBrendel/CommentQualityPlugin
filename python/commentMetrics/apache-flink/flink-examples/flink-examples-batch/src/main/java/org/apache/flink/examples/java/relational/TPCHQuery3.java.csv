commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean filter(Customer c) {     return c.getMktsegment().equals("AUTOMOBILE"). }
false;public;1;4;;@Override public boolean filter(Order o) throws ParseException {     return format.parse(o.getOrderdate()).before(date). }
false;public;1;4;;@Override public boolean filter(Lineitem l) throws ParseException {     return format.parse(l.getShipdate()).after(date). }
false;public;2;5;;@Override public ShippingPriorityItem join(Customer c, Order o) {     return new ShippingPriorityItem(o.getOrderKey(), 0.0, o.getOrderdate(), o.getShippriority()). }
false;public;2;5;;@Override public ShippingPriorityItem join(ShippingPriorityItem i, Lineitem l) {     i.setRevenue(l.getExtendedprice() * (1 - l.getDiscount())).     return i. }
false;public,static;1;92;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     if (!params.has("lineitem") && !params.has("customer") && !params.has("orders")) {         System.err.println("  This program expects data from the TPC-H benchmark as input data.").         System.err.println("  Due to legal restrictions, we can not ship generated data.").         System.out.println("  You can find the TPC-H data generator at http://www.tpc.org/tpch/.").         System.out.println("  Usage: TPCHQuery3 --lineitem <path> --customer <path> --orders <path> [--output <path>]").         return.     }     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.getConfig().setGlobalJobParameters(params).     // get input data     DataSet<Lineitem> lineitems = getLineitemDataSet(env, params.get("lineitem")).     DataSet<Customer> customers = getCustomerDataSet(env, params.get("customer")).     DataSet<Order> orders = getOrdersDataSet(env, params.get("orders")).     // Filter market segment "AUTOMOBILE"     customers = customers.filter(new FilterFunction<Customer>() {          @Override         public boolean filter(Customer c) {             return c.getMktsegment().equals("AUTOMOBILE").         }     }).     // Filter all Orders with o_orderdate < 12.03.1995     orders = orders.filter(new FilterFunction<Order>() {          private final DateFormat format = new SimpleDateFormat("yyyy-MM-dd").          private final Date date = format.parse("1995-03-12").          @Override         public boolean filter(Order o) throws ParseException {             return format.parse(o.getOrderdate()).before(date).         }     }).     // Filter all Lineitems with l_shipdate > 12.03.1995     lineitems = lineitems.filter(new FilterFunction<Lineitem>() {          private final DateFormat format = new SimpleDateFormat("yyyy-MM-dd").          private final Date date = format.parse("1995-03-12").          @Override         public boolean filter(Lineitem l) throws ParseException {             return format.parse(l.getShipdate()).after(date).         }     }).     // Join customers with orders and package them into a ShippingPriorityItem     DataSet<ShippingPriorityItem> customerWithOrders = customers.join(orders).where(0).equalTo(1).with(new JoinFunction<Customer, Order, ShippingPriorityItem>() {          @Override         public ShippingPriorityItem join(Customer c, Order o) {             return new ShippingPriorityItem(o.getOrderKey(), 0.0, o.getOrderdate(), o.getShippriority()).         }     }).     // Join the last join result with Lineitems     DataSet<ShippingPriorityItem> result = customerWithOrders.join(lineitems).where(0).equalTo(0).with(new JoinFunction<ShippingPriorityItem, Lineitem, ShippingPriorityItem>() {          @Override         public ShippingPriorityItem join(ShippingPriorityItem i, Lineitem l) {             i.setRevenue(l.getExtendedprice() * (1 - l.getDiscount())).             return i.         }     }).groupBy(0, 2, 3).aggregate(Aggregations.SUM, 1).     // emit result     if (params.has("output")) {         result.writeAsCsv(params.get("output"), "\n", "|").         // execute program         env.execute("TPCH Query 3 Example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         result.print().     } }
false;public;0;3;;public Long getOrderkey() {     return this.f0. }
false;public;0;3;;public Double getDiscount() {     return this.f2. }
false;public;0;3;;public Double getExtendedprice() {     return this.f1. }
false;public;0;3;;public String getShipdate() {     return this.f3. }
false;public;0;3;;public Long getCustKey() {     return this.f0. }
false;public;0;3;;public String getMktsegment() {     return this.f1. }
false;public;0;3;;public Long getOrderKey() {     return this.f0. }
false;public;0;3;;public Long getCustKey() {     return this.f1. }
false;public;0;3;;public String getOrderdate() {     return this.f2. }
false;public;0;3;;public Long getShippriority() {     return this.f3. }
false;public;0;3;;public Long getOrderkey() {     return this.f0. }
false;public;1;3;;public void setOrderkey(Long orderkey) {     this.f0 = orderkey. }
false;public;0;3;;public Double getRevenue() {     return this.f1. }
false;public;1;3;;public void setRevenue(Double revenue) {     this.f1 = revenue. }
false;public;0;3;;public String getOrderdate() {     return this.f2. }
false;public;0;3;;public Long getShippriority() {     return this.f3. }
false;private,static;2;6;;// ************************************************************************* // UTIL METHODS // ************************************************************************* private static DataSet<Lineitem> getLineitemDataSet(ExecutionEnvironment env, String lineitemPath) {     return env.readCsvFile(lineitemPath).fieldDelimiter("|").includeFields("1000011000100000").tupleType(Lineitem.class). }
false;private,static;2;6;;private static DataSet<Customer> getCustomerDataSet(ExecutionEnvironment env, String customerPath) {     return env.readCsvFile(customerPath).fieldDelimiter("|").includeFields("10000010").tupleType(Customer.class). }
false;private,static;2;6;;private static DataSet<Order> getOrdersDataSet(ExecutionEnvironment env, String ordersPath) {     return env.readCsvFile(ordersPath).fieldDelimiter("|").includeFields("110010010").tupleType(Order.class). }
