commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public InputSplit getNextInputSplit(String host, int taskId) {     LOGGER.info("Getting copy task for task: " + taskId).     return splits.poll(). }
false;public;1;4;;@Override public void configure(Configuration parameters) { // no op }
false;public;1;4;;@Override public BaseStatistics getStatistics(BaseStatistics cachedStatistics) throws IOException {     return null. }
false;public;1;10;;@Override public FileCopyTaskInputSplit[] createInputSplits(int minNumSplits) throws IOException {     FileCopyTaskInputSplit[] splits = new FileCopyTaskInputSplit[tasks.size()].     int i = 0.     for (FileCopyTask t : tasks) {         splits[i] = new FileCopyTaskInputSplit(t, i).         i++.     }     return splits. }
false;public;1;4;;@Override public InputSplitAssigner getInputSplitAssigner(FileCopyTaskInputSplit[] inputSplits) {     return new FileCopyTaskAssigner(inputSplits). }
false;public;1;4;;@Override public void open(FileCopyTaskInputSplit split) throws IOException {     curInputSplit = split. }
false;public;0;4;;@Override public boolean reachedEnd() throws IOException {     return curInputSplit == null. }
false;public;1;6;;@Override public FileCopyTask nextRecord(FileCopyTask reuse) throws IOException {     FileCopyTask toReturn = curInputSplit.getTask().     curInputSplit = null.     return toReturn. }
false;public;0;4;;@Override public void close() throws IOException { // no op }
