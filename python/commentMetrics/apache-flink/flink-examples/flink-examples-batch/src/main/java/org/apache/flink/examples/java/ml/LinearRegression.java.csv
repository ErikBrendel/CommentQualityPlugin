commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;53;;// ************************************************************************* // PROGRAM // ************************************************************************* public static void main(String[] args) throws Exception {     final ParameterTool params = ParameterTool.fromArgs(args).     // set up execution environment     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final int iterations = params.getInt("iterations", 10).     // make parameters available in the web interface     env.getConfig().setGlobalJobParameters(params).     // get input x data from elements     DataSet<Data> data.     if (params.has("input")) {         // read data from CSV file         data = env.readCsvFile(params.get("input")).fieldDelimiter(" ").includeFields(true, true).pojoType(Data.class).     } else {         System.out.println("Executing LinearRegression example with default input data set.").         System.out.println("Use --input to specify file input.").         data = LinearRegressionData.getDefaultDataDataSet(env).     }     // get the parameters from elements     DataSet<Params> parameters = LinearRegressionData.getDefaultParamsDataSet(env).     // set number of bulk iterations for SGD linear Regression     IterativeDataSet<Params> loop = parameters.iterate(iterations).     DataSet<Params> newParameters = data.map(new SubUpdate()).withBroadcastSet(loop, "parameters").reduce(new UpdateAccumulator()).map(new Update()).     // feed new parameters back into next iteration     DataSet<Params> result = loop.closeWith(newParameters).     // emit result     if (params.has("output")) {         result.writeAsText(params.get("output")).         // execute program         env.execute("Linear Regression example").     } else {         System.out.println("Printing result to stdout. Use --output to specify output path.").         result.print().     } }
false;public;0;4;;@Override public String toString() {     return "(" + x + "|" + y + ")". }
false;public;0;4;;@Override public String toString() {     return theta0 + " " + theta1. }
false;public;0;3;;public double getTheta0() {     return theta0. }
false;public;0;3;;public double getTheta1() {     return theta1. }
false;public;1;3;;public void setTheta0(double theta0) {     this.theta0 = theta0. }
false;public;1;3;;public void setTheta1(double theta1) {     this.theta1 = theta1. }
false;public;1;5;;public Params div(Integer a) {     this.theta0 = theta0 / a.     this.theta1 = theta1 / a.     return this. }
true;public;1;4;/**  * Reads the parameters from a broadcast variable into a collection.  */ ;/**  * Reads the parameters from a broadcast variable into a collection.  */ @Override public void open(Configuration parameters) throws Exception {     this.parameters = getRuntimeContext().getBroadcastVariable("parameters"). }
false;public;1;12;;@Override public Tuple2<Params, Integer> map(Data in) throws Exception {     for (Params p : parameters) {         this.parameter = p.     }     double theta0 = parameter.theta0 - 0.01 * ((parameter.theta0 + (parameter.theta1 * in.x)) - in.y).     double theta1 = parameter.theta1 - 0.01 * (((parameter.theta0 + (parameter.theta1 * in.x)) - in.y) * in.x).     return new Tuple2<Params, Integer>(new Params(theta0, theta1), count). }
false;public;2;9;;@Override public Tuple2<Params, Integer> reduce(Tuple2<Params, Integer> val1, Tuple2<Params, Integer> val2) {     double newTheta0 = val1.f0.theta0 + val2.f0.theta0.     double newTheta1 = val1.f0.theta1 + val2.f0.theta1.     Params result = new Params(newTheta0, newTheta1).     return new Tuple2<Params, Integer>(result, val1.f1 + val2.f1). }
false;public;1;6;;@Override public Params map(Tuple2<Params, Integer> arg0) throws Exception {     return arg0.f0.div(arg0.f1). }
