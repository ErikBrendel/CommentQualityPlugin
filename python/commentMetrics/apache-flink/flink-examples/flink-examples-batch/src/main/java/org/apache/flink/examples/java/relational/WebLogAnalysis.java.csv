# id;timestamp;commentText;codeText;commentWords;codeWords
WebLogAnalysis -> FilterDocByKeyWords -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1452766738;Filters for documents that contain all of the given keywords and projects the records on the URL field.__Output Format:_0: URL_1: DOCUMENT_TEXT;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			_			String docText = value.f1__			for (String kw : KEYWORDS) {_				if (!docText.contains(kw)) {_					return false__				}_			}_			return true__		};filters,for,documents,that,contain,all,of,the,given,keywords,and,projects,the,records,on,the,url,field,output,format,0,url,1;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,doc,text,value,f1,for,string,kw,keywords,if,doc,text,contains,kw,return,false,return,true
WebLogAnalysis -> FilterDocByKeyWords -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1456252487;Filters for documents that contain all of the given keywords and projects the records on the URL field.__Output Format:_0: URL_1: DOCUMENT_TEXT;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			_			String docText = value.f1__			for (String kw : KEYWORDS) {_				if (!docText.contains(kw)) {_					return false__				}_			}_			return true__		};filters,for,documents,that,contain,all,of,the,given,keywords,and,projects,the,records,on,the,url,field,output,format,0,url,1;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,doc,text,value,f1,for,string,kw,keywords,if,doc,text,contains,kw,return,false,return,true
WebLogAnalysis -> FilterDocByKeyWords -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1461575220;Filters for documents that contain all of the given keywords and projects the records on the URL field.__Output Format:_0: URL_1: DOCUMENT_TEXT;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			_			String docText = value.f1__			for (String kw : KEYWORDS) {_				if (!docText.contains(kw)) {_					return false__				}_			}_			return true__		};filters,for,documents,that,contain,all,of,the,given,keywords,and,projects,the,records,on,the,url,field,output,format,0,url,1;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,doc,text,value,f1,for,string,kw,keywords,if,doc,text,contains,kw,return,false,return,true
WebLogAnalysis -> FilterDocByKeyWords -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1495698510;Filters for documents that contain all of the given keywords and projects the records on the URL field.__<p>Output Format:_0: URL_1: DOCUMENT_TEXT;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			_			String docText = value.f1__			for (String kw : KEYWORDS) {_				if (!docText.contains(kw)) {_					return false__				}_			}_			return true__		};filters,for,documents,that,contain,all,of,the,given,keywords,and,projects,the,records,on,the,url,field,p,output,format,0,url,1;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,doc,text,value,f1,for,string,kw,keywords,if,doc,text,contains,kw,return,false,return,true
WebLogAnalysis -> FilterByRank -> @Override 		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception;1452766738;Filters for records of the rank relation where the rank is greater_than the given threshold.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception {_			return (value.f0 > RANKFILTER)__		};filters,for,records,of,the,rank,relation,where,the,rank,is,greater,than,the,given,threshold,output,format,0,rank,1,url,2;override,public,boolean,filter,tuple3,integer,string,integer,value,throws,exception,return,value,f0,rankfilter
WebLogAnalysis -> FilterByRank -> @Override 		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception;1456252487;Filters for records of the rank relation where the rank is greater_than the given threshold.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception {_			return (value.f0 > RANKFILTER)__		};filters,for,records,of,the,rank,relation,where,the,rank,is,greater,than,the,given,threshold,output,format,0,rank,1,url,2;override,public,boolean,filter,tuple3,integer,string,integer,value,throws,exception,return,value,f0,rankfilter
WebLogAnalysis -> FilterByRank -> @Override 		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception;1461575220;Filters for records of the rank relation where the rank is greater_than the given threshold.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception {_			return (value.f0 > RANKFILTER)__		};filters,for,records,of,the,rank,relation,where,the,rank,is,greater,than,the,given,threshold,output,format,0,rank,1,url,2;override,public,boolean,filter,tuple3,integer,string,integer,value,throws,exception,return,value,f0,rankfilter
WebLogAnalysis -> FilterByRank -> @Override 		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception;1495698510;Filters for records of the rank relation where the rank is greater_than the given threshold.__<p>Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public boolean filter(Tuple3<Integer, String, Integer> value) throws Exception {_			return (value.f0 > RANKFILTER)__		};filters,for,records,of,the,rank,relation,where,the,rank,is,greater,than,the,given,threshold,p,output,format,0,rank,1,url,2;override,public,boolean,filter,tuple3,integer,string,integer,value,throws,exception,return,value,f0,rankfilter
WebLogAnalysis -> AntiJoinVisits -> @Override 		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out);1452766738;If the visit iterator is empty, all pairs of the rank iterator are emitted._Otherwise, no pair is emitted.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out) {_			_			if (!visits.iterator().hasNext()) {_				for (Tuple3<Integer, String, Integer> next : ranks) {_					_					out.collect(next)__				}_			}_		};if,the,visit,iterator,is,empty,all,pairs,of,the,rank,iterator,are,emitted,otherwise,no,pair,is,emitted,output,format,0,rank,1,url,2;override,public,void,co,group,iterable,tuple3,integer,string,integer,ranks,iterable,tuple1,string,visits,collector,tuple3,integer,string,integer,out,if,visits,iterator,has,next,for,tuple3,integer,string,integer,next,ranks,out,collect,next
WebLogAnalysis -> AntiJoinVisits -> @Override 		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out);1456252487;If the visit iterator is empty, all pairs of the rank iterator are emitted._Otherwise, no pair is emitted.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out) {_			_			if (!visits.iterator().hasNext()) {_				for (Tuple3<Integer, String, Integer> next : ranks) {_					_					out.collect(next)__				}_			}_		};if,the,visit,iterator,is,empty,all,pairs,of,the,rank,iterator,are,emitted,otherwise,no,pair,is,emitted,output,format,0,rank,1,url,2;override,public,void,co,group,iterable,tuple3,integer,string,integer,ranks,iterable,tuple1,string,visits,collector,tuple3,integer,string,integer,out,if,visits,iterator,has,next,for,tuple3,integer,string,integer,next,ranks,out,collect,next
WebLogAnalysis -> AntiJoinVisits -> @Override 		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out);1461575220;If the visit iterator is empty, all pairs of the rank iterator are emitted._Otherwise, no pair is emitted.__Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out) {_			_			if (!visits.iterator().hasNext()) {_				for (Tuple3<Integer, String, Integer> next : ranks) {_					_					out.collect(next)__				}_			}_		};if,the,visit,iterator,is,empty,all,pairs,of,the,rank,iterator,are,emitted,otherwise,no,pair,is,emitted,output,format,0,rank,1,url,2;override,public,void,co,group,iterable,tuple3,integer,string,integer,ranks,iterable,tuple1,string,visits,collector,tuple3,integer,string,integer,out,if,visits,iterator,has,next,for,tuple3,integer,string,integer,next,ranks,out,collect,next
WebLogAnalysis -> AntiJoinVisits -> @Override 		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out);1495698510;If the visit iterator is empty, all pairs of the rank iterator are emitted._Otherwise, no pair is emitted.__<p>Output Format:_0: RANK_1: URL_2: AVG_DURATION;@Override_		public void coGroup(Iterable<Tuple3<Integer, String, Integer>> ranks, Iterable<Tuple1<String>> visits, Collector<Tuple3<Integer, String, Integer>> out) {_			_			if (!visits.iterator().hasNext()) {_				for (Tuple3<Integer, String, Integer> next : ranks) {_					_					out.collect(next)__				}_			}_		};if,the,visit,iterator,is,empty,all,pairs,of,the,rank,iterator,are,emitted,otherwise,no,pair,is,emitted,p,output,format,0,rank,1,url,2;override,public,void,co,group,iterable,tuple3,integer,string,integer,ranks,iterable,tuple1,string,visits,collector,tuple3,integer,string,integer,out,if,visits,iterator,has,next,for,tuple3,integer,string,integer,next,ranks,out,collect,next
WebLogAnalysis -> FilterVisitsByDate -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1452766738;Filters for records of the visits relation where the year of visit is equal to a_specified value. The URL of all visit records passing the filter is emitted.__Output Format:_0: URL_1: DATE;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			String dateString = value.f1__			int year = Integer.parseInt(dateString.substring(0,4))__			return (year == YEARFILTER)__		};filters,for,records,of,the,visits,relation,where,the,year,of,visit,is,equal,to,a,specified,value,the,url,of,all,visit,records,passing,the,filter,is,emitted,output,format,0,url,1,date;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,date,string,value,f1,int,year,integer,parse,int,date,string,substring,0,4,return,year,yearfilter
WebLogAnalysis -> FilterVisitsByDate -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1456252487;Filters for records of the visits relation where the year of visit is equal to a_specified value. The URL of all visit records passing the filter is emitted.__Output Format:_0: URL_1: DATE;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			String dateString = value.f1__			int year = Integer.parseInt(dateString.substring(0,4))__			return (year == YEARFILTER)__		};filters,for,records,of,the,visits,relation,where,the,year,of,visit,is,equal,to,a,specified,value,the,url,of,all,visit,records,passing,the,filter,is,emitted,output,format,0,url,1,date;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,date,string,value,f1,int,year,integer,parse,int,date,string,substring,0,4,return,year,yearfilter
WebLogAnalysis -> FilterVisitsByDate -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1461575220;Filters for records of the visits relation where the year of visit is equal to a_specified value. The URL of all visit records passing the filter is emitted.__Output Format:_0: URL_1: DATE;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			String dateString = value.f1__			int year = Integer.parseInt(dateString.substring(0,4))__			return (year == YEARFILTER)__		};filters,for,records,of,the,visits,relation,where,the,year,of,visit,is,equal,to,a,specified,value,the,url,of,all,visit,records,passing,the,filter,is,emitted,output,format,0,url,1,date;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,date,string,value,f1,int,year,integer,parse,int,date,string,substring,0,4,return,year,yearfilter
WebLogAnalysis -> FilterVisitsByDate -> @Override 		public boolean filter(Tuple2<String, String> value) throws Exception;1495698510;Filters for records of the visits relation where the year of visit is equal to a_specified value. The URL of all visit records passing the filter is emitted.__<p>Output Format:_0: URL_1: DATE;@Override_		public boolean filter(Tuple2<String, String> value) throws Exception {_			_			String dateString = value.f1__			int year = Integer.parseInt(dateString.substring(0, 4))__			return (year == YEARFILTER)__		};filters,for,records,of,the,visits,relation,where,the,year,of,visit,is,equal,to,a,specified,value,the,url,of,all,visit,records,passing,the,filter,is,emitted,p,output,format,0,url,1,date;override,public,boolean,filter,tuple2,string,string,value,throws,exception,string,date,string,value,f1,int,year,integer,parse,int,date,string,substring,0,4,return,year,yearfilter
