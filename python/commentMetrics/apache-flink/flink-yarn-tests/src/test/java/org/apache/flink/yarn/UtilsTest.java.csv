commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testUberjarLocator() {     File dir = YarnTestBase.findFile("..", new YarnTestBase.RootDirFilenameFilter()).     Assert.assertNotNull(dir).     Assert.assertTrue(dir.getName().endsWith(".jar")).     // from uberjar to lib to root     dir = dir.getParentFile().getParentFile().     Assert.assertTrue(dir.exists()).     Assert.assertTrue(dir.isDirectory()).     List<String> files = Arrays.asList(dir.list()).     Assert.assertTrue(files.contains("lib")).     Assert.assertTrue(files.contains("bin")).     Assert.assertTrue(files.contains("conf")). }
true;public;0;30;/**  * Remove 15% of the heap, at least 384MB.  */ ;/**  * Remove 15% of the heap, at least 384MB.  */ @Test public void testHeapCutoff() {     Configuration conf = new Configuration().     conf.setFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO, 0.15F).     conf.setInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN, 384).     Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf)).     Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf)).     // test different configuration     Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf)).     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key(), "1000").     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.1").     Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf)).     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.5").     Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf)).     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "1").     Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf)).     // test also deprecated keys     conf = new Configuration().     conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15).     conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384).     Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf)).     Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf)). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void illegalArgument() {     Configuration conf = new Configuration().     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "1.1").     Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf)). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void illegalArgumentNegative() {     Configuration conf = new Configuration().     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "-0.01").     Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf)). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void tooMuchCutoff() {     Configuration conf = new Configuration().     conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "6000").     Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf)). }
false;public;0;12;;@Test public void testGetEnvironmentVariables() {     Configuration testConf = new Configuration().     testConf.setString("yarn.application-master.env.LD_LIBRARY_PATH", "/usr/lib/native").     Map<String, String> res = Utils.getEnvironmentVariables("yarn.application-master.env.", testConf).     Assert.assertEquals(1, res.size()).     Map.Entry<String, String> entry = res.entrySet().iterator().next().     Assert.assertEquals("LD_LIBRARY_PATH", entry.getKey()).     Assert.assertEquals("/usr/lib/native", entry.getValue()). }
false;public;0;9;;@Test public void testGetEnvironmentVariablesErroneous() {     Configuration testConf = new Configuration().     testConf.setString("yarn.application-master.env.", "/usr/lib/native").     Map<String, String> res = Utils.getEnvironmentVariables("yarn.application-master.env.", testConf).     Assert.assertEquals(0, res.size()). }
false;public,static;2;8;;public static void addTestAppender(Class target, Level level) {     testAppender = new TestAppender().     testAppender.setThreshold(level).     org.apache.log4j.Logger lg = org.apache.log4j.Logger.getLogger(target).     lg.setLevel(level).     lg.addAppender(testAppender). // org.apache.log4j.Logger.getRootLogger().addAppender(testAppender). }
false;public,static;1;8;;public static void checkForLogString(String expected) {     LoggingEvent found = getEventContainingString(expected).     if (found != null) {         LOG.info("Found expected string '" + expected + "' in log message " + found).         return.     }     Assert.fail("Unable to find expected string '" + expected + "' in log messages"). }
false;public,static;1;16;;public static LoggingEvent getEventContainingString(String expected) {     if (testAppender == null) {         throw new NullPointerException("Initialize test appender first").     }     LoggingEvent found = null.     // make sure that different threads are not logging while the logs are checked     synchronized (testAppender.events) {         for (LoggingEvent event : testAppender.events) {             if (event.getMessage().toString().contains(expected)) {                 found = event.                 break.             }         }     }     return found. }
false;public;0;2;;public void close() { }
false;public;0;3;;public boolean requiresLayout() {     return false. }
false;protected;1;6;;@Override protected void append(LoggingEvent event) {     synchronized (events) {         events.add(event).     } }
