commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     CliFrontendTestUtils.pipeSystemOutToNull(). }
false;public,static;0;4;;@AfterClass public static void shutdown() {     CliFrontendTestUtils.restoreSystemOut(). }
false;public;0;26;;@Test public void testRun() throws Exception {     String testJarPath = getTestJarPath("BatchWordCount.jar").getAbsolutePath().     Configuration configuration = new Configuration().     configuration.setString(JobManagerOptions.ADDRESS, "localhost").     configuration.setInteger(JobManagerOptions.PORT, 8081).     FlinkYarnSessionCli yarnCLI = new TestingFlinkYarnSessionCli(configuration, tmp.getRoot().getAbsolutePath(), "y", "yarn").     // test detached mode     {         String[] parameters = { "-m", "yarn-cluster", "-yn", "1", "-p", "2", "-d", testJarPath }.         verifyCliFrontend(yarnCLI, parameters, 2, true, true).     }     // test detached mode     {         String[] parameters = { "-m", "yarn-cluster", "-yn", "1", "-p", "2", "-yd", testJarPath }.         verifyCliFrontend(yarnCLI, parameters, 2, true, true).     } }
false;public;1;11;;@Override public AbstractYarnClusterDescriptor createClusterDescriptor(CommandLine commandLine) throws FlinkException {     AbstractYarnClusterDescriptor parent = super.createClusterDescriptor(commandLine).     return new NonDeployingDetachedYarnClusterDescriptor(parent.getFlinkConfiguration(), (YarnConfiguration) parent.getYarnClient().getConfig(), configurationDirectory, parent.getYarnClient(), clusterClient). }
false;public;3;6;;@Override public ClusterClient<ApplicationId> deployJobCluster(ClusterSpecification clusterSpecification, JobGraph jobGraph, boolean detached) {     assertTrue(detached).     return super.deployJobCluster(clusterSpecification, jobGraph, true). }
