commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setup() {     YARN_CONFIGURATION.set(YarnTestBase.TEST_CLUSTER_NAME_KEY, "flink-yarn-tests-per-job").     startYARNWithConfig(YARN_CONFIGURATION). }
false;public;0;67;;@Test public void testPerJobMode() throws Exception {     Configuration configuration = new Configuration().     configuration.setString(AkkaOptions.ASK_TIMEOUT, "30 s").     final YarnClient yarnClient = getYarnClient().     try (final YarnClusterDescriptor yarnClusterDescriptor = new YarnClusterDescriptor(configuration, getYarnConfiguration(), System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR), yarnClient, true)) {         yarnClusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath())).         yarnClusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles())).         yarnClusterDescriptor.addShipFiles(Arrays.asList(flinkShadedHadoopDir.listFiles())).         final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder().setMasterMemoryMB(768).setTaskManagerMemoryMB(1024).setSlotsPerTaskManager(1).setNumberTaskManagers(1).createClusterSpecification().         StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().         env.setParallelism(2).         env.addSource(new NoDataSource()).shuffle().addSink(new DiscardingSink<>()).         final JobGraph jobGraph = env.getStreamGraph().getJobGraph().         File testingJar = YarnTestBase.findFile("..", new YarnTestUtils.TestJarFinder("flink-yarn-tests")).         jobGraph.addJar(new org.apache.flink.core.fs.Path(testingJar.toURI())).         ApplicationId applicationId = null.         ClusterClient<ApplicationId> clusterClient = null.         try {             clusterClient = yarnClusterDescriptor.deployJobCluster(clusterSpecification, jobGraph, false).             applicationId = clusterClient.getClusterId().             assertThat(clusterClient, is(instanceOf(RestClusterClient.class))).             final RestClusterClient<ApplicationId> restClusterClient = (RestClusterClient<ApplicationId>) clusterClient.             final CompletableFuture<JobResult> jobResultCompletableFuture = restClusterClient.requestJobResult(jobGraph.getJobID()).             final JobResult jobResult = jobResultCompletableFuture.get().             assertThat(jobResult, is(notNullValue())).             assertThat(jobResult.getSerializedThrowable().isPresent(), is(false)).         } finally {             if (clusterClient != null) {                 clusterClient.shutdown().             }             if (applicationId != null) {                 yarnClusterDescriptor.killCluster(applicationId).             }         }     } }
