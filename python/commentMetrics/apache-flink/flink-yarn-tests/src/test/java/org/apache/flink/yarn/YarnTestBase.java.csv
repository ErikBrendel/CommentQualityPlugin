# id;timestamp;commentText;codeText;commentWords;codeWords
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1466787223;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1467104066;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1467379351;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1472485736;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1473347848;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1474022056;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1474401809;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString);1474401809;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> @After 	public void sleep();1422034750;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1422034750;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1422034750;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1423061851;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1423144032;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1425463229;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1425489636;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1462389709;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1464630565;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1466152678;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1466787223;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1467104066;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1467379351;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1472485736;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1473347848;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1474022056;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1474401809;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1474401809;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1476266315;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1477570902;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1484162264;Sleep a bit between the tests (we are re-using the YARN cluster for the tests);@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1495702763;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1501088110;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1501237018;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1507994191;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1511347989;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1511863857;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515177485;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515686359;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515699581;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515699597;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515699606;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515770042;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1515770043;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1518945174;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1519839433;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1520030750;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1520032158;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1521739913;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1521739913;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1522681180;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1525773113;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1526494918;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> @After 	public void sleep();1529682304;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() {_		try {_			Thread.sleep(500)__		} catch (InterruptedException e) {_			Assert.fail("Should not happen")__		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1462389709;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1464630565;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1466152678;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1466787223;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1467104066;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1467379351;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1472485736;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1473347848;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1474022056;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1474401809;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1474401809;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1476266315;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1477570902;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1484162264;This method checks the written TaskManager and JobManager log files_for exceptions.__WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())__		_		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath()+ "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {_							_							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}_							_							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__			}__			return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with a prohibited string: "+Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,yarn,configuration,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1495702763;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail("Found a file " + foundFile + " with a prohibited string: " + Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1501088110;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail("Found a file " + foundFile + " with a prohibited string: " + Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1501237018;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail("Found a file " + foundFile + " with a prohibited string: " + Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1507994191;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)__								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail("Found a file " + foundFile + " with a prohibited string: " + Arrays.toString(prohibited))__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,arrays,to,string,prohibited
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1511347989;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1511863857;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515177485;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515686359;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515699581;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515699597;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515699606;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515770042;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1515770043;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1518945174;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1519839433;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1520030750;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1520032158;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1521739913;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1521739913;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1522681180;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1525773113;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				Scanner scanner = new Scanner(f)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									if (!line.isEmpty() && (Character.isWhitespace(line.charAt(0)) || line.startsWith("Caused by"))) {_										logExcerpt.append(line)__										logExcerpt.append(System.lineSeparator())__									} else {_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,scanner,scanner,new,scanner,f,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,log,excerpt,append,line,log,excerpt,append,system,line,separator,else,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1526494918;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1529682304;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1531982617;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1538127997;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1546618773;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1546953479;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1547742425;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1548435402;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1548773096;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1548773096;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted);1549360056;This method checks the written TaskManager and JobManager log files_for exceptions.__<p>WARN: Please make sure the tool doesn't find old logfiles from previous test runs._So always run "mvn clean" before running the tests here.;public static void ensureNoProhibitedStringInLogFiles(final String[] prohibited, final String[] whitelisted) {_		File cwd = new File("target/" + YARN_CONFIGURATION.get(TEST_CLUSTER_NAME_KEY))__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist", cwd.exists())__		Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory", cwd.isDirectory())___		List<String> prohibitedExcerpts = new ArrayList<>()__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_			_			File f = new File(dir.getAbsolutePath() + "/" + name)__			try {_				BufferingScanner scanner = new BufferingScanner(new Scanner(f), 10)__				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					for (String aProhibited : prohibited) {_						if (lineFromFile.contains(aProhibited)) {__							boolean whitelistedFound = false__							for (String white : whitelisted) {_								if (lineFromFile.contains(white)) {_									whitelistedFound = true__									break__								}_							}__							if (!whitelistedFound) {_								_								Marker fatal = MarkerFactory.getMarker("FATAL")__								LOG.error(fatal, "Prohibited String '{}' in line '{}'", aProhibited, lineFromFile)___								StringBuilder logExcerpt = new StringBuilder()___								logExcerpt.append(System.lineSeparator())___								_								for (String previousLine : scanner.getPreviousLines()) {_									logExcerpt.append(previousLine)__									logExcerpt.append(System.lineSeparator())__								}__								logExcerpt.append(lineFromFile)__								logExcerpt.append(System.lineSeparator())__								_								while (scanner.hasNextLine()) {_									String line = scanner.nextLine()__									logExcerpt.append(line)__									logExcerpt.append(System.lineSeparator())__									if (line.isEmpty() || (!Character.isWhitespace(line.charAt(0)) && !line.startsWith("Caused by"))) {_										_										for (int x = 0_ x < 10 && scanner.hasNextLine()_ x++) {_											logExcerpt.append(scanner.nextLine())__											logExcerpt.append(System.lineSeparator())__										}_										break__									}_								}_								prohibitedExcerpts.add(logExcerpt.toString())___								return true__							}_						}_					}__				}_			} catch (FileNotFoundException e) {_				LOG.warn("Unable to locate file: " + e.getMessage() + " file: " + f.getAbsolutePath())__			}__			return false__			}_		})__		if (foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: " + e.getMessage() + " file: " + foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with a prohibited string. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: " + scanner.nextLine())__			}_			Assert.fail(_				"Found a file " + foundFile + " with a prohibited string (one of " + Arrays.toString(prohibited) + "). " +_				"Excerpts:" + System.lineSeparator() + prohibitedExcerpts)__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions,p,warn,please,make,sure,the,tool,doesn,t,find,old,logfiles,from,previous,test,runs,so,always,run,mvn,clean,before,running,the,tests,here;public,static,void,ensure,no,prohibited,string,in,log,files,final,string,prohibited,final,string,whitelisted,file,cwd,new,file,target,get,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,list,string,prohibited,excerpts,new,array,list,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,try,buffering,scanner,scanner,new,buffering,scanner,new,scanner,f,10,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,for,string,a,prohibited,prohibited,if,line,from,file,contains,a,prohibited,boolean,whitelisted,found,false,for,string,white,whitelisted,if,line,from,file,contains,white,whitelisted,found,true,break,if,whitelisted,found,marker,fatal,marker,factory,get,marker,fatal,log,error,fatal,prohibited,string,in,line,a,prohibited,line,from,file,string,builder,log,excerpt,new,string,builder,log,excerpt,append,system,line,separator,for,string,previous,line,scanner,get,previous,lines,log,excerpt,append,previous,line,log,excerpt,append,system,line,separator,log,excerpt,append,line,from,file,log,excerpt,append,system,line,separator,while,scanner,has,next,line,string,line,scanner,next,line,log,excerpt,append,line,log,excerpt,append,system,line,separator,if,line,is,empty,character,is,whitespace,line,char,at,0,line,starts,with,caused,by,for,int,x,0,x,10,scanner,has,next,line,x,log,excerpt,append,scanner,next,line,log,excerpt,append,system,line,separator,break,prohibited,excerpts,add,log,excerpt,to,string,return,true,catch,file,not,found,exception,e,log,warn,unable,to,locate,file,e,get,message,file,f,get,absolute,path,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,a,prohibited,string,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,a,prohibited,string,one,of,arrays,to,string,prohibited,excerpts,system,line,separator,prohibited,excerpts
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1476266315;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type, expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()___		if(runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1477570902;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type, expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()___		if(runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1484162264;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type, expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()___		if(runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1495702763;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(args, type, expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1501088110;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(args, type, expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1501237018;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1507994191;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1511347989;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1511863857;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515177485;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515686359;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515699581;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515699597;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515699606;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString);1515770042;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		sendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1462389709;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1464630565;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1466152678;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1466787223;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1467104066;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1467379351;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1472485736;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1473347848;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1474022056;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1474401809;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1474401809;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				Assert.fail("Runner thread died before the test was finished. Return value = "+runner.getReturnValue())__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1476266315;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type, 0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				if(runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1477570902;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type, 0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				if(runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1484162264;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int START_TIMEOUT_SECONDS = 60___		Runner runner = new Runner(args, type, 0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for(int second = 0_ second <  START_TIMEOUT_SECONDS_ second++) {_			sleep(1000)__			_			if(outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString) ) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if(!runner.isAlive()) {_				sendOutput()__				if(runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,60,runner,runner,new,runner,args,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1495702763;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(args, type, 0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1501088110;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(args, type, 0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1501237018;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1507994191;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1511347989;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1511863857;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515177485;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515686359;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515699581;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515699597;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515699606;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type);1515770042;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				sendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		sendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1531982617;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1538127997;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1546618773;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1546953479;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1547742425;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1548435402;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1548773096;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1548773096;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> @After 	public void sleep() throws IOException, YarnException;1549360056;Sleep a bit between the tests (we are re-using the YARN cluster for the tests).;@After_	public void sleep() throws IOException, YarnException {_		Deadline deadline = Deadline.now().plus(Duration.ofSeconds(10))___		boolean isAnyJobRunning = yarnClient.getApplications().stream()_			.anyMatch(YarnTestBase::isApplicationRunning)___		while (deadline.hasTimeLeft() && isAnyJobRunning) {_			try {_				Thread.sleep(500)__			} catch (InterruptedException e) {_				Assert.fail("Should not happen")__			}_			isAnyJobRunning = yarnClient.getApplications().stream()_				.anyMatch(YarnTestBase::isApplicationRunning)__		}__		if (isAnyJobRunning) {_			final List<String> runningApps = yarnClient.getApplications().stream()_				.filter(YarnTestBase::isApplicationRunning)_				.map(app -> "App " + app.getApplicationId() + " is in state " + app.getYarnApplicationState() + '.')_				.collect(Collectors.toList())__			if (!runningApps.isEmpty()) {_				Assert.fail("There is at least one application on the cluster that is not finished." + runningApps)__			}_		}_	};sleep,a,bit,between,the,tests,we,are,re,using,the,yarn,cluster,for,the,tests;after,public,void,sleep,throws,ioexception,yarn,exception,deadline,deadline,deadline,now,plus,duration,of,seconds,10,boolean,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,while,deadline,has,time,left,is,any,job,running,try,thread,sleep,500,catch,interrupted,exception,e,assert,fail,should,not,happen,is,any,job,running,yarn,client,get,applications,stream,any,match,yarn,test,base,is,application,running,if,is,any,job,running,final,list,string,running,apps,yarn,client,get,applications,stream,filter,yarn,test,base,is,application,running,map,app,app,app,get,application,id,is,in,state,app,get,yarn,application,state,collect,collectors,to,list,if,running,apps,is,empty,assert,fail,there,is,at,least,one,application,on,the,cluster,that,is,not,finished,running,apps
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1422034750;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1422034750;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1422034750;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1423061851;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1423144032;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1425463229;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1425489636;Locate a file or diretory directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {__			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}__		}_		return null__	};locate,a,file,or,diretory,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1462389709;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1464630565;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1466152678;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1466787223;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1467104066;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1467379351;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1472485736;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1473347848;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1474022056;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1474401809;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1474401809;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1476266315;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1477570902;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1484162264;Locate a file or directory;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if(files == null) {_			return null__		}_		for(String file : files) {_			File f = new File(startAt + File.separator + file)__			if(f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if(r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1495702763;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1501088110;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1501237018;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1507994191;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1511347989;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1511863857;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515177485;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515686359;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515699581;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515699597;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515699606;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515770042;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1515770043;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1518945174;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1519839433;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1520030750;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1520032158;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1521739913;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1521739913;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1522681180;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1525773113;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1526494918;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1529682304;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1531982617;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1538127997;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1546618773;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1546953479;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1547742425;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1548435402;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1548773096;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1548773096;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> public static File findFile(String startAt, FilenameFilter fnf);1549360056;Locate a file or directory.;public static File findFile(String startAt, FilenameFilter fnf) {_		File root = new File(startAt)__		String[] files = root.list()__		if (files == null) {_			return null__		}_		for (String file : files) {_			File f = new File(startAt + File.separator + file)__			if (f.isDirectory()) {_				File r = findFile(f.getAbsolutePath(), fnf)__				if (r != null) {_					return r__				}_			} else if (fnf.accept(f.getParentFile(), f.getName())) {_				return f__			}_		}_		return null__	};locate,a,file,or,directory;public,static,file,find,file,string,start,at,filename,filter,fnf,file,root,new,file,start,at,string,files,root,list,if,files,null,return,null,for,string,file,files,file,f,new,file,start,at,file,separator,file,if,f,is,directory,file,r,find,file,f,get,absolute,path,fnf,if,r,null,return,r,else,if,fnf,accept,f,get,parent,file,f,get,name,return,f,return,null
YarnTestBase -> Runner -> public void sendStop();1472485736;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1473347848;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1474022056;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1474401809;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1474401809;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1476266315;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1477570902;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1484162264;Stops the Yarn session;public void sendStop() {_			if(yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1495702763;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1501088110;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1501237018;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1507994191;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1511347989;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1511863857;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515177485;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515686359;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515699581;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515699597;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515699606;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515770042;Stops the Yarn session.;public void sendStop() {_			if (yCli != null) {_				yCli.stop()__			}_		};stops,the,yarn,session;public,void,send,stop,if,y,cli,null,y,cli,stop
YarnTestBase -> Runner -> public void sendStop();1515770043;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1518945174;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1519839433;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1520030750;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1520032158;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1521739913;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1521739913;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1522681180;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1525773113;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1526494918;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1529682304;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1531982617;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1538127997;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1546618773;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1546953479;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1547742425;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1548435402;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1548773096;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1548773096;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> Runner -> public void sendStop();1549360056;Stops the Yarn session.;public void sendStop() {_			stdinPrintStream.println("stop")__		};stops,the,yarn,session;public,void,send,stop,stdin,print,stream,println,stop
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1462389709;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1464630565;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1466152678;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1466787223;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1467104066;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1467379351;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1472485736;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1473347848;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1474022056;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1474401809;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1474401809;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1476266315;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1477570902;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1484162264;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1495702763;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1501088110;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1501237018;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1507994191;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1511347989;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1511863857;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515177485;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515686359;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515699581;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515699597;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515699606;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515770042;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1515770043;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1518945174;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1519839433;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1520030750;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1520032158;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1521739913;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1521739913;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1522681180;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1525773113;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1526494918;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1529682304;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1531982617;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1538127997;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1546618773;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1546953479;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1547742425;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1548435402;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1548773096;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1548773096;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> ContainsName -> public ContainsName(String[] names);1549360056;@param names which have to be included in the filename.;public ContainsName(String[] names) {_			this.names = names__		};param,names,which,have,to,be,included,in,the,filename;public,contains,name,string,names,this,names,names
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1515770043;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1518945174;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1519839433;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1520030750;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1520032158;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1521739913;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1521739913;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1522681180;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1525773113;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1526494918;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1529682304;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1531982617;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1538127997;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1546618773;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1546953479;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1547742425;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1548435402;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1548773096;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1548773096;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException;1549360056;This method returns once the "startedAfterString" has been seen.;protected Runner startWithArgs(String[] args, String startedAfterString, RunTypes type) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)___		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		final int startTimeoutSeconds = 60___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			0,_			stdinPrintStream)__		runner.setName("Frontend (CLI/YARN Client) runner thread (startWithArgs()).")__		runner.start()___		for (int second = 0_ second <  startTimeoutSeconds_ second++) {_			sleep(1000)__			_			if (outContent.toString().contains(startedAfterString)_					|| errContent.toString().contains(startedAfterString)) {_				LOG.info("Found expected output in redirected streams")__				return runner__			}_			_			if (!runner.isAlive()) {_				resetStreamsAndSendOutput()__				if (runner.getRunnerError() != null) {_					throw new RuntimeException("Runner failed with exception.", runner.getRunnerError())__				}_				Assert.fail("Runner thread died before the test was finished.")__			}_		}__		resetStreamsAndSendOutput()__		Assert.fail("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string did not show up")__		return null__	};this,method,returns,once,the,started,after,string,has,been,seen;protected,runner,start,with,args,string,args,string,started,after,string,run,types,type,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,60,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,0,stdin,print,stream,runner,set,name,frontend,cli,yarn,client,runner,thread,start,with,args,runner,start,for,int,second,0,second,start,timeout,seconds,second,sleep,1000,if,out,content,to,string,contains,started,after,string,err,content,to,string,contains,started,after,string,log,info,found,expected,output,in,redirected,streams,return,runner,if,runner,is,alive,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,with,exception,runner,get,runner,error,assert,fail,runner,thread,died,before,the,test,was,finished,reset,streams,and,send,output,assert,fail,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,did,not,show,up,return,null
YarnTestBase -> @BeforeClass 	public static void setup() throws Exception;1547742425;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() throws Exception {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,throws,exception,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup() throws Exception;1548435402;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() throws Exception {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,throws,exception,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup() throws Exception;1548773096;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() throws Exception {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,throws,exception,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup() throws Exception;1548773096;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() throws Exception {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,throws,exception,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup() throws Exception;1549360056;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() throws Exception {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,throws,exception,start,yarnwith,config
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString);1462389709;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnStrings The runner is searching stdout and stderr for the strings specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnStrings != null) {_				for (String failOnString : failOnStrings) {_					if (outContentString.contains(failOnString)_							|| errContentString.contains(failOnString)) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,strings,the,runner,is,searching,stdout,and,stderr,for,the,strings,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,strings,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,strings,null,for,string,fail,on,string,fail,on,strings,if,out,content,string,contains,fail,on,string,err,content,string,contains,fail,on,string,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString);1464630565;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnStrings The runner is searching stdout and stderr for the strings specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnStrings != null) {_				for (String failOnString : failOnStrings) {_					if (outContentString.contains(failOnString)_							|| errContentString.contains(failOnString)) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,strings,the,runner,is,searching,stdout,and,stderr,for,the,strings,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,strings,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,strings,null,for,string,fail,on,string,fail,on,strings,if,out,content,string,contains,fail,on,string,err,content,string,contains,fail,on,string,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString);1466152678;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnStrings The runner is searching stdout and stderr for the strings specified here. If one appears, the test has failed_@param type Set the type of the runner_@param returnCode Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnStrings, RunTypes type, int returnCode, boolean checkLogForTerminateString) {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))____		_		final int START_TIMEOUT_SECONDS = 180__		final long deadline = System.currentTimeMillis() + (START_TIMEOUT_SECONDS * 1000)__		_		Runner runner = new Runner(args, type)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if(failOnStrings != null) {_				for (String failOnString : failOnStrings) {_					if (outContentString.contains(failOnString)_							|| errContentString.contains(failOnString)) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						sendOutput()__						_						runner.sendStop()__						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if(checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if(matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j ) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(30000)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					if (runner.getReturnValue() != 0) {_						Assert.fail("Runner thread died before the test was finished. Return value = "_								+ runner.getReturnValue())__					} else {_						LOG.info("Runner stopped earlier than expected with return value = 0")__					}_					_					break__				}_			}_		}_		while (!expectedStringSeen && System.currentTimeMillis() < deadline)__		_		sendOutput()__		Assert.assertTrue("During the timeout period of " + START_TIMEOUT_SECONDS + " seconds the " +_				"expected string did not show up", expectedStringSeen)___		_		Assert.assertEquals("Expected return value", returnCode, runner.getReturnValue())__		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,strings,the,runner,is,searching,stdout,and,stderr,for,the,strings,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,return,code,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,strings,run,types,type,int,return,code,boolean,check,log,for,terminate,string,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,final,int,180,final,long,deadline,system,current,time,millis,1000,runner,runner,new,runner,args,type,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,strings,null,for,string,fail,on,string,fail,on,strings,if,out,content,string,contains,fail,on,string,err,content,string,contains,fail,on,string,log,warn,failing,test,output,contained,illegal,string,fail,on,string,send,output,runner,send,stop,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,30000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,if,runner,get,return,value,0,assert,fail,runner,thread,died,before,the,test,was,finished,return,value,runner,get,return,value,else,log,info,runner,stopped,earlier,than,expected,with,return,value,0,break,while,expected,string,seen,system,current,time,millis,deadline,send,output,assert,assert,true,during,the,timeout,period,of,seconds,the,expected,string,did,not,show,up,expected,string,seen,assert,assert,equals,expected,return,value,return,code,runner,get,return,value,log,info,test,was,successful
YarnTestBase -> @BeforeClass 	public static void setup();1422034750;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1422034750;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1422034750;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1423061851;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1423144032;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1425463229;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1425489636;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1462389709;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1464630565;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1466152678;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1466787223;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1467104066;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1467379351;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1472485736;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1473347848;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1474022056;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1474401809;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1474401809;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1476266315;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1477570902;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1484162264;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(yarnConfiguration)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config,yarn,configuration
YarnTestBase -> @BeforeClass 	public static void setup();1495702763;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1501088110;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1501237018;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1507994191;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1511347989;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1511863857;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515177485;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515686359;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515699581;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515699597;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515699606;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515770042;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1515770043;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1518945174;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1519839433;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1520030750;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1520032158;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1521739913;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1521739913;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1522681180;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1525773113;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1526494918;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1529682304;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1531982617;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1538127997;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1546618773;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> @BeforeClass 	public static void setup();1546953479;Default @BeforeClass impl. Overwrite this for passing a different configuration;@BeforeClass_	public static void setup() {_		startYARNWithConfig(YARN_CONFIGURATION)__	};default,before,class,impl,overwrite,this,for,passing,a,different,configuration;before,class,public,static,void,setup,start,yarnwith,config
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1515770043;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1518945174;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1519839433;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1520030750;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1520032158;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1521739913;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1521739913;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1522681180;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1525773113;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1526494918;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1529682304;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1531982617;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1538127997;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1546618773;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1546953479;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1547742425;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1548435402;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1548773096;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1548773096;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException;1549360056;The test has been passed once the "terminateAfterString" has been seen._@param args Command line arguments for the runner_@param terminateAfterString the runner is searching the stdout and stderr for this string. as soon as it appears, the test has passed_@param failOnPatterns The runner is searching stdout and stderr for the pattern (regexp) specified here. If one appears, the test has failed_@param type Set the type of the runner_@param expectedReturnValue Expected return code from the runner._@param checkLogForTerminateString  If true, the runner checks also the log4j logger for the terminate string;protected void runWithArgs(String[] args, String terminateAfterString, String[] failOnPatterns, RunTypes type, int expectedReturnValue, boolean checkLogForTerminateString) throws IOException {_		LOG.info("Running with args {}", Arrays.toString(args))___		outContent = new ByteArrayOutputStream()__		errContent = new ByteArrayOutputStream()__		PipedOutputStream out = new PipedOutputStream()__		PipedInputStream in = new PipedInputStream(out)__		PrintStream stdinPrintStream = new PrintStream(out)__		System.setOut(new PrintStream(outContent))__		System.setErr(new PrintStream(errContent))__		System.setIn(in)___		_		final int startTimeoutSeconds = 180__		final long deadline = System.currentTimeMillis() + (startTimeoutSeconds * 1000)___		Runner runner = new Runner(_			args,_			flinkConfiguration,_			CliFrontend.getConfigurationDirectoryFromEnv(),_			type,_			expectedReturnValue,_			stdinPrintStream)__		runner.start()___		boolean expectedStringSeen = false__		boolean testPassedFromLog4j = false__		long shutdownTimeout = 30000L__		do {_			sleep(1000)__			String outContentString = outContent.toString()__			String errContentString = errContent.toString()__			if (failOnPatterns != null) {_				for (String failOnString : failOnPatterns) {_					Pattern pattern = Pattern.compile(failOnString)__					if (pattern.matcher(outContentString).find() || pattern.matcher(errContentString).find()) {_						LOG.warn("Failing test. Output contained illegal string '" + failOnString + "'")__						resetStreamsAndSendOutput()__						_						runner.sendStop()__						_						try {_							runner.join(shutdownTimeout)__						} catch (InterruptedException e) {_							LOG.warn("Interrupted while stopping runner", e)__						}_						Assert.fail("Output contained illegal string '" + failOnString + "'")__					}_				}_			}_			_			if (checkLogForTerminateString) {_				LoggingEvent matchedEvent = UtilsTest.getEventContainingString(terminateAfterString)__				if (matchedEvent != null) {_					testPassedFromLog4j = true__					LOG.info("Found expected output in logging event {}", matchedEvent)__				}__			}__			if (outContentString.contains(terminateAfterString) || errContentString.contains(terminateAfterString) || testPassedFromLog4j) {_				expectedStringSeen = true__				LOG.info("Found expected output in redirected streams")__				_				LOG.info("RunWithArgs: request runner to stop")__				runner.sendStop()__				_				try {_					runner.join(shutdownTimeout)__				}_				catch (InterruptedException e) {_					LOG.warn("Interrupted while stopping runner", e)__				}_				LOG.warn("RunWithArgs runner stopped.")__			}_			else {_				_				if (!runner.isAlive()) {_					_					break__				}_			}_		}_		while (runner.getRunnerError() == null && !expectedStringSeen && System.currentTimeMillis() < deadline)___		resetStreamsAndSendOutput()___		if (runner.getRunnerError() != null) {_			_			throw new RuntimeException("Runner failed", runner.getRunnerError())__		}_		Assert.assertTrue("During the timeout period of " + startTimeoutSeconds + " seconds the " +_				"expected string \"" + terminateAfterString + "\" did not show up.", expectedStringSeen)___		LOG.info("Test was successful")__	};the,test,has,been,passed,once,the,terminate,after,string,has,been,seen,param,args,command,line,arguments,for,the,runner,param,terminate,after,string,the,runner,is,searching,the,stdout,and,stderr,for,this,string,as,soon,as,it,appears,the,test,has,passed,param,fail,on,patterns,the,runner,is,searching,stdout,and,stderr,for,the,pattern,regexp,specified,here,if,one,appears,the,test,has,failed,param,type,set,the,type,of,the,runner,param,expected,return,value,expected,return,code,from,the,runner,param,check,log,for,terminate,string,if,true,the,runner,checks,also,the,log4j,logger,for,the,terminate,string;protected,void,run,with,args,string,args,string,terminate,after,string,string,fail,on,patterns,run,types,type,int,expected,return,value,boolean,check,log,for,terminate,string,throws,ioexception,log,info,running,with,args,arrays,to,string,args,out,content,new,byte,array,output,stream,err,content,new,byte,array,output,stream,piped,output,stream,out,new,piped,output,stream,piped,input,stream,in,new,piped,input,stream,out,print,stream,stdin,print,stream,new,print,stream,out,system,set,out,new,print,stream,out,content,system,set,err,new,print,stream,err,content,system,set,in,in,final,int,start,timeout,seconds,180,final,long,deadline,system,current,time,millis,start,timeout,seconds,1000,runner,runner,new,runner,args,flink,configuration,cli,frontend,get,configuration,directory,from,env,type,expected,return,value,stdin,print,stream,runner,start,boolean,expected,string,seen,false,boolean,test,passed,from,log4j,false,long,shutdown,timeout,30000l,do,sleep,1000,string,out,content,string,out,content,to,string,string,err,content,string,err,content,to,string,if,fail,on,patterns,null,for,string,fail,on,string,fail,on,patterns,pattern,pattern,pattern,compile,fail,on,string,if,pattern,matcher,out,content,string,find,pattern,matcher,err,content,string,find,log,warn,failing,test,output,contained,illegal,string,fail,on,string,reset,streams,and,send,output,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,assert,fail,output,contained,illegal,string,fail,on,string,if,check,log,for,terminate,string,logging,event,matched,event,utils,test,get,event,containing,string,terminate,after,string,if,matched,event,null,test,passed,from,log4j,true,log,info,found,expected,output,in,logging,event,matched,event,if,out,content,string,contains,terminate,after,string,err,content,string,contains,terminate,after,string,test,passed,from,log4j,expected,string,seen,true,log,info,found,expected,output,in,redirected,streams,log,info,run,with,args,request,runner,to,stop,runner,send,stop,try,runner,join,shutdown,timeout,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,run,with,args,runner,stopped,else,if,runner,is,alive,break,while,runner,get,runner,error,null,expected,string,seen,system,current,time,millis,deadline,reset,streams,and,send,output,if,runner,get,runner,error,null,throw,new,runtime,exception,runner,failed,runner,get,runner,error,assert,assert,true,during,the,timeout,period,of,start,timeout,seconds,seconds,the,expected,string,terminate,after,string,did,not,show,up,expected,string,seen,log,info,test,was,successful
YarnTestBase -> public static void ensureNoExceptionsInLogFiles();1425463229;This method checks the written TaskManager and JobManager log files_for exceptions.;public static void ensureNoExceptionsInLogFiles() {_		File cwd = new File("target/"+TEST_CLUSTER_NAME)__		Assert.assertTrue("Expecting directory "+cwd.getAbsolutePath()+" to exist", cwd.exists())__		Assert.assertTrue("Expecting directory "+cwd.getAbsolutePath()+" to be a directory", cwd.isDirectory())__		System.out.println("cwd = "+cwd.getAbsolutePath())__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_				File f = new File(dir.getAbsolutePath()+ "/" + name)__				_				Scanner scanner =  null__				try {_					scanner = new Scanner(f)__				} catch (FileNotFoundException e) {_					Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__				}_				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					if(lineFromFile.contains("Exception")) {_						return true__					}_				}_				return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with an exception. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with an exception")__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions;public,static,void,ensure,no,exceptions,in,log,files,file,cwd,new,file,target,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,system,out,println,cwd,cwd,get,absolute,path,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,scanner,scanner,null,try,scanner,new,scanner,f,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,f,get,absolute,path,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,if,line,from,file,contains,exception,return,true,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,an,exception,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,an,exception
YarnTestBase -> public static void ensureNoExceptionsInLogFiles();1425489636;This method checks the written TaskManager and JobManager log files_for exceptions.;public static void ensureNoExceptionsInLogFiles() {_		File cwd = new File("target/"+TEST_CLUSTER_NAME)__		Assert.assertTrue("Expecting directory "+cwd.getAbsolutePath()+" to exist", cwd.exists())__		Assert.assertTrue("Expecting directory "+cwd.getAbsolutePath()+" to be a directory", cwd.isDirectory())__		System.out.println("cwd = "+cwd.getAbsolutePath())__		File foundFile = findFile(cwd.getAbsolutePath(), new FilenameFilter() {_			@Override_			public boolean accept(File dir, String name) {_				File f = new File(dir.getAbsolutePath()+ "/" + name)__				_				Scanner scanner =  null__				try {_					scanner = new Scanner(f)__				} catch (FileNotFoundException e) {_					Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+f.getAbsolutePath())__				}_				while (scanner.hasNextLine()) {_					final String lineFromFile = scanner.nextLine()__					if(lineFromFile.contains("Exception")) {_						return true__					}_				}_				return false__			}_		})__		if(foundFile != null) {_			Scanner scanner =  null__			try {_				scanner = new Scanner(foundFile)__			} catch (FileNotFoundException e) {_				Assert.fail("Unable to locate file: "+e.getMessage()+" file: "+foundFile.getAbsolutePath())__			}_			LOG.warn("Found a file with an exception. Printing contents:")__			while (scanner.hasNextLine()) {_				LOG.warn("LINE: "+scanner.nextLine())__			}_			Assert.fail("Found a file "+foundFile+" with an exception")__		}_	};this,method,checks,the,written,task,manager,and,job,manager,log,files,for,exceptions;public,static,void,ensure,no,exceptions,in,log,files,file,cwd,new,file,target,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,exist,cwd,exists,assert,assert,true,expecting,directory,cwd,get,absolute,path,to,be,a,directory,cwd,is,directory,system,out,println,cwd,cwd,get,absolute,path,file,found,file,find,file,cwd,get,absolute,path,new,filename,filter,override,public,boolean,accept,file,dir,string,name,file,f,new,file,dir,get,absolute,path,name,scanner,scanner,null,try,scanner,new,scanner,f,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,f,get,absolute,path,while,scanner,has,next,line,final,string,line,from,file,scanner,next,line,if,line,from,file,contains,exception,return,true,return,false,if,found,file,null,scanner,scanner,null,try,scanner,new,scanner,found,file,catch,file,not,found,exception,e,assert,fail,unable,to,locate,file,e,get,message,file,found,file,get,absolute,path,log,warn,found,a,file,with,an,exception,printing,contents,while,scanner,has,next,line,log,warn,line,scanner,next,line,assert,fail,found,a,file,found,file,with,an,exception
