commented;modifiers;parameterAmount;loc;comment;code
false;public;2;28;;@Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {     try {         ByteBuf buf = (ByteBuf) msg.         MessageType msgType = MessageSerializer.deserializeHeader(buf).         if (msgType == MessageType.REQUEST_RESULT) {             long requestId = MessageSerializer.getRequestId(buf).             RESP result = serializer.deserializeResponse(buf).             callback.onRequestResult(requestId, result).         } else if (msgType == MessageType.REQUEST_FAILURE) {             RequestFailure failure = MessageSerializer.deserializeRequestFailure(buf).             callback.onRequestFailure(failure.getRequestId(), failure.getCause()).         } else if (msgType == MessageType.SERVER_FAILURE) {             throw MessageSerializer.deserializeServerFailure(buf).         } else {             throw new IllegalStateException("Unexpected response type '" + msgType + "'").         }     } catch (Throwable t1) {         try {             callback.onFailure(t1).         } catch (Throwable t2) {             LOG.error("Failed to notify callback about failure", t2).         }     } finally {         ReferenceCountUtil.release(msg).     } }
false;public;2;8;;@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {     try {         callback.onFailure(cause).     } catch (Throwable t) {         LOG.error("Failed to notify callback about failure", t).     } }
false;public;1;12;;@Override public void channelInactive(ChannelHandlerContext ctx) throws Exception {     // ignored.     try {         callback.onFailure(new ClosedChannelException()).     } catch (Throwable t) {         LOG.error("Failed to notify callback about failure", t).     } }
