commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Serializes the request sent to the  * {@link org.apache.flink.queryablestate.network.AbstractServerBase}.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param request		The request to be serialized.  * @return A {@link ByteBuf} containing the serialized message.  */ ;// ------------------------------------------------------------------------ // Serialization // ------------------------------------------------------------------------ /**  * Serializes the request sent to the  * {@link org.apache.flink.queryablestate.network.AbstractServerBase}.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param request		The request to be serialized.  * @return A {@link ByteBuf} containing the serialized message.  */ public static <REQ extends MessageBody> ByteBuf serializeRequest(final ByteBufAllocator alloc, final long requestId, final REQ request) {     Preconditions.checkNotNull(request).     return writePayload(alloc, requestId, MessageType.REQUEST, request.serialize()). }
true;public,static;3;7;/**  * Serializes the response sent to the  * {@link org.apache.flink.queryablestate.network.Client}.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param response		The response to be serialized.  * @return A {@link ByteBuf} containing the serialized message.  */ ;/**  * Serializes the response sent to the  * {@link org.apache.flink.queryablestate.network.Client}.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param response		The response to be serialized.  * @return A {@link ByteBuf} containing the serialized message.  */ public static <RESP extends MessageBody> ByteBuf serializeResponse(final ByteBufAllocator alloc, final long requestId, final RESP response) {     Preconditions.checkNotNull(response).     return writePayload(alloc, requestId, MessageType.REQUEST_RESULT, response.serialize()). }
true;public,static;3;22;/**  * Serializes the exception containing the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * protocol related errors.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param cause			The exception thrown at the server.  * @return A {@link ByteBuf} containing the serialized message.  */ ;/**  * Serializes the exception containing the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * protocol related errors.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param cause			The exception thrown at the server.  * @return A {@link ByteBuf} containing the serialized message.  */ public static ByteBuf serializeRequestFailure(final ByteBufAllocator alloc, final long requestId, final Throwable cause) throws IOException {     final ByteBuf buf = alloc.ioBuffer().     // Frame length is set at the end     buf.writeInt(0).     writeHeader(buf, MessageType.REQUEST_FAILURE).     buf.writeLong(requestId).     try (ByteBufOutputStream bbos = new ByteBufOutputStream(buf).         ObjectOutput out = new ObjectOutputStream(bbos)) {         out.writeObject(cause).     }     // Set frame length     int frameLength = buf.readableBytes() - Integer.BYTES.     buf.setInt(0, frameLength).     return buf. }
true;public,static;2;20;/**  * Serializes the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * server related errors.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param cause			The exception thrown at the server.  * @return		The failure message.  */ ;/**  * Serializes the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * server related errors.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param cause			The exception thrown at the server.  * @return		The failure message.  */ public static ByteBuf serializeServerFailure(final ByteBufAllocator alloc, final Throwable cause) throws IOException {     final ByteBuf buf = alloc.ioBuffer().     // Frame length is set at end     buf.writeInt(0).     writeHeader(buf, MessageType.SERVER_FAILURE).     try (ByteBufOutputStream bbos = new ByteBufOutputStream(buf).         ObjectOutput out = new ObjectOutputStream(bbos)) {         out.writeObject(cause).     }     // Set frame length     int frameLength = buf.readableBytes() - Integer.BYTES.     buf.setInt(0, frameLength).     return buf. }
true;private,static;2;4;/**  * Helper for serializing the header.  *  * @param buf         The {@link ByteBuf} to serialize the header into.  * @param messageType The {@link MessageType} of the message this header refers to.  */ ;/**  * Helper for serializing the header.  *  * @param buf         The {@link ByteBuf} to serialize the header into.  * @param messageType The {@link MessageType} of the message this header refers to.  */ private static void writeHeader(final ByteBuf buf, final MessageType messageType) {     buf.writeInt(VERSION).     buf.writeInt(messageType.ordinal()). }
true;private,static;4;15;/**  * Helper for serializing the messages.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param messageType	The {@link MessageType type of the message}.  * @param payload		The serialized version of the message.  * @return A {@link ByteBuf} containing the serialized message.  */ ;/**  * Helper for serializing the messages.  *  * @param alloc			The {@link ByteBufAllocator} used to allocate the buffer to serialize the message into.  * @param requestId		The id of the request to which the message refers to.  * @param messageType	The {@link MessageType type of the message}.  * @param payload		The serialized version of the message.  * @return A {@link ByteBuf} containing the serialized message.  */ private static ByteBuf writePayload(final ByteBufAllocator alloc, final long requestId, final MessageType messageType, final byte[] payload) {     final int frameLength = HEADER_LENGTH + REQUEST_ID_SIZE + payload.length.     final ByteBuf buf = alloc.ioBuffer(frameLength + Integer.BYTES).     buf.writeInt(frameLength).     writeHeader(buf, messageType).     buf.writeLong(requestId).     buf.writeBytes(payload).     return buf. }
true;public,static;1;14;/**  * De-serializes the header and returns the {@link MessageType}.  * <pre>  *  <b>The buffer is expected to be at the header position.</b>  * </pre>  * @param buf						The {@link ByteBuf} containing the serialized header.  * @return							The message type.  * @throws IllegalStateException	If unexpected message version or message type.  */ ;// ------------------------------------------------------------------------ // Deserialization // ------------------------------------------------------------------------ /**  * De-serializes the header and returns the {@link MessageType}.  * <pre>  *  <b>The buffer is expected to be at the header position.</b>  * </pre>  * @param buf						The {@link ByteBuf} containing the serialized header.  * @return							The message type.  * @throws IllegalStateException	If unexpected message version or message type.  */ public static MessageType deserializeHeader(final ByteBuf buf) {     // checking the version     int version = buf.readInt().     Preconditions.checkState(version == VERSION, "Version Mismatch:  Found " + version + ", Expected: " + VERSION + '.').     // fetching the message type     int msgType = buf.readInt().     MessageType[] values = MessageType.values().     Preconditions.checkState(msgType >= 0 && msgType < values.length, "Illegal message type with index " + msgType + '.').     return values[msgType]. }
true;public,static;1;3;/**  * De-serializes the header and returns the {@link MessageType}.  * <pre>  *  <b>The buffer is expected to be at the request id position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized request id.  * @return		The request id.  */ ;/**  * De-serializes the header and returns the {@link MessageType}.  * <pre>  *  <b>The buffer is expected to be at the request id position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized request id.  * @return		The request id.  */ public static long getRequestId(final ByteBuf buf) {     return buf.readLong(). }
true;public;1;4;/**  * De-serializes the request sent to the  * {@link org.apache.flink.queryablestate.network.AbstractServerBase}.  * <pre>  *  <b>The buffer is expected to be at the request position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized request.  * @return		The request.  */ ;/**  * De-serializes the request sent to the  * {@link org.apache.flink.queryablestate.network.AbstractServerBase}.  * <pre>  *  <b>The buffer is expected to be at the request position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized request.  * @return		The request.  */ public REQ deserializeRequest(final ByteBuf buf) {     Preconditions.checkNotNull(buf).     return requestDeserializer.deserializeMessage(buf). }
true;public;1;4;/**  * De-serializes the response sent to the  * {@link org.apache.flink.queryablestate.network.Client}.  * <pre>  *  <b>The buffer is expected to be at the response position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized response.  * @return		The response.  */ ;/**  * De-serializes the response sent to the  * {@link org.apache.flink.queryablestate.network.Client}.  * <pre>  *  <b>The buffer is expected to be at the response position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized response.  * @return		The response.  */ public RESP deserializeResponse(final ByteBuf buf) {     Preconditions.checkNotNull(buf).     return responseDeserializer.deserializeMessage(buf). }
true;public,static;1;10;/**  * De-serializes the {@link RequestFailure} sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * protocol related errors.  * <pre>  *  <b>The buffer is expected to be at the correct position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized failure message.  * @return		The failure message.  */ ;/**  * De-serializes the {@link RequestFailure} sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * protocol related errors.  * <pre>  *  <b>The buffer is expected to be at the correct position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized failure message.  * @return		The failure message.  */ public static RequestFailure deserializeRequestFailure(final ByteBuf buf) throws IOException, ClassNotFoundException {     long requestId = buf.readLong().     Throwable cause.     try (ByteBufInputStream bis = new ByteBufInputStream(buf).         ObjectInputStream in = new ObjectInputStream(bis)) {         cause = (Throwable) in.readObject().     }     return new RequestFailure(requestId, cause). }
true;public,static;1;6;/**  * De-serializes the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * server related errors.  * <pre>  *  <b>The buffer is expected to be at the correct position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized failure message.  * @return		The failure message.  */ ;/**  * De-serializes the failure message sent to the  * {@link org.apache.flink.queryablestate.network.Client} in case of  * server related errors.  * <pre>  *  <b>The buffer is expected to be at the correct position.</b>  * </pre>  * @param buf	The {@link ByteBuf} containing the serialized failure message.  * @return		The failure message.  */ public static Throwable deserializeServerFailure(final ByteBuf buf) throws IOException, ClassNotFoundException {     try (ByteBufInputStream bis = new ByteBufInputStream(buf).         ObjectInputStream in = new ObjectInputStream(bis)) {         return (Throwable) in.readObject().     } }
