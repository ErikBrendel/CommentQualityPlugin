commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return true. }
false;public;0;4;;@Override public VoidNamespace createInstance() {     return VoidNamespace.get(). }
false;public;1;4;;@Override public VoidNamespace copy(VoidNamespace from) {     return VoidNamespace.get(). }
false;public;2;4;;@Override public VoidNamespace copy(VoidNamespace from, VoidNamespace reuse) {     return VoidNamespace.get(). }
false;public;0;4;;@Override public int getLength() {     return 0. }
false;public;2;9;;@Override public void serialize(VoidNamespace record, DataOutputView target) throws IOException {     // Make progress in the stream, write one byte.     //      // We could just skip writing anything here, because of the way this is     // used with the state backends, but if it is ever used somewhere else     // (even though it is unlikely to happen), it would be a problem.     target.write(0). }
false;public;1;5;;@Override public VoidNamespace deserialize(DataInputView source) throws IOException {     source.readByte().     return VoidNamespace.get(). }
false;public;2;5;;@Override public VoidNamespace deserialize(VoidNamespace reuse, DataInputView source) throws IOException {     source.readByte().     return VoidNamespace.get(). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source.readByte()). }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public TypeSerializerSnapshot<VoidNamespace> snapshotConfiguration() {     return new VoidNamespaceSerializerSnapshot(). }
