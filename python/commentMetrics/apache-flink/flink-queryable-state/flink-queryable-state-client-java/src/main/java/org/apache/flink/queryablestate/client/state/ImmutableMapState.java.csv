commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public V get(K key) {     return state.get(key). }
false;public;2;4;;@Override public void put(K key, V value) {     throw MODIFICATION_ATTEMPT_ERROR. }
false;public;1;4;;@Override public void putAll(Map<K, V> map) {     throw MODIFICATION_ATTEMPT_ERROR. }
false;public;1;4;;@Override public void remove(K key) {     throw MODIFICATION_ATTEMPT_ERROR. }
false;public;1;4;;@Override public boolean contains(K key) {     return state.containsKey(key). }
true;public;0;4;/**  * Returns all the mappings in the state in a {@link Collections#unmodifiableSet(Set)}.  *  * @return A read-only iterable view of all the key-value pairs in the state.  */ ;/**  * Returns all the mappings in the state in a {@link Collections#unmodifiableSet(Set)}.  *  * @return A read-only iterable view of all the key-value pairs in the state.  */ @Override public Iterable<Map.Entry<K, V>> entries() {     return Collections.unmodifiableSet(state.entrySet()). }
true;public;0;4;/**  * Returns all the keys in the state in a {@link Collections#unmodifiableSet(Set)}.  *  * @return A read-only iterable view of all the keys in the state.  */ ;/**  * Returns all the keys in the state in a {@link Collections#unmodifiableSet(Set)}.  *  * @return A read-only iterable view of all the keys in the state.  */ @Override public Iterable<K> keys() {     return Collections.unmodifiableSet(state.keySet()). }
true;public;0;4;/**  * Returns all the values in the state in a {@link Collections#unmodifiableCollection(Collection)}.  *  * @return A read-only iterable view of all the values in the state.  */ ;/**  * Returns all the values in the state in a {@link Collections#unmodifiableCollection(Collection)}.  *  * @return A read-only iterable view of all the values in the state.  */ @Override public Iterable<V> values() {     return Collections.unmodifiableCollection(state.values()). }
true;public;0;4;/**  * Iterates over all the mappings in the state. The iterator cannot  * remove elements.  *  * @return A read-only iterator over all the mappings in the state.  */ ;/**  * Iterates over all the mappings in the state. The iterator cannot  * remove elements.  *  * @return A read-only iterator over all the mappings in the state.  */ @Override public Iterator<Map.Entry<K, V>> iterator() {     return Collections.unmodifiableSet(state.entrySet()).iterator(). }
false;public;0;4;;@Override public void clear() {     throw MODIFICATION_ATTEMPT_ERROR. }
false;public,static;2;11;;@SuppressWarnings("unchecked") public static <K, V, T, S extends State> S createState(StateDescriptor<S, T> stateDescriptor, byte[] serializedState) throws IOException {     MapStateDescriptor<K, V> mapStateDescriptor = (MapStateDescriptor<K, V>) stateDescriptor.     final Map<K, V> state = KvStateSerializer.deserializeMap(serializedState, mapStateDescriptor.getKeySerializer(), mapStateDescriptor.getValueSerializer()).     return (S) new ImmutableMapState<>(state). }
