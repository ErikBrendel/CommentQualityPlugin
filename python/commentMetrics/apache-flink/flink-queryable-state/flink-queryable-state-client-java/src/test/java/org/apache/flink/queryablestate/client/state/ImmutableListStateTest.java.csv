commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() throws Exception {     if (!listStateDesc.isSerializerInitialized()) {         listStateDesc.initializeSerializerUnlessSet(new ExecutionConfig()).     }     List<Long> init = new ArrayList<>().     init.add(42L).     byte[] serInit = serializeInitValue(init).     listState = ImmutableListState.createState(listStateDesc, serInit). }
false;public;0;10;;@Test(expected = UnsupportedOperationException.class) public void testUpdate() throws Exception {     List<Long> list = getStateContents().     assertEquals(1L, list.size()).     long element = list.get(0).     assertEquals(42L, element).     listState.add(54L). }
false;public;0;10;;@Test(expected = UnsupportedOperationException.class) public void testClear() throws Exception {     List<Long> list = getStateContents().     assertEquals(1L, list.size()).     long element = list.get(0).     assertEquals(42L, element).     listState.clear(). }
true;private;1;17;/**  * Copied from HeapListState.getSerializedValue(Object, Object).  */ ;/**  * Copied from HeapListState.getSerializedValue(Object, Object).  */ private byte[] serializeInitValue(List<Long> toSerialize) throws IOException {     TypeSerializer<Long> serializer = listStateDesc.getElementSerializer().     ByteArrayOutputStream baos = new ByteArrayOutputStream().     DataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos).     // write the same as RocksDB writes lists, with one ',' separator     for (int i = 0. i < toSerialize.size(). i++) {         serializer.serialize(toSerialize.get(i), view).         if (i < toSerialize.size() - 1) {             view.writeByte(',').         }     }     view.flush().     return baos.toByteArray(). }
false;private;0;7;;private List<Long> getStateContents() throws Exception {     List<Long> list = new ArrayList<>().     for (Long elem : listState.get()) {         list.add(elem).     }     return list. }
