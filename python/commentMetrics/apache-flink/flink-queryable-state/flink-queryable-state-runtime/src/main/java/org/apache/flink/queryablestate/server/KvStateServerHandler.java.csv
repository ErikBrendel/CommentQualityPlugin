commented;modifiers;parameterAmount;loc;comment;code
false;public;2;26;;@Override public CompletableFuture<KvStateResponse> handleRequest(final long requestId, final KvStateInternalRequest request) {     final CompletableFuture<KvStateResponse> responseFuture = new CompletableFuture<>().     try {         final KvStateEntry<?, ?, ?> kvState = registry.getKvState(request.getKvStateId()).         if (kvState == null) {             responseFuture.completeExceptionally(new UnknownKvStateIdException(getServerName(), request.getKvStateId())).         } else {             byte[] serializedKeyAndNamespace = request.getSerializedKeyAndNamespace().             byte[] serializedResult = getSerializedValue(kvState, serializedKeyAndNamespace).             if (serializedResult != null) {                 responseFuture.complete(new KvStateResponse(serializedResult)).             } else {                 responseFuture.completeExceptionally(new UnknownKeyOrNamespaceException(getServerName())).             }         }         return responseFuture.     } catch (Throwable t) {         String errMsg = "Error while processing request with ID " + requestId + ". Caused by: " + ExceptionUtils.stringifyException(t).         responseFuture.completeExceptionally(new RuntimeException(errMsg)).         return responseFuture.     } }
false;private,static;2;14;;private static <K, N, V> byte[] getSerializedValue(final KvStateEntry<K, N, V> entry, final byte[] serializedKeyAndNamespace) throws Exception {     final InternalKvState<K, N, V> state = entry.getState().     final KvStateInfo<K, N, V> infoForCurrentThread = entry.getInfoForCurrentThread().     return state.getSerializedValue(serializedKeyAndNamespace, infoForCurrentThread.getKeySerializer(), infoForCurrentThread.getNamespaceSerializer(), infoForCurrentThread.getStateValueSerializer()). }
false;public;0;4;;@Override public CompletableFuture<Void> shutdown() {     return CompletableFuture.completedFuture(null). }
