# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1509037054;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1509404932;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1510910970;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1512567202;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1517914184;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1526574663;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> public KvStateClientProxyHandler( 			final KvStateClientProxyImpl proxy, 			final int queryExecutorThreads, 			final MessageSerializer<KvStateRequest, KvStateResponse> serializer, 			final KvStateRequestStats stats);1527612165;Create the handler used by the {@link KvStateClientProxyImpl}.__@param proxy the {@link KvStateClientProxyImpl proxy} using the handler._@param queryExecutorThreads the number of threads used to process incoming requests._@param serializer the {@link MessageSerializer} used to (de-) serialize the different messages._@param stats server statistics collector.;public KvStateClientProxyHandler(_			final KvStateClientProxyImpl proxy,_			final int queryExecutorThreads,_			final MessageSerializer<KvStateRequest, KvStateResponse> serializer,_			final KvStateRequestStats stats) {__		super(proxy, serializer, stats)__		this.proxy = Preconditions.checkNotNull(proxy)__		this.kvStateClient = createInternalClient(queryExecutorThreads)__	};create,the,handler,used,by,the,link,kv,state,client,proxy,impl,param,proxy,the,link,kv,state,client,proxy,impl,proxy,using,the,handler,param,query,executor,threads,the,number,of,threads,used,to,process,incoming,requests,param,serializer,the,link,message,serializer,used,to,de,serialize,the,different,messages,param,stats,server,statistics,collector;public,kv,state,client,proxy,handler,final,kv,state,client,proxy,impl,proxy,final,int,query,executor,threads,final,message,serializer,kv,state,request,kv,state,response,serializer,final,kv,state,request,stats,stats,super,proxy,serializer,stats,this,proxy,preconditions,check,not,null,proxy,this,kv,state,client,create,internal,client,query,executor,threads
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1509037054;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName)__			return cachedFuture__		}__		LOG.debug("Retrieving location for state={} of job={} from the job manager.", jobId, queryableStateName)___		return proxy.getJobManagerFuture().thenComposeAsync(_				jobManagerGateway -> {_					final Object msg = new KvStateMessage.LookupKvStateLocation(jobId, queryableStateName)__					final CompletableFuture<KvStateLocation> locationFuture = FutureUtils.toJava(_							jobManagerGateway.ask(msg, FiniteDuration.apply(1000L, TimeUnit.MILLISECONDS))_									.mapTo(ClassTag$.MODULE$.<KvStateLocation>apply(KvStateLocation.class)))___					lookupCache.put(cacheKey, locationFuture)__					return locationFuture__				}, queryExecutor)__	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,job,id,queryable,state,name,return,cached,future,log,debug,retrieving,location,for,state,of,job,from,the,job,manager,job,id,queryable,state,name,return,proxy,get,job,manager,future,then,compose,async,job,manager,gateway,final,object,msg,new,kv,state,message,lookup,kv,state,location,job,id,queryable,state,name,final,completable,future,kv,state,location,location,future,future,utils,to,java,job,manager,gateway,ask,msg,finite,duration,apply,1000l,time,unit,milliseconds,map,to,class,tag,module,kv,state,location,apply,kv,state,location,class,lookup,cache,put,cache,key,location,future,return,location,future,query,executor
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1509404932;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName)__			return cachedFuture__		}__		LOG.debug("Retrieving location for state={} of job={} from the job manager.", jobId, queryableStateName)___		return proxy.getJobManagerFuture().thenComposeAsync(_				jobManagerGateway -> {_					final Object msg = new KvStateMessage.LookupKvStateLocation(jobId, queryableStateName)__					final CompletableFuture<KvStateLocation> locationFuture = FutureUtils.toJava(_							jobManagerGateway.ask(msg, FiniteDuration.apply(1000L, TimeUnit.MILLISECONDS))_									.mapTo(ClassTag$.MODULE$.<KvStateLocation>apply(KvStateLocation.class)))___					lookupCache.put(cacheKey, locationFuture)__					return locationFuture__				}, queryExecutor)__	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,job,id,queryable,state,name,return,cached,future,log,debug,retrieving,location,for,state,of,job,from,the,job,manager,job,id,queryable,state,name,return,proxy,get,job,manager,future,then,compose,async,job,manager,gateway,final,object,msg,new,kv,state,message,lookup,kv,state,location,job,id,queryable,state,name,final,completable,future,kv,state,location,location,future,future,utils,to,java,job,manager,gateway,ask,msg,finite,duration,apply,1000l,time,unit,milliseconds,map,to,class,tag,module,kv,state,location,apply,kv,state,location,class,lookup,cache,put,cache,key,location,future,return,location,future,query,executor
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1510910970;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName)__			return cachedFuture__		}__		LOG.debug("Retrieving location for state={} of job={} from the job manager.", jobId, queryableStateName)___		return proxy.getJobManagerFuture().thenComposeAsync(_				jobManagerGateway -> {_					final Object msg = new KvStateMessage.LookupKvStateLocation(jobId, queryableStateName)__					final CompletableFuture<KvStateLocation> locationFuture = FutureUtils.toJava(_							jobManagerGateway.ask(msg, FiniteDuration.apply(1000L, TimeUnit.MILLISECONDS))_									.mapTo(ClassTag$.MODULE$.<KvStateLocation>apply(KvStateLocation.class)))___					lookupCache.put(cacheKey, locationFuture)__					return locationFuture__				}, queryExecutor)__	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,job,id,queryable,state,name,return,cached,future,log,debug,retrieving,location,for,state,of,job,from,the,job,manager,job,id,queryable,state,name,return,proxy,get,job,manager,future,then,compose,async,job,manager,gateway,final,object,msg,new,kv,state,message,lookup,kv,state,location,job,id,queryable,state,name,final,completable,future,kv,state,location,location,future,future,utils,to,java,job,manager,gateway,ask,msg,finite,duration,apply,1000l,time,unit,milliseconds,map,to,class,tag,module,kv,state,location,apply,kv,state,location,class,lookup,cache,put,cache,key,location,future,return,location,future,query,executor
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1512567202;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName)__			return cachedFuture__		}__		LOG.debug("Retrieving location for state={} of job={} from the job manager.", jobId, queryableStateName)___		final CompletableFuture<KvStateLocation> location = new CompletableFuture<>()__		lookupCache.put(cacheKey, location)__		return proxy.getJobManagerFuture().thenComposeAsync(_				jobManagerGateway -> {_					final Object msg = new KvStateMessage.LookupKvStateLocation(jobId, queryableStateName)__					jobManagerGateway.ask(msg, FiniteDuration.apply(1000L, TimeUnit.MILLISECONDS))_							.mapTo(ClassTag$.MODULE$.<KvStateLocation>apply(KvStateLocation.class))_							.onComplete(new OnComplete<KvStateLocation>() {__								@Override_								public void onComplete(Throwable failure, KvStateLocation loc) throws Throwable {_									if (failure != null) {_										if (failure instanceof FlinkJobNotFoundException) {_											_											lookupCache.remove(cacheKey)__										}_										location.completeExceptionally(failure)__									} else {_										location.complete(loc)__									}_								}_							}, Executors.directExecutionContext())__					return location__				}, queryExecutor)__	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,job,id,queryable,state,name,return,cached,future,log,debug,retrieving,location,for,state,of,job,from,the,job,manager,job,id,queryable,state,name,final,completable,future,kv,state,location,location,new,completable,future,lookup,cache,put,cache,key,location,return,proxy,get,job,manager,future,then,compose,async,job,manager,gateway,final,object,msg,new,kv,state,message,lookup,kv,state,location,job,id,queryable,state,name,job,manager,gateway,ask,msg,finite,duration,apply,1000l,time,unit,milliseconds,map,to,class,tag,module,kv,state,location,apply,kv,state,location,class,on,complete,new,on,complete,kv,state,location,override,public,void,on,complete,throwable,failure,kv,state,location,loc,throws,throwable,if,failure,null,if,failure,instanceof,flink,job,not,found,exception,lookup,cache,remove,cache,key,location,complete,exceptionally,failure,else,location,complete,loc,executors,direct,execution,context,return,location,query,executor
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1517914184;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName)__			return cachedFuture__		}__		final KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId)___		if (kvStateLocationOracle != null) {_			LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.", jobId, queryableStateName)__			final CompletableFuture<KvStateLocation> location = new CompletableFuture<>()__			lookupCache.put(cacheKey, location)___			kvStateLocationOracle_				.requestKvStateLocation(jobId, queryableStateName)_				.whenComplete(_					(KvStateLocation kvStateLocation, Throwable throwable) -> {_						if (throwable != null) {_							if (ExceptionUtils.stripCompletionException(throwable) instanceof FlinkJobNotFoundException) {_								_								lookupCache.remove(cacheKey)__							}_							location.completeExceptionally(throwable)__						} else {_							location.complete(kvStateLocation)__						}_					})___			return location__		} else {_			return FutureUtils.completedExceptionally(new UnknownLocationException("Could not contact the state location oracle to retrieve the state location."))__		}_	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,job,id,queryable,state,name,return,cached,future,final,kv,state,location,oracle,kv,state,location,oracle,proxy,get,kv,state,location,oracle,job,id,if,kv,state,location,oracle,null,log,debug,retrieving,location,for,state,of,job,from,the,key,value,state,location,oracle,job,id,queryable,state,name,final,completable,future,kv,state,location,location,new,completable,future,lookup,cache,put,cache,key,location,kv,state,location,oracle,request,kv,state,location,job,id,queryable,state,name,when,complete,kv,state,location,kv,state,location,throwable,throwable,if,throwable,null,if,exception,utils,strip,completion,exception,throwable,instanceof,flink,job,not,found,exception,lookup,cache,remove,cache,key,location,complete,exceptionally,throwable,else,location,complete,kv,state,location,return,location,else,return,future,utils,completed,exceptionally,new,unknown,location,exception,could,not,contact,the,state,location,oracle,to,retrieve,the,state,location
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1526574663;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", queryableStateName, jobId)__			return cachedFuture__		}__		final KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId)___		if (kvStateLocationOracle != null) {_			LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.", queryableStateName, jobId)__			final CompletableFuture<KvStateLocation> location = new CompletableFuture<>()__			lookupCache.put(cacheKey, location)___			kvStateLocationOracle_				.requestKvStateLocation(jobId, queryableStateName)_				.whenComplete(_					(KvStateLocation kvStateLocation, Throwable throwable) -> {_						if (throwable != null) {_							if (ExceptionUtils.stripCompletionException(throwable) instanceof FlinkJobNotFoundException) {_								_								lookupCache.remove(cacheKey)__							}_							location.completeExceptionally(throwable)__						} else {_							location.complete(kvStateLocation)__						}_					})___			return location__		} else {_			return FutureUtils.completedExceptionally(new UnknownLocationException("Could not contact the state location oracle to retrieve the state location."))__		}_	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,queryable,state,name,job,id,return,cached,future,final,kv,state,location,oracle,kv,state,location,oracle,proxy,get,kv,state,location,oracle,job,id,if,kv,state,location,oracle,null,log,debug,retrieving,location,for,state,of,job,from,the,key,value,state,location,oracle,queryable,state,name,job,id,final,completable,future,kv,state,location,location,new,completable,future,lookup,cache,put,cache,key,location,kv,state,location,oracle,request,kv,state,location,job,id,queryable,state,name,when,complete,kv,state,location,kv,state,location,throwable,throwable,if,throwable,null,if,exception,utils,strip,completion,exception,throwable,instanceof,flink,job,not,found,exception,lookup,cache,remove,cache,key,location,complete,exceptionally,throwable,else,location,complete,kv,state,location,return,location,else,return,future,utils,completed,exceptionally,new,unknown,location,exception,could,not,contact,the,state,location,oracle,to,retrieve,the,state,location
KvStateClientProxyHandler -> private CompletableFuture<KvStateLocation> getKvStateLookupInfo( 			final JobID jobId, 			final String queryableStateName, 			final boolean forceUpdate);1527612165;Lookup the {@link KvStateLocation} for the given job and queryable state name.__<p>The job manager will be queried for the location only if forced or no_cached location can be found. There are no guarantees about__@param jobId              JobID the state instance belongs to._@param queryableStateName Name under which the state instance has been published._@param forceUpdate        Flag to indicate whether to force a update via the lookup service._@return Future holding the KvStateLocation;private CompletableFuture<KvStateLocation> getKvStateLookupInfo(_			final JobID jobId,_			final String queryableStateName,_			final boolean forceUpdate) {__		final Tuple2<JobID, String> cacheKey = new Tuple2<>(jobId, queryableStateName)__		final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey)___		if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {_			LOG.debug("Retrieving location for state={} of job={} from the cache.", queryableStateName, jobId)__			return cachedFuture__		}__		final KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId)___		if (kvStateLocationOracle != null) {_			LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.", queryableStateName, jobId)__			final CompletableFuture<KvStateLocation> location = new CompletableFuture<>()__			lookupCache.put(cacheKey, location)___			kvStateLocationOracle_				.requestKvStateLocation(jobId, queryableStateName)_				.whenComplete(_					(KvStateLocation kvStateLocation, Throwable throwable) -> {_						if (throwable != null) {_							if (ExceptionUtils.stripCompletionException(throwable) instanceof FlinkJobNotFoundException) {_								_								lookupCache.remove(cacheKey)__							}_							location.completeExceptionally(throwable)__						} else {_							location.complete(kvStateLocation)__						}_					})___			return location__		} else {_			return FutureUtils.completedExceptionally(_				new UnknownLocationException(_						"Could not retrieve location of state=" + queryableStateName + " of job=" + jobId +_								". Potential reasons are: i) the state is not ready, or ii) the job does not exist."))__		}_	};lookup,the,link,kv,state,location,for,the,given,job,and,queryable,state,name,p,the,job,manager,will,be,queried,for,the,location,only,if,forced,or,no,cached,location,can,be,found,there,are,no,guarantees,about,param,job,id,job,id,the,state,instance,belongs,to,param,queryable,state,name,name,under,which,the,state,instance,has,been,published,param,force,update,flag,to,indicate,whether,to,force,a,update,via,the,lookup,service,return,future,holding,the,kv,state,location;private,completable,future,kv,state,location,get,kv,state,lookup,info,final,job,id,job,id,final,string,queryable,state,name,final,boolean,force,update,final,tuple2,job,id,string,cache,key,new,tuple2,job,id,queryable,state,name,final,completable,future,kv,state,location,cached,future,lookup,cache,get,cache,key,if,force,update,cached,future,null,cached,future,is,completed,exceptionally,log,debug,retrieving,location,for,state,of,job,from,the,cache,queryable,state,name,job,id,return,cached,future,final,kv,state,location,oracle,kv,state,location,oracle,proxy,get,kv,state,location,oracle,job,id,if,kv,state,location,oracle,null,log,debug,retrieving,location,for,state,of,job,from,the,key,value,state,location,oracle,queryable,state,name,job,id,final,completable,future,kv,state,location,location,new,completable,future,lookup,cache,put,cache,key,location,kv,state,location,oracle,request,kv,state,location,job,id,queryable,state,name,when,complete,kv,state,location,kv,state,location,throwable,throwable,if,throwable,null,if,exception,utils,strip,completion,exception,throwable,instanceof,flink,job,not,found,exception,lookup,cache,remove,cache,key,location,complete,exceptionally,throwable,else,location,complete,kv,state,location,return,location,else,return,future,utils,completed,exceptionally,new,unknown,location,exception,could,not,retrieve,location,of,state,queryable,state,name,of,job,job,id,potential,reasons,are,i,the,state,is,not,ready,or,ii,the,job,does,not,exist
