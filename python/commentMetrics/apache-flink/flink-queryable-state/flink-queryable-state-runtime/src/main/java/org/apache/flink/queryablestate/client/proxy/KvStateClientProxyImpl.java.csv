commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public InetSocketAddress getServerAddress() {     return super.getServerAddress(). }
false;public;0;4;;@Override public void start() throws Throwable {     super.start(). }
false;public;0;9;;@Override public void shutdown() {     try {         shutdownServer().get(10L, TimeUnit.SECONDS).         log.info("{} was shutdown successfully.", getServerName()).     } catch (Exception e) {         log.warn("{} shutdown failed: {}", getServerName(), e).     } }
false;public;2;8;;@Override public void updateKvStateLocationOracle(JobID jobId, @Nullable KvStateLocationOracle kvStateLocationOracle) {     if (kvStateLocationOracle == null) {         kvStateLocationOracles.remove(jobId).     } else {         kvStateLocationOracles.put(jobId, kvStateLocationOracle).     } }
false;public;1;13;;@Nullable @Override public KvStateLocationOracle getKvStateLocationOracle(JobID jobId) {     final KvStateLocationOracle legacyKvStateLocationOracle = kvStateLocationOracles.get(HighAvailabilityServices.DEFAULT_JOB_ID).     // to make it work with the legacy code paths     if (legacyKvStateLocationOracle != null) {         return legacyKvStateLocationOracle.     } else {         return kvStateLocationOracles.get(jobId).     } }
false;public;0;8;;@Override public AbstractServerHandler<KvStateRequest, KvStateResponse> initializeHandler() {     MessageSerializer<KvStateRequest, KvStateResponse> serializer = new MessageSerializer<>(new KvStateRequest.KvStateRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer()).     return new KvStateClientProxyHandler(this, queryExecutorThreads, serializer, stats). }
