commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public KvStateID getKvStateId() {     return kvStateId. }
false;public;0;3;;public byte[] getSerializedKeyAndNamespace() {     return serializedKeyAndNamespace. }
false;public;0;13;;@Override public byte[] serialize() {     // KvStateId + sizeOf(serializedKeyAndNamespace) + serializedKeyAndNamespace     final int size = KvStateID.SIZE + Integer.BYTES + serializedKeyAndNamespace.length.     return ByteBuffer.allocate(size).putLong(kvStateId.getLowerPart()).putLong(kvStateId.getUpperPart()).putInt(serializedKeyAndNamespace.length).put(serializedKeyAndNamespace).array(). }
false;public;1;15;;@Override public KvStateInternalRequest deserializeMessage(ByteBuf buf) {     KvStateID kvStateId = new KvStateID(buf.readLong(), buf.readLong()).     int length = buf.readInt().     Preconditions.checkArgument(length >= 0, "Negative length for key and namespace. " + "This indicates a serialization error.").     byte[] serializedKeyAndNamespace = new byte[length].     if (length > 0) {         buf.readBytes(serializedKeyAndNamespace).     }     return new KvStateInternalRequest(kvStateId, serializedKeyAndNamespace). }
