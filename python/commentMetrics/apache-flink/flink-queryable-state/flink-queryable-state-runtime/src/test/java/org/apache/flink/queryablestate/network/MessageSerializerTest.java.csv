commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Parameterized.Parameters public static Collection<Boolean> parameters() {     return Arrays.asList(false, true). }
true;public;0;22;/**  * Tests request serialization.  */ ;/**  * Tests request serialization.  */ @Test public void testRequestSerialization() throws Exception {     long requestId = Integer.MAX_VALUE + 1337L.     KvStateID kvStateId = new KvStateID().     byte[] serializedKeyAndNamespace = randomByteArray(1024).     final KvStateInternalRequest request = new KvStateInternalRequest(kvStateId, serializedKeyAndNamespace).     final MessageSerializer<KvStateInternalRequest, KvStateResponse> serializer = new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer()).     ByteBuf buf = MessageSerializer.serializeRequest(alloc, requestId, request).     int frameLength = buf.readInt().     assertEquals(MessageType.REQUEST, MessageSerializer.deserializeHeader(buf)).     assertEquals(requestId, MessageSerializer.getRequestId(buf)).     KvStateInternalRequest requestDeser = serializer.deserializeRequest(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertEquals(kvStateId, requestDeser.getKvStateId()).     assertArrayEquals(serializedKeyAndNamespace, requestDeser.getSerializedKeyAndNamespace()). }
true;public;0;23;/**  * Tests request serialization with zero-length serialized key and namespace.  */ ;/**  * Tests request serialization with zero-length serialized key and namespace.  */ @Test public void testRequestSerializationWithZeroLengthKeyAndNamespace() throws Exception {     long requestId = Integer.MAX_VALUE + 1337L.     KvStateID kvStateId = new KvStateID().     byte[] serializedKeyAndNamespace = new byte[0].     final KvStateInternalRequest request = new KvStateInternalRequest(kvStateId, serializedKeyAndNamespace).     final MessageSerializer<KvStateInternalRequest, KvStateResponse> serializer = new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer()).     ByteBuf buf = MessageSerializer.serializeRequest(alloc, requestId, request).     int frameLength = buf.readInt().     assertEquals(MessageType.REQUEST, MessageSerializer.deserializeHeader(buf)).     assertEquals(requestId, MessageSerializer.getRequestId(buf)).     KvStateInternalRequest requestDeser = serializer.deserializeRequest(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertEquals(kvStateId, requestDeser.getKvStateId()).     assertArrayEquals(serializedKeyAndNamespace, requestDeser.getSerializedKeyAndNamespace()). }
true;public;0;4;/**  * Tests that we don't try to be smart about <code>null</code> key and namespace.  * They should be treated explicitly.  */ ;/**  * Tests that we don't try to be smart about <code>null</code> key and namespace.  * They should be treated explicitly.  */ @Test(expected = NullPointerException.class) public void testNullPointerExceptionOnNullSerializedKeyAndNamepsace() throws Exception {     new KvStateInternalRequest(new KvStateID(), null). }
true;public;0;20;/**  * Tests response serialization.  */ ;/**  * Tests response serialization.  */ @Test public void testResponseSerialization() throws Exception {     long requestId = Integer.MAX_VALUE + 72727278L.     byte[] serializedResult = randomByteArray(1024).     final KvStateResponse response = new KvStateResponse(serializedResult).     final MessageSerializer<KvStateInternalRequest, KvStateResponse> serializer = new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer()).     ByteBuf buf = MessageSerializer.serializeResponse(alloc, requestId, response).     int frameLength = buf.readInt().     assertEquals(MessageType.REQUEST_RESULT, MessageSerializer.deserializeHeader(buf)).     assertEquals(requestId, MessageSerializer.getRequestId(buf)).     KvStateResponse responseDeser = serializer.deserializeResponse(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertArrayEquals(serializedResult, responseDeser.getContent()). }
true;public;0;19;/**  * Tests response serialization with zero-length serialized result.  */ ;/**  * Tests response serialization with zero-length serialized result.  */ @Test public void testResponseSerializationWithZeroLengthSerializedResult() throws Exception {     byte[] serializedResult = new byte[0].     final KvStateResponse response = new KvStateResponse(serializedResult).     final MessageSerializer<KvStateInternalRequest, KvStateResponse> serializer = new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer()).     ByteBuf buf = MessageSerializer.serializeResponse(alloc, 72727278L, response).     int frameLength = buf.readInt().     assertEquals(MessageType.REQUEST_RESULT, MessageSerializer.deserializeHeader(buf)).     assertEquals(72727278L, MessageSerializer.getRequestId(buf)).     KvStateResponse responseDeser = serializer.deserializeResponse(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertArrayEquals(serializedResult, responseDeser.getContent()). }
true;public;0;4;/**  * Tests that we don't try to be smart about <code>null</code> results.  * They should be treated explicitly.  */ ;/**  * Tests that we don't try to be smart about <code>null</code> results.  * They should be treated explicitly.  */ @Test(expected = NullPointerException.class) public void testNullPointerExceptionOnNullSerializedResult() throws Exception {     new KvStateResponse((byte[]) null). }
true;public;0;16;/**  * Tests request failure serialization.  */ ;/**  * Tests request failure serialization.  */ @Test public void testKvStateRequestFailureSerialization() throws Exception {     long requestId = Integer.MAX_VALUE + 1111222L.     IllegalStateException cause = new IllegalStateException("Expected test").     ByteBuf buf = MessageSerializer.serializeRequestFailure(alloc, requestId, cause).     int frameLength = buf.readInt().     assertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf)).     RequestFailure requestFailure = MessageSerializer.deserializeRequestFailure(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertEquals(requestId, requestFailure.getRequestId()).     assertEquals(cause.getClass(), requestFailure.getCause().getClass()).     assertEquals(cause.getMessage(), requestFailure.getCause().getMessage()). }
true;public;0;14;/**  * Tests server failure serialization.  */ ;/**  * Tests server failure serialization.  */ @Test public void testServerFailureSerialization() throws Exception {     IllegalStateException cause = new IllegalStateException("Expected test").     ByteBuf buf = MessageSerializer.serializeServerFailure(alloc, cause).     int frameLength = buf.readInt().     assertEquals(MessageType.SERVER_FAILURE, MessageSerializer.deserializeHeader(buf)).     Throwable request = MessageSerializer.deserializeServerFailure(buf).     assertEquals(buf.readerIndex(), frameLength + 4).     assertEquals(cause.getClass(), request.getClass()).     assertEquals(cause.getMessage(), request.getMessage()). }
false;private;1;5;;private byte[] randomByteArray(int capacity) {     byte[] bytes = new byte[capacity].     ThreadLocalRandom.current().nextBytes(bytes).     return bytes. }
