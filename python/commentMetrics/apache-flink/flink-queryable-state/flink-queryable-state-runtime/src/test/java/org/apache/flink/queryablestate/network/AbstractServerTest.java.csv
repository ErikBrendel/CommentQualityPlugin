commented;modifiers;parameterAmount;loc;comment;code
true;public;0;19;/**  * Tests that in case of port collision, a FlinkRuntimeException is thrown  * with a specific message.  */ ;/**  * Tests that in case of port collision, a FlinkRuntimeException is thrown  * with a specific message.  */ @Test public void testServerInitializationFailure() throws Throwable {     // the expected exception along with the adequate message     expectedEx.expect(FlinkRuntimeException.class).     expectedEx.expectMessage("Unable to start Test Server 2. All ports in provided range are occupied.").     List<Integer> portList = new ArrayList<>().     portList.add(7777).     try (TestServer server1 = new TestServer("Test Server 1", new DisabledKvStateRequestStats(), portList.iterator())) {         server1.start().         try (TestServer server2 = new TestServer("Test Server 2", new DisabledKvStateRequestStats(), Collections.singletonList(server1.getServerAddress().getPort()).iterator())) {             server2.start().         }     } }
true;public;0;48;/**  * Tests that in case of port collision and big enough port range,  * the server will try to bind to the next port in the range.  */ ;/**  * Tests that in case of port collision and big enough port range,  * the server will try to bind to the next port in the range.  */ @Test public void testPortRangeSuccess() throws Throwable {     // this is shared between the two servers.     AtomicKvStateRequestStats serverStats = new AtomicKvStateRequestStats().     AtomicKvStateRequestStats clientStats = new AtomicKvStateRequestStats().     List<Integer> portList = new ArrayList<>().     portList.add(7777).     portList.add(7778).     portList.add(7779).     try (TestServer server1 = new TestServer("Test Server 1", serverStats, portList.iterator()).         TestServer server2 = new TestServer("Test Server 2", serverStats, portList.iterator()).         TestClient client = new TestClient("Test Client", 1, new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()), clientStats)) {         server1.start().         Assert.assertTrue(server1.getServerAddress().getPort() >= 7777 && server1.getServerAddress().getPort() <= 7779).         server2.start().         Assert.assertTrue(server2.getServerAddress().getPort() >= 7777 && server2.getServerAddress().getPort() <= 7779).         TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join().         Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage()).         TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join().         Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage()).         // the client connects to both servers and the stats object is shared.         Assert.assertEquals(2L, serverStats.getNumConnections()).         Assert.assertEquals(2L, clientStats.getNumConnections()).         Assert.assertEquals(0L, clientStats.getNumFailed()).         Assert.assertEquals(2L, clientStats.getNumSuccessful()).         Assert.assertEquals(2L, clientStats.getNumRequests()).     }     Assert.assertEquals(0L, clientStats.getNumConnections()).     Assert.assertEquals(0L, clientStats.getNumFailed()).     Assert.assertEquals(2L, clientStats.getNumSuccessful()).     Assert.assertEquals(2L, clientStats.getNumRequests()). }
false;public;0;5;;@Override public void close() throws Exception {     shutdown().join().     Assert.assertTrue(isEventGroupShutdown()). }
false;public;2;5;;@Override public CompletableFuture<TestMessage> handleRequest(long requestId, TestMessage request) {     TestMessage response = new TestMessage(getServerName() + '-' + request.getMessage()).     return CompletableFuture.completedFuture(response). }
false;public;0;4;;@Override public CompletableFuture<Void> shutdown() {     return CompletableFuture.completedFuture(null). }
false;public;0;19;;@Override public AbstractServerHandler<TestMessage, TestMessage> initializeHandler() {     return new AbstractServerHandler<TestMessage, TestMessage>(this, new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()), requestStats) {          @Override         public CompletableFuture<TestMessage> handleRequest(long requestId, TestMessage request) {             TestMessage response = new TestMessage(getServerName() + '-' + request.getMessage()).             return CompletableFuture.completedFuture(response).         }          @Override         public CompletableFuture<Void> shutdown() {             return CompletableFuture.completedFuture(null).         }     }. }
false;public;0;10;;@Override public void close() throws Exception {     shutdownServer().get().     if (requestStats instanceof AtomicKvStateRequestStats) {         AtomicKvStateRequestStats stats = (AtomicKvStateRequestStats) requestStats.         Assert.assertEquals(0L, stats.getNumConnections()).     }     Assert.assertTrue(getQueryExecutor().isTerminated()).     Assert.assertTrue(isEventGroupShutdown()). }
false;public;0;3;;public String getMessage() {     return message. }
false;public;0;10;;@Override public byte[] serialize() {     byte[] content = message.getBytes(ConfigConstants.DEFAULT_CHARSET).     // message size + 4 for the length itself     return ByteBuffer.allocate(content.length + Integer.BYTES).putInt(content.length).put(content).array(). }
false;public;1;11;;@Override public TestMessage deserializeMessage(ByteBuf buf) {     int length = buf.readInt().     String message = "".     if (length > 0) {         byte[] name = new byte[length].         buf.readBytes(name).         message = new String(name, ConfigConstants.DEFAULT_CHARSET).     }     return new TestMessage(message). }
