# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractServerTest -> @Test 	public void testServerInitializationFailure() throws Throwable;1509037054;Tests that in case of port collision, a FlinkRuntimeException is thrown_with a specific message.;@Test_	public void testServerInitializationFailure() throws Throwable {__		_		expectedEx.expect(FlinkRuntimeException.class)__		expectedEx.expectMessage("Unable to start server Test Server 2. All ports in provided range are occupied.")___		TestServer server1 = null__		TestServer server2 = null__		try {__			server1 = startServer("Test Server 1", 7777)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777)__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,a,flink,runtime,exception,is,thrown,with,a,specific,message;test,public,void,test,server,initialization,failure,throws,throwable,expected,ex,expect,flink,runtime,exception,class,expected,ex,expect,message,unable,to,start,server,test,server,2,all,ports,in,provided,range,are,occupied,test,server,server1,null,test,server,server2,null,try,server1,start,server,test,server,1,7777,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown
AbstractServerTest -> @Test 	public void testServerInitializationFailure() throws Throwable;1510060074;Tests that in case of port collision, a FlinkRuntimeException is thrown_with a specific message.;@Test_	public void testServerInitializationFailure() throws Throwable {__		_		expectedEx.expect(FlinkRuntimeException.class)__		expectedEx.expectMessage("Unable to start the Test Server 2. All ports in provided range are occupied.")___		TestServer server1 = null__		TestServer server2 = null__		try {__			server1 = startServer("Test Server 1", 7777)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777)__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,a,flink,runtime,exception,is,thrown,with,a,specific,message;test,public,void,test,server,initialization,failure,throws,throwable,expected,ex,expect,flink,runtime,exception,class,expected,ex,expect,message,unable,to,start,the,test,server,2,all,ports,in,provided,range,are,occupied,test,server,server1,null,test,server,server2,null,try,server1,start,server,test,server,1,7777,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown
AbstractServerTest -> @Test 	public void testServerInitializationFailure() throws Throwable;1510911969;Tests that in case of port collision, a FlinkRuntimeException is thrown_with a specific message.;@Test_	public void testServerInitializationFailure() throws Throwable {__		_		expectedEx.expect(FlinkRuntimeException.class)__		expectedEx.expectMessage("Unable to start Test Server 2. All ports in provided range are occupied.")___		TestServer server1 = null__		TestServer server2 = null__		try {__			server1 = startServer("Test Server 1", 7777)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777)__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,a,flink,runtime,exception,is,thrown,with,a,specific,message;test,public,void,test,server,initialization,failure,throws,throwable,expected,ex,expect,flink,runtime,exception,class,expected,ex,expect,message,unable,to,start,test,server,2,all,ports,in,provided,range,are,occupied,test,server,server1,null,test,server,server2,null,try,server1,start,server,test,server,1,7777,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown
AbstractServerTest -> @Test 	public void testServerInitializationFailure() throws Throwable;1512567202;Tests that in case of port collision, a FlinkRuntimeException is thrown_with a specific message.;@Test_	public void testServerInitializationFailure() throws Throwable {__		_		expectedEx.expect(FlinkRuntimeException.class)__		expectedEx.expectMessage("Unable to start Test Server 2. All ports in provided range are occupied.")___		List<Integer> portList = new ArrayList<>()__		portList.add(7777)___		try (TestServer server1 = new TestServer("Test Server 1", new DisabledKvStateRequestStats(), portList.iterator())) {_			server1.start()___			try (TestServer server2 = new TestServer("Test Server 2", new DisabledKvStateRequestStats(),_					Collections.singletonList(server1.getServerAddress().getPort()).iterator())) {_				server2.start()__			}_		}_	};tests,that,in,case,of,port,collision,a,flink,runtime,exception,is,thrown,with,a,specific,message;test,public,void,test,server,initialization,failure,throws,throwable,expected,ex,expect,flink,runtime,exception,class,expected,ex,expect,message,unable,to,start,test,server,2,all,ports,in,provided,range,are,occupied,list,integer,port,list,new,array,list,port,list,add,7777,try,test,server,server1,new,test,server,test,server,1,new,disabled,kv,state,request,stats,port,list,iterator,server1,start,try,test,server,server2,new,test,server,test,server,2,new,disabled,kv,state,request,stats,collections,singleton,list,server1,get,server,address,get,port,iterator,server2,start
AbstractServerTest -> @Test 	public void testServerInitializationFailure() throws Throwable;1519121818;Tests that in case of port collision, a FlinkRuntimeException is thrown_with a specific message.;@Test_	public void testServerInitializationFailure() throws Throwable {__		_		expectedEx.expect(FlinkRuntimeException.class)__		expectedEx.expectMessage("Unable to start Test Server 2. All ports in provided range are occupied.")___		List<Integer> portList = new ArrayList<>()__		portList.add(7777)___		try (TestServer server1 = new TestServer("Test Server 1", new DisabledKvStateRequestStats(), portList.iterator())) {_			server1.start()___			try (TestServer server2 = new TestServer("Test Server 2", new DisabledKvStateRequestStats(),_					Collections.singletonList(server1.getServerAddress().getPort()).iterator())) {_				server2.start()__			}_		}_	};tests,that,in,case,of,port,collision,a,flink,runtime,exception,is,thrown,with,a,specific,message;test,public,void,test,server,initialization,failure,throws,throwable,expected,ex,expect,flink,runtime,exception,class,expected,ex,expect,message,unable,to,start,test,server,2,all,ports,in,provided,range,are,occupied,list,integer,port,list,new,array,list,port,list,add,7777,try,test,server,server1,new,test,server,test,server,1,new,disabled,kv,state,request,stats,port,list,iterator,server1,start,try,test,server,server2,new,test,server,test,server,2,new,disabled,kv,state,request,stats,collections,singleton,list,server1,get,server,address,get,port,iterator,server2,start
AbstractServerTest -> private TestServer startServer(String serverName, int... ports) throws Throwable;1509037054;Initializes a {@link TestServer} with the given port range._@param serverName the name of the server._@param ports a range of ports._@return A test server with the given name.;private TestServer startServer(String serverName, int... ports) throws Throwable {_		List<Integer> portList = new ArrayList<>(ports.length)__		for (int p : ports) {_			portList.add(p)__		}__		final TestServer server = new TestServer(serverName, portList.iterator())__		server.start()__		return server__	};initializes,a,link,test,server,with,the,given,port,range,param,server,name,the,name,of,the,server,param,ports,a,range,of,ports,return,a,test,server,with,the,given,name;private,test,server,start,server,string,server,name,int,ports,throws,throwable,list,integer,port,list,new,array,list,ports,length,for,int,p,ports,port,list,add,p,final,test,server,server,new,test,server,server,name,port,list,iterator,server,start,return,server
AbstractServerTest -> private TestServer startServer(String serverName, int... ports) throws Throwable;1510060074;Initializes a {@link TestServer} with the given port range._@param serverName the name of the server._@param ports a range of ports._@return A test server with the given name.;private TestServer startServer(String serverName, int... ports) throws Throwable {_		List<Integer> portList = new ArrayList<>(ports.length)__		for (int p : ports) {_			portList.add(p)__		}__		final TestServer server = new TestServer(serverName, portList.iterator())__		server.start()__		return server__	};initializes,a,link,test,server,with,the,given,port,range,param,server,name,the,name,of,the,server,param,ports,a,range,of,ports,return,a,test,server,with,the,given,name;private,test,server,start,server,string,server,name,int,ports,throws,throwable,list,integer,port,list,new,array,list,ports,length,for,int,p,ports,port,list,add,p,final,test,server,server,new,test,server,server,name,port,list,iterator,server,start,return,server
AbstractServerTest -> private TestServer startServer(String serverName, int... ports) throws Throwable;1510911969;Initializes a {@link TestServer} with the given port range._@param serverName the name of the server._@param ports a range of ports._@return A test server with the given name.;private TestServer startServer(String serverName, int... ports) throws Throwable {_		List<Integer> portList = new ArrayList<>(ports.length)__		for (int p : ports) {_			portList.add(p)__		}__		final TestServer server = new TestServer(serverName, portList.iterator())__		server.start()__		return server__	};initializes,a,link,test,server,with,the,given,port,range,param,server,name,the,name,of,the,server,param,ports,a,range,of,ports,return,a,test,server,with,the,given,name;private,test,server,start,server,string,server,name,int,ports,throws,throwable,list,integer,port,list,new,array,list,ports,length,for,int,p,ports,port,list,add,p,final,test,server,server,new,test,server,server,name,port,list,iterator,server,start,return,server
AbstractServerTest -> @Test 	public void testPortRangeSuccess() throws Throwable;1509037054;Tests that in case of port collision and big enough port range,_the server will try to bind to the next port in the range.;@Test_	public void testPortRangeSuccess() throws Throwable {_		TestServer server1 = null__		TestServer server2 = null__		Client<TestMessage, TestMessage> client = null___		try {_			server1 = startServer("Test Server 1", 7777, 7778, 7779)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777, 7778, 7779)__			Assert.assertEquals(7778L, server2.getServerAddress().getPort())___			client = new Client<>(_					"Test Client",_					1,_					new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()),_					new DisabledKvStateRequestStats())___			TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join()__			Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage())___			TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join()__			Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage())__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}__			if (client != null) {_				client.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,and,big,enough,port,range,the,server,will,try,to,bind,to,the,next,port,in,the,range;test,public,void,test,port,range,success,throws,throwable,test,server,server1,null,test,server,server2,null,client,test,message,test,message,client,null,try,server1,start,server,test,server,1,7777,7778,7779,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,7778,7779,assert,assert,equals,7778l,server2,get,server,address,get,port,client,new,client,test,client,1,new,message,serializer,new,test,message,test,message,deserializer,new,test,message,test,message,deserializer,new,disabled,kv,state,request,stats,test,message,response1,client,send,request,server1,get,server,address,new,test,message,ping,join,assert,assert,equals,server1,get,server,name,ping,response1,get,message,test,message,response2,client,send,request,server2,get,server,address,new,test,message,pong,join,assert,assert,equals,server2,get,server,name,pong,response2,get,message,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown,if,client,null,client,shutdown
AbstractServerTest -> @Test 	public void testPortRangeSuccess() throws Throwable;1510060074;Tests that in case of port collision and big enough port range,_the server will try to bind to the next port in the range.;@Test_	public void testPortRangeSuccess() throws Throwable {_		TestServer server1 = null__		TestServer server2 = null__		Client<TestMessage, TestMessage> client = null___		try {_			server1 = startServer("Test Server 1", 7777, 7778, 7779)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777, 7778, 7779)__			Assert.assertEquals(7778L, server2.getServerAddress().getPort())___			client = new Client<>(_					"Test Client",_					1,_					new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()),_					new DisabledKvStateRequestStats())___			TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join()__			Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage())___			TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join()__			Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage())__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}__			if (client != null) {_				client.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,and,big,enough,port,range,the,server,will,try,to,bind,to,the,next,port,in,the,range;test,public,void,test,port,range,success,throws,throwable,test,server,server1,null,test,server,server2,null,client,test,message,test,message,client,null,try,server1,start,server,test,server,1,7777,7778,7779,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,7778,7779,assert,assert,equals,7778l,server2,get,server,address,get,port,client,new,client,test,client,1,new,message,serializer,new,test,message,test,message,deserializer,new,test,message,test,message,deserializer,new,disabled,kv,state,request,stats,test,message,response1,client,send,request,server1,get,server,address,new,test,message,ping,join,assert,assert,equals,server1,get,server,name,ping,response1,get,message,test,message,response2,client,send,request,server2,get,server,address,new,test,message,pong,join,assert,assert,equals,server2,get,server,name,pong,response2,get,message,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown,if,client,null,client,shutdown
AbstractServerTest -> @Test 	public void testPortRangeSuccess() throws Throwable;1510911969;Tests that in case of port collision and big enough port range,_the server will try to bind to the next port in the range.;@Test_	public void testPortRangeSuccess() throws Throwable {_		TestServer server1 = null__		TestServer server2 = null__		Client<TestMessage, TestMessage> client = null___		try {_			server1 = startServer("Test Server 1", 7777, 7778, 7779)__			Assert.assertEquals(7777L, server1.getServerAddress().getPort())___			server2 = startServer("Test Server 2", 7777, 7778, 7779)__			Assert.assertEquals(7778L, server2.getServerAddress().getPort())___			client = new Client<>(_					"Test Client",_					1,_					new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()),_					new DisabledKvStateRequestStats())___			TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join()__			Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage())___			TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join()__			Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage())__		} finally {__			if (server1 != null) {_				server1.shutdown()__			}__			if (server2 != null) {_				server2.shutdown()__			}__			if (client != null) {_				client.shutdown()__			}_		}_	};tests,that,in,case,of,port,collision,and,big,enough,port,range,the,server,will,try,to,bind,to,the,next,port,in,the,range;test,public,void,test,port,range,success,throws,throwable,test,server,server1,null,test,server,server2,null,client,test,message,test,message,client,null,try,server1,start,server,test,server,1,7777,7778,7779,assert,assert,equals,7777l,server1,get,server,address,get,port,server2,start,server,test,server,2,7777,7778,7779,assert,assert,equals,7778l,server2,get,server,address,get,port,client,new,client,test,client,1,new,message,serializer,new,test,message,test,message,deserializer,new,test,message,test,message,deserializer,new,disabled,kv,state,request,stats,test,message,response1,client,send,request,server1,get,server,address,new,test,message,ping,join,assert,assert,equals,server1,get,server,name,ping,response1,get,message,test,message,response2,client,send,request,server2,get,server,address,new,test,message,pong,join,assert,assert,equals,server2,get,server,name,pong,response2,get,message,finally,if,server1,null,server1,shutdown,if,server2,null,server2,shutdown,if,client,null,client,shutdown
AbstractServerTest -> @Test 	public void testPortRangeSuccess() throws Throwable;1512567202;Tests that in case of port collision and big enough port range,_the server will try to bind to the next port in the range.;@Test_	public void testPortRangeSuccess() throws Throwable {__		_		AtomicKvStateRequestStats serverStats = new AtomicKvStateRequestStats()__		AtomicKvStateRequestStats clientStats = new AtomicKvStateRequestStats()___		List<Integer> portList = new ArrayList<>()__		portList.add(7777)__		portList.add(7778)__		portList.add(7779)___		try (_				TestServer server1 = new TestServer("Test Server 1", serverStats, portList.iterator())__				TestServer server2 = new TestServer("Test Server 2", serverStats, portList.iterator())__				TestClient client = new TestClient(_						"Test Client",_						1,_						new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()),_						clientStats_				)_		) {_			server1.start()__			Assert.assertTrue(server1.getServerAddress().getPort() >= 7777 && server1.getServerAddress().getPort() <= 7779)___			server2.start()__			Assert.assertTrue(server2.getServerAddress().getPort() >= 7777 && server2.getServerAddress().getPort() <= 7779)___			TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join()__			Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage())___			TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join()__			Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage())___			_			Assert.assertEquals(2L, serverStats.getNumConnections())___			Assert.assertEquals(2L, clientStats.getNumConnections())__			Assert.assertEquals(0L, clientStats.getNumFailed())__			Assert.assertEquals(2L, clientStats.getNumSuccessful())__			Assert.assertEquals(2L, clientStats.getNumRequests())__		}__		Assert.assertEquals(0L, clientStats.getNumConnections())__		Assert.assertEquals(0L, clientStats.getNumFailed())__		Assert.assertEquals(2L, clientStats.getNumSuccessful())__		Assert.assertEquals(2L, clientStats.getNumRequests())__	};tests,that,in,case,of,port,collision,and,big,enough,port,range,the,server,will,try,to,bind,to,the,next,port,in,the,range;test,public,void,test,port,range,success,throws,throwable,atomic,kv,state,request,stats,server,stats,new,atomic,kv,state,request,stats,atomic,kv,state,request,stats,client,stats,new,atomic,kv,state,request,stats,list,integer,port,list,new,array,list,port,list,add,7777,port,list,add,7778,port,list,add,7779,try,test,server,server1,new,test,server,test,server,1,server,stats,port,list,iterator,test,server,server2,new,test,server,test,server,2,server,stats,port,list,iterator,test,client,client,new,test,client,test,client,1,new,message,serializer,new,test,message,test,message,deserializer,new,test,message,test,message,deserializer,client,stats,server1,start,assert,assert,true,server1,get,server,address,get,port,7777,server1,get,server,address,get,port,7779,server2,start,assert,assert,true,server2,get,server,address,get,port,7777,server2,get,server,address,get,port,7779,test,message,response1,client,send,request,server1,get,server,address,new,test,message,ping,join,assert,assert,equals,server1,get,server,name,ping,response1,get,message,test,message,response2,client,send,request,server2,get,server,address,new,test,message,pong,join,assert,assert,equals,server2,get,server,name,pong,response2,get,message,assert,assert,equals,2l,server,stats,get,num,connections,assert,assert,equals,2l,client,stats,get,num,connections,assert,assert,equals,0l,client,stats,get,num,failed,assert,assert,equals,2l,client,stats,get,num,successful,assert,assert,equals,2l,client,stats,get,num,requests,assert,assert,equals,0l,client,stats,get,num,connections,assert,assert,equals,0l,client,stats,get,num,failed,assert,assert,equals,2l,client,stats,get,num,successful,assert,assert,equals,2l,client,stats,get,num,requests
AbstractServerTest -> @Test 	public void testPortRangeSuccess() throws Throwable;1519121818;Tests that in case of port collision and big enough port range,_the server will try to bind to the next port in the range.;@Test_	public void testPortRangeSuccess() throws Throwable {__		_		AtomicKvStateRequestStats serverStats = new AtomicKvStateRequestStats()__		AtomicKvStateRequestStats clientStats = new AtomicKvStateRequestStats()___		List<Integer> portList = new ArrayList<>()__		portList.add(7777)__		portList.add(7778)__		portList.add(7779)___		try (_				TestServer server1 = new TestServer("Test Server 1", serverStats, portList.iterator())__				TestServer server2 = new TestServer("Test Server 2", serverStats, portList.iterator())__				TestClient client = new TestClient(_						"Test Client",_						1,_						new MessageSerializer<>(new TestMessage.TestMessageDeserializer(), new TestMessage.TestMessageDeserializer()),_						clientStats_				)_		) {_			server1.start()__			Assert.assertTrue(server1.getServerAddress().getPort() >= 7777 && server1.getServerAddress().getPort() <= 7779)___			server2.start()__			Assert.assertTrue(server2.getServerAddress().getPort() >= 7777 && server2.getServerAddress().getPort() <= 7779)___			TestMessage response1 = client.sendRequest(server1.getServerAddress(), new TestMessage("ping")).join()__			Assert.assertEquals(server1.getServerName() + "-ping", response1.getMessage())___			TestMessage response2 = client.sendRequest(server2.getServerAddress(), new TestMessage("pong")).join()__			Assert.assertEquals(server2.getServerName() + "-pong", response2.getMessage())___			_			Assert.assertEquals(2L, serverStats.getNumConnections())___			Assert.assertEquals(2L, clientStats.getNumConnections())__			Assert.assertEquals(0L, clientStats.getNumFailed())__			Assert.assertEquals(2L, clientStats.getNumSuccessful())__			Assert.assertEquals(2L, clientStats.getNumRequests())__		}__		Assert.assertEquals(0L, clientStats.getNumConnections())__		Assert.assertEquals(0L, clientStats.getNumFailed())__		Assert.assertEquals(2L, clientStats.getNumSuccessful())__		Assert.assertEquals(2L, clientStats.getNumRequests())__	};tests,that,in,case,of,port,collision,and,big,enough,port,range,the,server,will,try,to,bind,to,the,next,port,in,the,range;test,public,void,test,port,range,success,throws,throwable,atomic,kv,state,request,stats,server,stats,new,atomic,kv,state,request,stats,atomic,kv,state,request,stats,client,stats,new,atomic,kv,state,request,stats,list,integer,port,list,new,array,list,port,list,add,7777,port,list,add,7778,port,list,add,7779,try,test,server,server1,new,test,server,test,server,1,server,stats,port,list,iterator,test,server,server2,new,test,server,test,server,2,server,stats,port,list,iterator,test,client,client,new,test,client,test,client,1,new,message,serializer,new,test,message,test,message,deserializer,new,test,message,test,message,deserializer,client,stats,server1,start,assert,assert,true,server1,get,server,address,get,port,7777,server1,get,server,address,get,port,7779,server2,start,assert,assert,true,server2,get,server,address,get,port,7777,server2,get,server,address,get,port,7779,test,message,response1,client,send,request,server1,get,server,address,new,test,message,ping,join,assert,assert,equals,server1,get,server,name,ping,response1,get,message,test,message,response2,client,send,request,server2,get,server,address,new,test,message,pong,join,assert,assert,equals,server2,get,server,name,pong,response2,get,message,assert,assert,equals,2l,server,stats,get,num,connections,assert,assert,equals,2l,client,stats,get,num,connections,assert,assert,equals,0l,client,stats,get,num,failed,assert,assert,equals,2l,client,stats,get,num,successful,assert,assert,equals,2l,client,stats,get,num,requests,assert,assert,equals,0l,client,stats,get,num,connections,assert,assert,equals,0l,client,stats,get,num,failed,assert,assert,equals,2l,client,stats,get,num,successful,assert,assert,equals,2l,client,stats,get,num,requests
