commented;modifiers;parameterAmount;loc;comment;code
true;public;0;35;/**  * Tests list serialization and deserialization match.  *  * @see KvStateRequestSerializerTest#testListSerialization()  * KvStateRequestSerializerTest#testListSerialization() using the heap state back-end  * test  */ ;/**  * Tests list serialization and deserialization match.  *  * @see KvStateRequestSerializerTest#testListSerialization()  * KvStateRequestSerializerTest#testListSerialization() using the heap state back-end  * test  */ @Test public void testListSerialization() throws Exception {     final long key = 0L.     // objects for RocksDB state list serialisation     DBOptions dbOptions = PredefinedOptions.DEFAULT.createDBOptions().     dbOptions.setCreateIfMissing(true).     ExecutionConfig executionConfig = new ExecutionConfig().     final RocksDBKeyedStateBackend<Long> longHeapKeyedStateBackend = new RocksDBKeyedStateBackendBuilder<>("no-op", ClassLoader.getSystemClassLoader(), temporaryFolder.getRoot(), dbOptions, stateName -> PredefinedOptions.DEFAULT.createColumnOptions(), mock(TaskKvStateRegistry.class), LongSerializer.INSTANCE, 1, new KeyGroupRange(0, 0), executionConfig, TestLocalRecoveryConfig.disabled(), RocksDBStateBackend.PriorityQueueStateType.HEAP, TtlTimeProvider.DEFAULT, new UnregisteredMetricsGroup(), Collections.emptyList(), RocksDBStateBackend.getCompressionDecorator(executionConfig)).build().     longHeapKeyedStateBackend.setCurrentKey(key).     final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createInternalState(VoidNamespaceSerializer.INSTANCE, new ListStateDescriptor<>("test", LongSerializer.INSTANCE)).     KvStateRequestSerializerTest.testListSerialization(key, listState).     longHeapKeyedStateBackend.dispose(). }
true;public;0;39;/**  * Tests map serialization and deserialization match.  *  * @see KvStateRequestSerializerTest#testMapSerialization()  * KvStateRequestSerializerTest#testMapSerialization() using the heap state back-end  * test  */ ;/**  * Tests map serialization and deserialization match.  *  * @see KvStateRequestSerializerTest#testMapSerialization()  * KvStateRequestSerializerTest#testMapSerialization() using the heap state back-end  * test  */ @Test public void testMapSerialization() throws Exception {     final long key = 0L.     // objects for RocksDB state list serialisation     DBOptions dbOptions = PredefinedOptions.DEFAULT.createDBOptions().     dbOptions.setCreateIfMissing(true).     ExecutionConfig executionConfig = new ExecutionConfig().     final RocksDBKeyedStateBackend<Long> longHeapKeyedStateBackend = new RocksDBKeyedStateBackendBuilder<>("no-op", ClassLoader.getSystemClassLoader(), temporaryFolder.getRoot(), dbOptions, stateName -> PredefinedOptions.DEFAULT.createColumnOptions(), mock(TaskKvStateRegistry.class), LongSerializer.INSTANCE, 1, new KeyGroupRange(0, 0), executionConfig, TestLocalRecoveryConfig.disabled(), RocksDBStateBackend.PriorityQueueStateType.HEAP, TtlTimeProvider.DEFAULT, new UnregisteredMetricsGroup(), Collections.emptyList(), RocksDBStateBackend.getCompressionDecorator(executionConfig)).build().     longHeapKeyedStateBackend.setCurrentKey(key).     final InternalMapState<Long, VoidNamespace, Long, String> mapState = (InternalMapState<Long, VoidNamespace, Long, String>) longHeapKeyedStateBackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE)).     KvStateRequestSerializerTest.testMapSerialization(key, mapState).     longHeapKeyedStateBackend.dispose(). }
