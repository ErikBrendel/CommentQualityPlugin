commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected StateBackend createStateBackend() throws Exception {     return new RocksDBStateBackend(temporaryFolder.newFolder().toURI().toString()). }
false;public,static;0;6;;@BeforeClass public static void setup() throws Exception {     client = new QueryableStateClient("localhost", QS_PROXY_PORT_RANGE_START).     clusterClient = MINI_CLUSTER_RESOURCE.getClusterClient(). }
false;public,static;0;4;;@AfterClass public static void tearDown() {     client.shutdownAndWait(). }
false;private,static;0;18;;private static Configuration getConfig() {     Configuration config = new Configuration().     config.setBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER, true).     config.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "4m").     config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, NUM_TMS).     config.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, NUM_SLOTS_PER_TM).     config.setInteger(QueryableStateOptions.CLIENT_NETWORK_THREADS, 1).     config.setInteger(QueryableStateOptions.PROXY_NETWORK_THREADS, 1).     config.setInteger(QueryableStateOptions.SERVER_NETWORK_THREADS, 1).     config.setString(QueryableStateOptions.PROXY_PORT_RANGE, QS_PROXY_PORT_RANGE_START + "-" + (QS_PROXY_PORT_RANGE_START + NUM_TMS)).     config.setString(QueryableStateOptions.SERVER_PORT_RANGE, QS_SERVER_PORT_RANGE_START + "-" + (QS_SERVER_PORT_RANGE_START + NUM_TMS)).     config.setBoolean(WebOptions.SUBMIT_ENABLE, false).     return config. }
