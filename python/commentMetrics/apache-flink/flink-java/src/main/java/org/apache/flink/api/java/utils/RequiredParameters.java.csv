# id;timestamp;commentText;codeText;commentWords;codeWords
RequiredParameters -> private String helpText(Option option);1448287361;for the given option create a line for the help text which looks like:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices:;private String helpText(Option option) {_		StringBuilder sb = new StringBuilder(HELP_TEXT_LENGTH_PER_PARAM)__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.hasAlt()) {_			sb.append("-")__			sb.append(option.getAlt())__			sb.append(", ")__		}__		_		sb.append("--")__		sb.append(option.getName())__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.getHelpText() != null) {_			sb.append(option.getHelpText())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (option.hasDefaultValue()) {_			sb.append("default: ")__			sb.append(option.getDefaultValue())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (!option.getChoices().isEmpty()) {_			sb.append("choices: ")__			for (String choice : option.getChoices()) {_				sb.append(choice)__				sb.append(" ")__			}_		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};for,the,given,option,create,a,line,for,the,help,text,which,looks,like,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices;private,string,help,text,option,option,string,builder,sb,new,string,builder,sb,append,if,option,has,alt,sb,append,sb,append,option,get,alt,sb,append,sb,append,sb,append,option,get,name,sb,append,if,option,get,help,text,null,sb,append,option,get,help,text,sb,append,if,option,has,default,value,sb,append,default,sb,append,option,get,default,value,sb,append,if,option,get,choices,is,empty,sb,append,choices,for,string,choice,option,get,choices,sb,append,choice,sb,append,sb,append,return,sb,to,string
RequiredParameters -> private String helpText(Option option);1455477986;for the given option create a line for the help text which looks like:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices:;private String helpText(Option option) {_		StringBuilder sb = new StringBuilder(HELP_TEXT_LENGTH_PER_PARAM)__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.hasAlt()) {_			sb.append("-")__			sb.append(option.getAlt())__			sb.append(", ")__		}__		_		sb.append("--")__		sb.append(option.getName())__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.getHelpText() != null) {_			sb.append(option.getHelpText())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (option.hasDefaultValue()) {_			sb.append("default: ")__			sb.append(option.getDefaultValue())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (!option.getChoices().isEmpty()) {_			sb.append("choices: ")__			for (String choice : option.getChoices()) {_				sb.append(choice)__				sb.append(" ")__			}_		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};for,the,given,option,create,a,line,for,the,help,text,which,looks,like,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices;private,string,help,text,option,option,string,builder,sb,new,string,builder,sb,append,if,option,has,alt,sb,append,sb,append,option,get,alt,sb,append,sb,append,sb,append,option,get,name,sb,append,if,option,get,help,text,null,sb,append,option,get,help,text,sb,append,if,option,has,default,value,sb,append,default,sb,append,option,get,default,value,sb,append,if,option,get,choices,is,empty,sb,append,choices,for,string,choice,option,get,choices,sb,append,choice,sb,append,sb,append,return,sb,to,string
RequiredParameters -> private String helpText(Option option);1500387265;for the given option create a line for the help text. The line looks like:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices:;private String helpText(Option option) {_		StringBuilder sb = new StringBuilder(HELP_TEXT_LENGTH_PER_PARAM)__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.hasAlt()) {_			sb.append("-")__			sb.append(option.getAlt())__			sb.append(", ")__		}__		_		sb.append("--")__		sb.append(option.getName())__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.getHelpText() != null) {_			sb.append(option.getHelpText())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (option.hasDefaultValue()) {_			sb.append("default: ")__			sb.append(option.getDefaultValue())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (!option.getChoices().isEmpty()) {_			sb.append("choices: ")__			for (String choice : option.getChoices()) {_				sb.append(choice)__				sb.append(" ")__			}_		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};for,the,given,option,create,a,line,for,the,help,text,the,line,looks,like,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices;private,string,help,text,option,option,string,builder,sb,new,string,builder,sb,append,if,option,has,alt,sb,append,sb,append,option,get,alt,sb,append,sb,append,sb,append,option,get,name,sb,append,if,option,get,help,text,null,sb,append,option,get,help,text,sb,append,if,option,has,default,value,sb,append,default,sb,append,option,get,default,value,sb,append,if,option,get,choices,is,empty,sb,append,choices,for,string,choice,option,get,choices,sb,append,choice,sb,append,sb,append,return,sb,to,string
RequiredParameters -> private String helpText(Option option);1511189418;for the given option create a line for the help text. The line looks like:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices:;private String helpText(Option option) {_		StringBuilder sb = new StringBuilder(HELP_TEXT_LENGTH_PER_PARAM)__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.hasAlt()) {_			sb.append("-")__			sb.append(option.getAlt())__			sb.append(", ")__		}__		_		sb.append("--")__		sb.append(option.getName())__		sb.append(HELP_TEXT_PARAM_DELIMITER)___		_		if (option.getHelpText() != null) {_			sb.append(option.getHelpText())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (option.hasDefaultValue()) {_			sb.append("default: ")__			sb.append(option.getDefaultValue())__			sb.append(HELP_TEXT_PARAM_DELIMITER)__		}__		_		if (!option.getChoices().isEmpty()) {_			sb.append("choices: ")__			for (String choice : option.getChoices()) {_				sb.append(choice)__				sb.append(" ")__			}_		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};for,the,given,option,create,a,line,for,the,help,text,the,line,looks,like,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices;private,string,help,text,option,option,string,builder,sb,new,string,builder,sb,append,if,option,has,alt,sb,append,sb,append,option,get,alt,sb,append,sb,append,sb,append,option,get,name,sb,append,if,option,get,help,text,null,sb,append,option,get,help,text,sb,append,if,option,has,default,value,sb,append,default,sb,append,option,get,default,value,sb,append,if,option,get,choices,is,empty,sb,append,choices,for,string,choice,option,get,choices,sb,append,choice,sb,append,sb,append,return,sb,to,string
RequiredParameters -> public String getHelp();1448287361;Build a help text for the defined parameters.__The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__@return a formatted help String.;public String getHelp() {_		StringBuilder sb = new StringBuilder(data.size() * HELP_TEXT_LENGTH_PER_PARAM)___		sb.append("Required Parameters:")__		sb.append(HELP_TEXT_LINE_DELIMITER)___		for (Option o : data.values()) {_			sb.append(this.helpText(o))__		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};build,a,help,text,for,the,defined,parameters,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,return,a,formatted,help,string;public,string,get,help,string,builder,sb,new,string,builder,data,size,sb,append,required,parameters,sb,append,for,option,o,data,values,sb,append,this,help,text,o,sb,append,return,sb,to,string
RequiredParameters -> public String getHelp();1455477986;Build a help text for the defined parameters.__The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__@return a formatted help String.;public String getHelp() {_		StringBuilder sb = new StringBuilder(data.size() * HELP_TEXT_LENGTH_PER_PARAM)___		sb.append("Required Parameters:")__		sb.append(HELP_TEXT_LINE_DELIMITER)___		for (Option o : data.values()) {_			sb.append(this.helpText(o))__		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};build,a,help,text,for,the,defined,parameters,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,return,a,formatted,help,string;public,string,get,help,string,builder,sb,new,string,builder,data,size,sb,append,required,parameters,sb,append,for,option,o,data,values,sb,append,this,help,text,o,sb,append,return,sb,to,string
RequiredParameters -> public String getHelp();1500387265;Build a help text for the defined parameters.__<p>The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__@return a formatted help String.;public String getHelp() {_		StringBuilder sb = new StringBuilder(data.size() * HELP_TEXT_LENGTH_PER_PARAM)___		sb.append("Required Parameters:")__		sb.append(HELP_TEXT_LINE_DELIMITER)___		for (Option o : data.values()) {_			sb.append(this.helpText(o))__		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};build,a,help,text,for,the,defined,parameters,p,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,return,a,formatted,help,string;public,string,get,help,string,builder,sb,new,string,builder,data,size,sb,append,required,parameters,sb,append,for,option,o,data,values,sb,append,this,help,text,o,sb,append,return,sb,to,string
RequiredParameters -> public String getHelp();1511189418;Build a help text for the defined parameters.__<p>The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__@return a formatted help String.;public String getHelp() {_		StringBuilder sb = new StringBuilder(data.size() * HELP_TEXT_LENGTH_PER_PARAM)___		sb.append("Required Parameters:")__		sb.append(HELP_TEXT_LINE_DELIMITER)___		for (Option o : data.values()) {_			sb.append(this.helpText(o))__		}_		sb.append(HELP_TEXT_LINE_DELIMITER)___		return sb.toString()__	};build,a,help,text,for,the,defined,parameters,p,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,return,a,formatted,help,string;public,string,get,help,string,builder,sb,new,string,builder,data,size,sb,append,required,parameters,sb,append,for,option,o,data,values,sb,append,this,help,text,o,sb,append,return,sb,to,string
RequiredParameters -> public void add(Option option) throws RequiredParametersException;1448287361;Add a parameter encapsulated in an {@link Option} object.__@param option - the parameter_@throws RequiredParametersException if an option with the same name is already defined;public void add(Option option) throws RequiredParametersException {_		if (!this.data.containsKey(option.getName())) {_			this.data.put(option.getName(), option)__		} else {_			throw new RequiredParametersException("Option with key " + option.getName() + " already exists.")__		}_	};add,a,parameter,encapsulated,in,an,link,option,object,param,option,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,void,add,option,option,throws,required,parameters,exception,if,this,data,contains,key,option,get,name,this,data,put,option,get,name,option,else,throw,new,required,parameters,exception,option,with,key,option,get,name,already,exists
RequiredParameters -> public void add(Option option) throws RequiredParametersException;1455477986;Add a parameter encapsulated in an {@link Option} object.__@param option - the parameter_@throws RequiredParametersException if an option with the same name is already defined;public void add(Option option) throws RequiredParametersException {_		if (!this.data.containsKey(option.getName())) {_			this.data.put(option.getName(), option)__		} else {_			throw new RequiredParametersException("Option with key " + option.getName() + " already exists.")__		}_	};add,a,parameter,encapsulated,in,an,link,option,object,param,option,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,void,add,option,option,throws,required,parameters,exception,if,this,data,contains,key,option,get,name,this,data,put,option,get,name,option,else,throw,new,required,parameters,exception,option,with,key,option,get,name,already,exists
RequiredParameters -> public void add(Option option) throws RequiredParametersException;1500387265;Add a parameter encapsulated in an {@link Option} object.__@param option - the parameter_@throws RequiredParametersException if an option with the same name is already defined;public void add(Option option) throws RequiredParametersException {_		if (!this.data.containsKey(option.getName())) {_			this.data.put(option.getName(), option)__		} else {_			throw new RequiredParametersException("Option with key " + option.getName() + " already exists.")__		}_	};add,a,parameter,encapsulated,in,an,link,option,object,param,option,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,void,add,option,option,throws,required,parameters,exception,if,this,data,contains,key,option,get,name,this,data,put,option,get,name,option,else,throw,new,required,parameters,exception,option,with,key,option,get,name,already,exists
RequiredParameters -> public void add(Option option) throws RequiredParametersException;1511189418;Add a parameter encapsulated in an {@link Option} object.__@param option - the parameter_@throws RequiredParametersException if an option with the same name is already defined;public void add(Option option) throws RequiredParametersException {_		if (!this.data.containsKey(option.getName())) {_			this.data.put(option.getName(), option)__		} else {_			throw new RequiredParametersException("Option with key " + option.getName() + " already exists.")__		}_	};add,a,parameter,encapsulated,in,an,link,option,object,param,option,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,void,add,option,option,throws,required,parameters,exception,if,this,data,contains,key,option,get,name,this,data,put,option,get,name,option,else,throw,new,required,parameters,exception,option,with,key,option,get,name,already,exists
RequiredParameters -> public void applyTo(ParameterTool parameterTool) throws RequiredParametersException;1448287361;Check for all required parameters defined:_- has a value been passed_- if not, does the parameter have an associated default value_- does the type of the parameter match the one defined in RequiredParameters_- does the value provided in the parameterTool adhere to the choices defined in the option__If any check fails, a RequiredParametersException is thrown__@param parameterTool - parameters supplied by the user._@throws RequiredParametersException if any of the specified checks fail;public void applyTo(ParameterTool parameterTool) throws RequiredParametersException {_		List<String> missingArguments = new LinkedList<>()__		for (Option o : data.values()) {_			if (parameterTool.data.containsKey(o.getName())) {_				if (Objects.equals(parameterTool.data.get(o.getName()), ParameterTool.NO_VALUE_KEY)) {_					_					checkAndApplyDefaultValue(o, parameterTool.data)__				} else {_					_					checkAmbiguousValues(o, parameterTool.data)__					checkIsCastableToDefinedType(o, parameterTool.data)__					checkChoices(o, parameterTool.data)__				}_			} else {_				_				if (hasNoDefaultValueAndNoValuePassedOnAlternativeName(o, parameterTool.data)) {_					missingArguments.add(o.getName())__				}_			}_		}_		if (!missingArguments.isEmpty()) {_			throw new RequiredParametersException(this.missingArgumentsText(missingArguments), missingArguments)__		}_	};check,for,all,required,parameters,defined,has,a,value,been,passed,if,not,does,the,parameter,have,an,associated,default,value,does,the,type,of,the,parameter,match,the,one,defined,in,required,parameters,does,the,value,provided,in,the,parameter,tool,adhere,to,the,choices,defined,in,the,option,if,any,check,fails,a,required,parameters,exception,is,thrown,param,parameter,tool,parameters,supplied,by,the,user,throws,required,parameters,exception,if,any,of,the,specified,checks,fail;public,void,apply,to,parameter,tool,parameter,tool,throws,required,parameters,exception,list,string,missing,arguments,new,linked,list,for,option,o,data,values,if,parameter,tool,data,contains,key,o,get,name,if,objects,equals,parameter,tool,data,get,o,get,name,parameter,tool,check,and,apply,default,value,o,parameter,tool,data,else,check,ambiguous,values,o,parameter,tool,data,check,is,castable,to,defined,type,o,parameter,tool,data,check,choices,o,parameter,tool,data,else,if,has,no,default,value,and,no,value,passed,on,alternative,name,o,parameter,tool,data,missing,arguments,add,o,get,name,if,missing,arguments,is,empty,throw,new,required,parameters,exception,this,missing,arguments,text,missing,arguments,missing,arguments
RequiredParameters -> public void applyTo(ParameterTool parameterTool) throws RequiredParametersException;1455477986;Check for all required parameters defined:_- has a value been passed_- if not, does the parameter have an associated default value_- does the type of the parameter match the one defined in RequiredParameters_- does the value provided in the parameterTool adhere to the choices defined in the option__If any check fails, a RequiredParametersException is thrown__@param parameterTool - parameters supplied by the user._@throws RequiredParametersException if any of the specified checks fail;public void applyTo(ParameterTool parameterTool) throws RequiredParametersException {_		List<String> missingArguments = new LinkedList<>()__		for (Option o : data.values()) {_			if (parameterTool.data.containsKey(o.getName())) {_				if (Objects.equals(parameterTool.data.get(o.getName()), ParameterTool.NO_VALUE_KEY)) {_					_					checkAndApplyDefaultValue(o, parameterTool.data)__				} else {_					_					checkAmbiguousValues(o, parameterTool.data)__					checkIsCastableToDefinedType(o, parameterTool.data)__					checkChoices(o, parameterTool.data)__				}_			} else {_				_				if (hasNoDefaultValueAndNoValuePassedOnAlternativeName(o, parameterTool.data)) {_					missingArguments.add(o.getName())__				}_			}_		}_		if (!missingArguments.isEmpty()) {_			throw new RequiredParametersException(this.missingArgumentsText(missingArguments), missingArguments)__		}_	};check,for,all,required,parameters,defined,has,a,value,been,passed,if,not,does,the,parameter,have,an,associated,default,value,does,the,type,of,the,parameter,match,the,one,defined,in,required,parameters,does,the,value,provided,in,the,parameter,tool,adhere,to,the,choices,defined,in,the,option,if,any,check,fails,a,required,parameters,exception,is,thrown,param,parameter,tool,parameters,supplied,by,the,user,throws,required,parameters,exception,if,any,of,the,specified,checks,fail;public,void,apply,to,parameter,tool,parameter,tool,throws,required,parameters,exception,list,string,missing,arguments,new,linked,list,for,option,o,data,values,if,parameter,tool,data,contains,key,o,get,name,if,objects,equals,parameter,tool,data,get,o,get,name,parameter,tool,check,and,apply,default,value,o,parameter,tool,data,else,check,ambiguous,values,o,parameter,tool,data,check,is,castable,to,defined,type,o,parameter,tool,data,check,choices,o,parameter,tool,data,else,if,has,no,default,value,and,no,value,passed,on,alternative,name,o,parameter,tool,data,missing,arguments,add,o,get,name,if,missing,arguments,is,empty,throw,new,required,parameters,exception,this,missing,arguments,text,missing,arguments,missing,arguments
RequiredParameters -> public void applyTo(ParameterTool parameterTool) throws RequiredParametersException;1500387265;Check for all required parameters defined:_- has a value been passed_- if not, does the parameter have an associated default value_- does the type of the parameter match the one defined in RequiredParameters_- does the value provided in the parameterTool adhere to the choices defined in the option.__<p>If any check fails, a RequiredParametersException is thrown__@param parameterTool - parameters supplied by the user._@throws RequiredParametersException if any of the specified checks fail;public void applyTo(ParameterTool parameterTool) throws RequiredParametersException {_		List<String> missingArguments = new LinkedList<>()__		for (Option o : data.values()) {_			if (parameterTool.data.containsKey(o.getName())) {_				if (Objects.equals(parameterTool.data.get(o.getName()), ParameterTool.NO_VALUE_KEY)) {_					_					checkAndApplyDefaultValue(o, parameterTool.data)__				} else {_					_					checkAmbiguousValues(o, parameterTool.data)__					checkIsCastableToDefinedType(o, parameterTool.data)__					checkChoices(o, parameterTool.data)__				}_			} else {_				_				if (hasNoDefaultValueAndNoValuePassedOnAlternativeName(o, parameterTool.data)) {_					missingArguments.add(o.getName())__				}_			}_		}_		if (!missingArguments.isEmpty()) {_			throw new RequiredParametersException(this.missingArgumentsText(missingArguments), missingArguments)__		}_	};check,for,all,required,parameters,defined,has,a,value,been,passed,if,not,does,the,parameter,have,an,associated,default,value,does,the,type,of,the,parameter,match,the,one,defined,in,required,parameters,does,the,value,provided,in,the,parameter,tool,adhere,to,the,choices,defined,in,the,option,p,if,any,check,fails,a,required,parameters,exception,is,thrown,param,parameter,tool,parameters,supplied,by,the,user,throws,required,parameters,exception,if,any,of,the,specified,checks,fail;public,void,apply,to,parameter,tool,parameter,tool,throws,required,parameters,exception,list,string,missing,arguments,new,linked,list,for,option,o,data,values,if,parameter,tool,data,contains,key,o,get,name,if,objects,equals,parameter,tool,data,get,o,get,name,parameter,tool,check,and,apply,default,value,o,parameter,tool,data,else,check,ambiguous,values,o,parameter,tool,data,check,is,castable,to,defined,type,o,parameter,tool,data,check,choices,o,parameter,tool,data,else,if,has,no,default,value,and,no,value,passed,on,alternative,name,o,parameter,tool,data,missing,arguments,add,o,get,name,if,missing,arguments,is,empty,throw,new,required,parameters,exception,this,missing,arguments,text,missing,arguments,missing,arguments
RequiredParameters -> public String getHelp(List<String> missingArguments);1448287361;Build a help text for the defined parameters and list the missing arguments at the end of the text.__The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__Missing parameters:_\t param1 param2 ... paramN__@param missingArguments - a list of missing parameters_@return a formatted help String.;public String getHelp(List<String> missingArguments) {_		return this.getHelp() + this.missingArgumentsText(missingArguments)__	};build,a,help,text,for,the,defined,parameters,and,list,the,missing,arguments,at,the,end,of,the,text,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,missing,parameters,t,param1,param2,param,n,param,missing,arguments,a,list,of,missing,parameters,return,a,formatted,help,string;public,string,get,help,list,string,missing,arguments,return,this,get,help,this,missing,arguments,text,missing,arguments
RequiredParameters -> public String getHelp(List<String> missingArguments);1455477986;Build a help text for the defined parameters and list the missing arguments at the end of the text.__The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__Missing parameters:_\t param1 param2 ... paramN__@param missingArguments - a list of missing parameters_@return a formatted help String.;public String getHelp(List<String> missingArguments) {_		return this.getHelp() + this.missingArgumentsText(missingArguments)__	};build,a,help,text,for,the,defined,parameters,and,list,the,missing,arguments,at,the,end,of,the,text,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,missing,parameters,t,param1,param2,param,n,param,missing,arguments,a,list,of,missing,parameters,return,a,formatted,help,string;public,string,get,help,list,string,missing,arguments,return,this,get,help,this,missing,arguments,text,missing,arguments
RequiredParameters -> public String getHelp(List<String> missingArguments);1500387265;Build a help text for the defined parameters and list the missing arguments at the end of the text.__<p>The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__<p>Missing parameters:_\t param1 param2 ... paramN__@param missingArguments - a list of missing parameters_@return a formatted help String.;public String getHelp(List<String> missingArguments) {_		return this.getHelp() + this.missingArgumentsText(missingArguments)__	};build,a,help,text,for,the,defined,parameters,and,list,the,missing,arguments,at,the,end,of,the,text,p,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,p,missing,parameters,t,param1,param2,param,n,param,missing,arguments,a,list,of,missing,parameters,return,a,formatted,help,string;public,string,get,help,list,string,missing,arguments,return,this,get,help,this,missing,arguments,text,missing,arguments
RequiredParameters -> public String getHelp(List<String> missingArguments);1511189418;Build a help text for the defined parameters and list the missing arguments at the end of the text.__<p>The format of the help text will be:_Required Parameters:_\t -:shortName:, --:name: \t :helpText: \t default: :defaultValue: \t choices: :choices: \n__<p>Missing parameters:_\t param1 param2 ... paramN__@param missingArguments - a list of missing parameters_@return a formatted help String.;public String getHelp(List<String> missingArguments) {_		return this.getHelp() + this.missingArgumentsText(missingArguments)__	};build,a,help,text,for,the,defined,parameters,and,list,the,missing,arguments,at,the,end,of,the,text,p,the,format,of,the,help,text,will,be,required,parameters,t,short,name,name,t,help,text,t,default,default,value,t,choices,choices,n,p,missing,parameters,t,param1,param2,param,n,param,missing,arguments,a,list,of,missing,parameters,return,a,formatted,help,string;public,string,get,help,list,string,missing,arguments,return,this,get,help,this,missing,arguments,text,missing,arguments
RequiredParameters -> public Option add(String name) throws RequiredParametersException;1448287361;Add a parameter based on its name.__@param name - the name of the parameter_@return - an {@link Option} object representing the parameter_@throws RequiredParametersException if an option with the same name is already defined;public Option add(String name) throws RequiredParametersException {_		if (!this.data.containsKey(name)) {_			Option option = new Option(name)__			this.data.put(name, option)__			return option__		} else {_			throw new RequiredParametersException("Option with key " + name + " already exists.")__		}_	};add,a,parameter,based,on,its,name,param,name,the,name,of,the,parameter,return,an,link,option,object,representing,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,option,add,string,name,throws,required,parameters,exception,if,this,data,contains,key,name,option,option,new,option,name,this,data,put,name,option,return,option,else,throw,new,required,parameters,exception,option,with,key,name,already,exists
RequiredParameters -> public Option add(String name) throws RequiredParametersException;1455477986;Add a parameter based on its name.__@param name - the name of the parameter_@return - an {@link Option} object representing the parameter_@throws RequiredParametersException if an option with the same name is already defined;public Option add(String name) throws RequiredParametersException {_		if (!this.data.containsKey(name)) {_			Option option = new Option(name)__			this.data.put(name, option)__			return option__		} else {_			throw new RequiredParametersException("Option with key " + name + " already exists.")__		}_	};add,a,parameter,based,on,its,name,param,name,the,name,of,the,parameter,return,an,link,option,object,representing,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,option,add,string,name,throws,required,parameters,exception,if,this,data,contains,key,name,option,option,new,option,name,this,data,put,name,option,return,option,else,throw,new,required,parameters,exception,option,with,key,name,already,exists
RequiredParameters -> public Option add(String name) throws RequiredParametersException;1500387265;Add a parameter based on its name.__@param name - the name of the parameter_@return - an {@link Option} object representing the parameter_@throws RequiredParametersException if an option with the same name is already defined;public Option add(String name) throws RequiredParametersException {_		if (!this.data.containsKey(name)) {_			Option option = new Option(name)__			this.data.put(name, option)__			return option__		} else {_			throw new RequiredParametersException("Option with key " + name + " already exists.")__		}_	};add,a,parameter,based,on,its,name,param,name,the,name,of,the,parameter,return,an,link,option,object,representing,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,option,add,string,name,throws,required,parameters,exception,if,this,data,contains,key,name,option,option,new,option,name,this,data,put,name,option,return,option,else,throw,new,required,parameters,exception,option,with,key,name,already,exists
RequiredParameters -> public Option add(String name) throws RequiredParametersException;1511189418;Add a parameter based on its name.__@param name - the name of the parameter_@return - an {@link Option} object representing the parameter_@throws RequiredParametersException if an option with the same name is already defined;public Option add(String name) throws RequiredParametersException {_		if (!this.data.containsKey(name)) {_			Option option = new Option(name)__			this.data.put(name, option)__			return option__		} else {_			throw new RequiredParametersException("Option with key " + name + " already exists.")__		}_	};add,a,parameter,based,on,its,name,param,name,the,name,of,the,parameter,return,an,link,option,object,representing,the,parameter,throws,required,parameters,exception,if,an,option,with,the,same,name,is,already,defined;public,option,add,string,name,throws,required,parameters,exception,if,this,data,contains,key,name,option,option,new,option,name,this,data,put,name,option,return,option,else,throw,new,required,parameters,exception,option,with,key,name,already,exists
