# id;timestamp;commentText;codeText;commentWords;codeWords
DistributedRandomSampler -> public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input);1440164487;Sample algorithm for the second phase. This operation should be executed as the UDF of_an all reduce operation.__@param input The intermediate sample output generated in the first phase._@return The sampled output.;public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input) {_		if (numSamples == 0) {_			return EMPTY_ITERABLE__		}__		_		PriorityQueue<IntermediateSampleData<T>> reservoir = new PriorityQueue<IntermediateSampleData<T>>(numSamples)__		int index = 0__		IntermediateSampleData<T> smallest = null__		while (input.hasNext()) {_			IntermediateSampleData<T> element = input.next()__			if (index < numSamples) {_				_				reservoir.add(element)__				smallest = reservoir.peek()__			} else {_				_				_				if (element.getWeight() > smallest.getWeight()) {_					reservoir.remove()__					reservoir.add(element)__					smallest = reservoir.peek()__				}_			}_			index++__		}_		final Iterator<IntermediateSampleData<T>> itr = reservoir.iterator()___		return new Iterator<T>() {_			@Override_			public boolean hasNext() {_				return itr.hasNext()__			}__			@Override_			public T next() {_				return itr.next().getElement()__			}__			@Override_			public void remove() {_				itr.remove()__			}_		}__	};sample,algorithm,for,the,second,phase,this,operation,should,be,executed,as,the,udf,of,an,all,reduce,operation,param,input,the,intermediate,sample,output,generated,in,the,first,phase,return,the,sampled,output;public,iterator,t,sample,in,coordinator,iterator,intermediate,sample,data,t,input,if,num,samples,0,return,priority,queue,intermediate,sample,data,t,reservoir,new,priority,queue,intermediate,sample,data,t,num,samples,int,index,0,intermediate,sample,data,t,smallest,null,while,input,has,next,intermediate,sample,data,t,element,input,next,if,index,num,samples,reservoir,add,element,smallest,reservoir,peek,else,if,element,get,weight,smallest,get,weight,reservoir,remove,reservoir,add,element,smallest,reservoir,peek,index,final,iterator,intermediate,sample,data,t,itr,reservoir,iterator,return,new,iterator,t,override,public,boolean,has,next,return,itr,has,next,override,public,t,next,return,itr,next,get,element,override,public,void,remove,itr,remove
DistributedRandomSampler -> public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input);1455477986;Sample algorithm for the second phase. This operation should be executed as the UDF of_an all reduce operation.__@param input The intermediate sample output generated in the first phase._@return The sampled output.;public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input) {_		if (numSamples == 0) {_			return EMPTY_ITERABLE__		}__		_		PriorityQueue<IntermediateSampleData<T>> reservoir = new PriorityQueue<IntermediateSampleData<T>>(numSamples)__		int index = 0__		IntermediateSampleData<T> smallest = null__		while (input.hasNext()) {_			IntermediateSampleData<T> element = input.next()__			if (index < numSamples) {_				_				reservoir.add(element)__				smallest = reservoir.peek()__			} else {_				_				_				if (element.getWeight() > smallest.getWeight()) {_					reservoir.remove()__					reservoir.add(element)__					smallest = reservoir.peek()__				}_			}_			index++__		}_		final Iterator<IntermediateSampleData<T>> itr = reservoir.iterator()___		return new Iterator<T>() {_			@Override_			public boolean hasNext() {_				return itr.hasNext()__			}__			@Override_			public T next() {_				return itr.next().getElement()__			}__			@Override_			public void remove() {_				itr.remove()__			}_		}__	};sample,algorithm,for,the,second,phase,this,operation,should,be,executed,as,the,udf,of,an,all,reduce,operation,param,input,the,intermediate,sample,output,generated,in,the,first,phase,return,the,sampled,output;public,iterator,t,sample,in,coordinator,iterator,intermediate,sample,data,t,input,if,num,samples,0,return,priority,queue,intermediate,sample,data,t,reservoir,new,priority,queue,intermediate,sample,data,t,num,samples,int,index,0,intermediate,sample,data,t,smallest,null,while,input,has,next,intermediate,sample,data,t,element,input,next,if,index,num,samples,reservoir,add,element,smallest,reservoir,peek,else,if,element,get,weight,smallest,get,weight,reservoir,remove,reservoir,add,element,smallest,reservoir,peek,index,final,iterator,intermediate,sample,data,t,itr,reservoir,iterator,return,new,iterator,t,override,public,boolean,has,next,return,itr,has,next,override,public,t,next,return,itr,next,get,element,override,public,void,remove,itr,remove
DistributedRandomSampler -> public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input);1500387231;Sample algorithm for the second phase. This operation should be executed as the UDF of_an all reduce operation.__@param input The intermediate sample output generated in the first phase._@return The sampled output.;public Iterator<T> sampleInCoordinator(Iterator<IntermediateSampleData<T>> input) {_		if (numSamples == 0) {_			return emptyIterable__		}__		_		PriorityQueue<IntermediateSampleData<T>> reservoir = new PriorityQueue<IntermediateSampleData<T>>(numSamples)__		int index = 0__		IntermediateSampleData<T> smallest = null__		while (input.hasNext()) {_			IntermediateSampleData<T> element = input.next()__			if (index < numSamples) {_				_				reservoir.add(element)__				smallest = reservoir.peek()__			} else {_				_				_				if (element.getWeight() > smallest.getWeight()) {_					reservoir.remove()__					reservoir.add(element)__					smallest = reservoir.peek()__				}_			}_			index++__		}_		final Iterator<IntermediateSampleData<T>> itr = reservoir.iterator()___		return new Iterator<T>() {_			@Override_			public boolean hasNext() {_				return itr.hasNext()__			}__			@Override_			public T next() {_				return itr.next().getElement()__			}__			@Override_			public void remove() {_				itr.remove()__			}_		}__	};sample,algorithm,for,the,second,phase,this,operation,should,be,executed,as,the,udf,of,an,all,reduce,operation,param,input,the,intermediate,sample,output,generated,in,the,first,phase,return,the,sampled,output;public,iterator,t,sample,in,coordinator,iterator,intermediate,sample,data,t,input,if,num,samples,0,return,empty,iterable,priority,queue,intermediate,sample,data,t,reservoir,new,priority,queue,intermediate,sample,data,t,num,samples,int,index,0,intermediate,sample,data,t,smallest,null,while,input,has,next,intermediate,sample,data,t,element,input,next,if,index,num,samples,reservoir,add,element,smallest,reservoir,peek,else,if,element,get,weight,smallest,get,weight,reservoir,remove,reservoir,add,element,smallest,reservoir,peek,index,final,iterator,intermediate,sample,data,t,itr,reservoir,iterator,return,new,iterator,t,override,public,boolean,has,next,return,itr,has,next,override,public,t,next,return,itr,next,get,element,override,public,void,remove,itr,remove
DistributedRandomSampler -> public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;1440164487;Sample algorithm for the first phase. It operates on a single partition.__@param input The DataSet input of each partition._@return Intermediate sample output which will be used as the input of the second phase.;public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;sample,algorithm,for,the,first,phase,it,operates,on,a,single,partition,param,input,the,data,set,input,of,each,partition,return,intermediate,sample,output,which,will,be,used,as,the,input,of,the,second,phase;public,abstract,iterator,intermediate,sample,data,t,sample,in,partition,iterator,t,input
DistributedRandomSampler -> public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;1455477986;Sample algorithm for the first phase. It operates on a single partition.__@param input The DataSet input of each partition._@return Intermediate sample output which will be used as the input of the second phase.;public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;sample,algorithm,for,the,first,phase,it,operates,on,a,single,partition,param,input,the,data,set,input,of,each,partition,return,intermediate,sample,output,which,will,be,used,as,the,input,of,the,second,phase;public,abstract,iterator,intermediate,sample,data,t,sample,in,partition,iterator,t,input
DistributedRandomSampler -> public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;1500387231;Sample algorithm for the first phase. It operates on a single partition.__@param input The DataSet input of each partition._@return Intermediate sample output which will be used as the input of the second phase.;public abstract Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input)_;sample,algorithm,for,the,first,phase,it,operates,on,a,single,partition,param,input,the,data,set,input,of,each,partition,return,intermediate,sample,output,which,will,be,used,as,the,input,of,the,second,phase;public,abstract,iterator,intermediate,sample,data,t,sample,in,partition,iterator,t,input
DistributedRandomSampler -> @Override 	public Iterator<T> sample(Iterator<T> input);1440164487;Combine the first phase and second phase in sequence, implemented for test purpose only.__@param input Source data._@return Sample result in sequence.;@Override_	public Iterator<T> sample(Iterator<T> input) {_		return sampleInCoordinator(sampleInPartition(input))__	};combine,the,first,phase,and,second,phase,in,sequence,implemented,for,test,purpose,only,param,input,source,data,return,sample,result,in,sequence;override,public,iterator,t,sample,iterator,t,input,return,sample,in,coordinator,sample,in,partition,input
DistributedRandomSampler -> @Override 	public Iterator<T> sample(Iterator<T> input);1455477986;Combine the first phase and second phase in sequence, implemented for test purpose only.__@param input Source data._@return Sample result in sequence.;@Override_	public Iterator<T> sample(Iterator<T> input) {_		return sampleInCoordinator(sampleInPartition(input))__	};combine,the,first,phase,and,second,phase,in,sequence,implemented,for,test,purpose,only,param,input,source,data,return,sample,result,in,sequence;override,public,iterator,t,sample,iterator,t,input,return,sample,in,coordinator,sample,in,partition,input
DistributedRandomSampler -> @Override 	public Iterator<T> sample(Iterator<T> input);1500387231;Combine the first phase and second phase in sequence, implemented for test purpose only.__@param input Source data._@return Sample result in sequence.;@Override_	public Iterator<T> sample(Iterator<T> input) {_		return sampleInCoordinator(sampleInPartition(input))__	};combine,the,first,phase,and,second,phase,in,sequence,implemented,for,test,purpose,only,param,input,source,data,return,sample,result,in,sequence;override,public,iterator,t,sample,iterator,t,input,return,sample,in,coordinator,sample,in,partition,input
