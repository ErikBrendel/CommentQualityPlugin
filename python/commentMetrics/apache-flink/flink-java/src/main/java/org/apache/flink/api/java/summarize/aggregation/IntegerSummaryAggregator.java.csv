commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void aggregate(Integer value) {     min = Math.min(min, value). }
false;public;1;4;;@Override public void combine(Aggregator<Integer, Integer> other) {     min = Math.min(min, ((MinIntegerAggregator) other).min). }
false;public;0;4;;@Override public Integer result() {     return min. }
false;public;1;4;;@Override public void aggregate(Integer value) {     max = Math.max(max, value). }
false;public;1;4;;@Override public void combine(Aggregator<Integer, Integer> other) {     max = Math.max(max, ((MaxIntegerAggregator) other).max). }
false;public;0;4;;@Override public Integer result() {     return max. }
false;public;1;4;;@Override public void aggregate(Integer value) {     sum += value. }
false;public;1;4;;@Override public void combine(Aggregator<Integer, Integer> other) {     sum += ((SumIntegerAggregator) other).sum. }
false;public;0;4;;@Override public Integer result() {     return sum. }
false;protected;0;4;;@Override protected Aggregator<Integer, Integer> initMin() {     return new MinIntegerAggregator(). }
false;protected;0;4;;@Override protected Aggregator<Integer, Integer> initMax() {     return new MaxIntegerAggregator(). }
false;protected;0;4;;@Override protected Aggregator<Integer, Integer> initSum() {     return new SumIntegerAggregator(). }
false;protected;1;5;;@Override protected boolean isNan(Integer number) {     // NaN never applies here because only types like Float and Double have NaN     return false. }
false;protected;1;5;;@Override protected boolean isInfinite(Integer number) {     // Infinity never applies here because only types like Float and Double have Infinity     return false. }
