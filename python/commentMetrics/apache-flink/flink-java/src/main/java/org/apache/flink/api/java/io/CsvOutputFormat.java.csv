commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configures the format to either allow null values (writing an empty field),  * or to throw an exception when encountering a null field.  *  * <p>by default, null values are disallowed.  *  * @param allowNulls Flag to indicate whether the output format should accept null values.  */ ;/**  * Configures the format to either allow null values (writing an empty field),  * or to throw an exception when encountering a null field.  *  * <p>by default, null values are disallowed.  *  * @param allowNulls Flag to indicate whether the output format should accept null values.  */ public void setAllowNullValues(boolean allowNulls) {     this.allowNullValues = allowNulls. }
true;public;1;3;/**  * Sets the charset with which the CSV strings are written to the file.  * If not specified, the output format uses the systems default character encoding.  *  * @param charsetName The name of charset to use for encoding the output.  */ ;/**  * Sets the charset with which the CSV strings are written to the file.  * If not specified, the output format uses the systems default character encoding.  *  * @param charsetName The name of charset to use for encoding the output.  */ public void setCharsetName(String charsetName) {     this.charsetName = charsetName. }
true;public;1;3;/**  * Configures whether the output format should quote string values. String values are fields  * of type {@link java.lang.String} and {@link org.apache.flink.types.StringValue}, as well as  * all subclasses of the latter.  *  * <p>By default, strings are not quoted.  *  * @param quoteStrings Flag indicating whether string fields should be quoted.  */ ;/**  * Configures whether the output format should quote string values. String values are fields  * of type {@link java.lang.String} and {@link org.apache.flink.types.StringValue}, as well as  * all subclasses of the latter.  *  * <p>By default, strings are not quoted.  *  * @param quoteStrings Flag indicating whether string fields should be quoted.  */ public void setQuoteStrings(boolean quoteStrings) {     this.quoteStrings = quoteStrings. }
false;public;2;6;;// -------------------------------------------------------------------------------------------- @Override public void open(int taskNumber, int numTasks) throws IOException {     super.open(taskNumber, numTasks).     this.wrt = this.charsetName == null ? new OutputStreamWriter(new BufferedOutputStream(this.stream, 4096)) : new OutputStreamWriter(new BufferedOutputStream(this.stream, 4096), this.charsetName). }
false;public;0;8;;@Override public void close() throws IOException {     if (wrt != null) {         this.wrt.flush().         this.wrt.close().     }     super.close(). }
false;public;1;36;;@Override public void writeRecord(T element) throws IOException {     int numFields = element.getArity().     for (int i = 0. i < numFields. i++) {         Object v = element.getField(i).         if (v != null) {             if (i != 0) {                 this.wrt.write(this.fieldDelimiter).             }             if (quoteStrings) {                 if (v instanceof String || v instanceof StringValue) {                     this.wrt.write('"').                     this.wrt.write(v.toString()).                     this.wrt.write('"').                 } else {                     this.wrt.write(v.toString()).                 }             } else {                 this.wrt.write(v.toString()).             }         } else {             if (this.allowNullValues) {                 if (i != 0) {                     this.wrt.write(this.fieldDelimiter).                 }             } else {                 throw new RuntimeException("Cannot write tuple with <null> value at position: " + i).             }         }     }     // add the record delimiter     this.wrt.write(this.recordDelimiter). }
true;public;0;4;// -------------------------------------------------------------------------------------------- ;// -------------------------------------------------------------------------------------------- @Override public String toString() {     return "CsvOutputFormat (path: " + this.getOutputFilePath() + ", delimiter: " + this.fieldDelimiter + ")". }
true;public;2;7;/**  * The purpose of this method is solely to check whether the data type to be processed  * is in fact a tuple type.  */ ;/**  * The purpose of this method is solely to check whether the data type to be processed  * is in fact a tuple type.  */ @Override public void setInputType(TypeInformation<?> type, ExecutionConfig executionConfig) {     if (!type.isTupleType()) {         throw new InvalidProgramException("The " + CsvOutputFormat.class.getSimpleName() + " can only be used to write tuple data sets.").     } }
