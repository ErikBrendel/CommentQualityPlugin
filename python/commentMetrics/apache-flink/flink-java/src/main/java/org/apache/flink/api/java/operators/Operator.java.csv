commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the type of the result of this operator.  *  * @return The result type of the operator.  */ ;/**  * Returns the type of the result of this operator.  *  * @return The result type of the operator.  */ public TypeInformation<OUT> getResultType() {     return getType(). }
true;public;0;3;/**  * Returns the name of the operator. If no name has been set, it returns the name of the  * operation, or the name of the class implementing the function of this operator.  *  * @return The name of the operator.  */ ;/**  * Returns the name of the operator. If no name has been set, it returns the name of the  * operation, or the name of the class implementing the function of this operator.  *  * @return The name of the operator.  */ public String getName() {     return name. }
true;public;0;3;/**  * Returns the parallelism of this operator.  *  * @return The parallelism of this operator.  */ ;/**  * Returns the parallelism of this operator.  *  * @return The parallelism of this operator.  */ public int getParallelism() {     return this.parallelism. }
true;public;0;3;/**  * Returns the minimum resource of this operator. If no minimum resource has been set,  * it returns the default empty resource.  *  * @return The minimum resource of this operator.  */ ;/**  * Returns the minimum resource of this operator. If no minimum resource has been set,  * it returns the default empty resource.  *  * @return The minimum resource of this operator.  */ public ResourceSpec getMinResources() {     return this.minResources. }
true;public;0;3;/**  * Returns the preferred resource of this operator. If no preferred resource has been set,  * it returns the default empty resource.  *  * @return The preferred resource of this operator.  */ ;/**  * Returns the preferred resource of this operator. If no preferred resource has been set,  * it returns the default empty resource.  *  * @return The preferred resource of this operator.  */ public ResourceSpec getPreferredResources() {     return this.preferredResources. }
true;public;1;6;/**  * Sets the name of this operator. This overrides the default name, which is either  * a generated description of the operation (such as for example "Aggregate(1:SUM, 2:MIN)")  * or the name the user-defined function or input/output format executed by the operator.  *  * @param newName The name for this operator.  * @return The operator with a new name.  */ ;/**  * Sets the name of this operator. This overrides the default name, which is either  * a generated description of the operation (such as for example "Aggregate(1:SUM, 2:MIN)")  * or the name the user-defined function or input/output format executed by the operator.  *  * @param newName The name for this operator.  * @return The operator with a new name.  */ public O name(String newName) {     this.name = newName.     @SuppressWarnings("unchecked")     O returnType = (O) this.     return returnType. }
true;public;1;10;/**  * Sets the parallelism for this operator.  * The parallelism must be 1 or more.  *  * @param parallelism The parallelism for this operator. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}  *        will use the system default.  * @return The operator with set parallelism.  */ ;/**  * Sets the parallelism for this operator.  * The parallelism must be 1 or more.  *  * @param parallelism The parallelism for this operator. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}  *        will use the system default.  * @return The operator with set parallelism.  */ public O setParallelism(int parallelism) {     Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT, "The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).").     this.parallelism = parallelism.     @SuppressWarnings("unchecked")     O returnType = (O) this.     return returnType. }
true;private;2;14;/**  * Sets the minimum and preferred resources for this operator. This overrides the default resources.  * The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.  *  * @param minResources The minimum resources for this operator.  * @param preferredResources The preferred resources for this operator.  * @return The operator with set minimum and preferred resources.  */ ;// --------------------------------------------------------------------------- // Fine-grained resource profiles are an incomplete work-in-progress feature // The setters are hence private at this point. // --------------------------------------------------------------------------- /**  * Sets the minimum and preferred resources for this operator. This overrides the default resources.  * The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.  *  * @param minResources The minimum resources for this operator.  * @param preferredResources The preferred resources for this operator.  * @return The operator with set minimum and preferred resources.  */ private O setResources(ResourceSpec minResources, ResourceSpec preferredResources) {     Preconditions.checkNotNull(minResources, "The min resources must be not null.").     Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.").     Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources), "The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.").     this.minResources = minResources.     this.preferredResources = preferredResources.     @SuppressWarnings("unchecked")     O returnType = (O) this.     return returnType. }
true;private;1;11;/**  * Sets the resources for this operator. This overrides the default minimum and preferred resources.  *  * @param resources The resources for this operator.  * @return The operator with set minimum and preferred resources.  */ ;/**  * Sets the resources for this operator. This overrides the default minimum and preferred resources.  *  * @param resources The resources for this operator.  * @return The operator with set minimum and preferred resources.  */ private O setResources(ResourceSpec resources) {     Preconditions.checkNotNull(resources, "The resources must be not null.").     Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.").     this.minResources = resources.     this.preferredResources = resources.     @SuppressWarnings("unchecked")     O returnType = (O) this.     return returnType. }
