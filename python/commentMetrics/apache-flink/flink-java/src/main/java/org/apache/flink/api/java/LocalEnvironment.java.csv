commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;// -------------------------------------------------------------------------------------------- @Override public JobExecutionResult execute(String jobName) throws Exception {     if (executor == null) {         startNewSession().     }     Plan p = createProgramPlan(jobName).     // Session management is disabled, revert this commit to enable     // p.setJobId(jobID).     // p.setSessionTimeout(sessionTimeout).     JobExecutionResult result = executor.executePlan(p).     this.lastJobExecutionResult = result.     return result. }
false;public;0;14;;@Override public String getExecutionPlan() throws Exception {     Plan p = createProgramPlan(null, false).     // if one runs, fine, of not, we only create the class but disregard immediately afterwards     if (executor != null) {         return executor.getOptimizerPlanAsJSON(p).     } else {         PlanExecutor tempExecutor = PlanExecutor.createLocalExecutor(configuration).         return tempExecutor.getOptimizerPlanAsJSON(p).     } }
false;public;0;22;;@Override @PublicEvolving public void startNewSession() throws Exception {     if (executor != null) {         // we need to end the previous session         executor.stop().         // create also a new JobID         jobID = JobID.generate().     }     // create a new local executor     executor = PlanExecutor.createLocalExecutor(configuration).     executor.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled()).     // if we have a session, start the mini cluster eagerly to have it available across sessions     if (getSessionTimeout() > 0) {         executor.start().         // also install the reaper that will shut it down eventually         executorReaper = new ExecutorReaper(executor).     } }
false;public;0;5;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ @Override public String toString() {     return "Local Environment (parallelism = " + (getParallelism() == ExecutionConfig.PARALLELISM_DEFAULT ? "default" : getParallelism()) + ") : " + getIdString(). }
false;public;0;21;;@Override public void run() {     synchronized (monitor) {         while (!triggered) {             try {                 monitor.wait().             } catch (InterruptedException e) {             // should never happen             }         }     }     try {         executor.stop().     } catch (Throwable t) {         System.err.println("Cluster reaper caught exception during shutdown").         t.printStackTrace().     } }
false;;0;6;;void trigger() {     triggered = true.     synchronized (monitor) {         monitor.notifyAll().     } }
false;protected;0;5;;@Override protected void finalize() throws Throwable {     super.finalize().     shutdownThread.trigger(). }
