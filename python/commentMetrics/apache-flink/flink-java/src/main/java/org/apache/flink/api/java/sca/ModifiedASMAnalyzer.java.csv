commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;3;;protected Frame newFrame(int nLocals, int nStack) {     return new ModifiedASMFrame(nLocals, nStack). }
false;protected;1;3;;protected Frame newFrame(Frame src) {     return new ModifiedASMFrame(src). }
false;public;0;7;;public void requestIFEQLoopModification() {     if (jumpModificationState != DO_NOTHING) {         throw new CodeAnalyzerException("Unable to do jump modifications (unsupported nested jumping).").     }     jumpModification = IFEQ_MOD.     jumpModificationState = PRE_STATE. }
false;public;0;7;;public void requestIFNELoopModification() {     if (jumpModificationState != DO_NOTHING) {         throw new CodeAnalyzerException("Unable to do jump modifications (unsupported nested jumping).").     }     jumpModification = IFNE_MOD.     jumpModificationState = PRE_STATE. }
false;protected;2;76;;@Override protected void newControlFlowEdge(int insn, int successor) {     try {         if (jumpModificationState == PRE_STATE) {             jumpModificationState = MOD_STATE.         } else if (jumpModificationState == MOD_STATE) {             // for a later merge             if (jumpModification == IFEQ_MOD) {                 final int top = accessField(Analyzer.class, "top").getInt(this).                 final int[] queue = (int[]) accessField(Analyzer.class, "queue").get(this).                 final int tmp = queue[top - 2].                 queue[top - 2] = queue[top - 1].                 queue[top - 1] = tmp.                 eventInsn = queue[top - 2] - 1.                 final InsnList insns = (InsnList) accessField(Analyzer.class, "insns").get(this).                 // if yes this is loop structure                 if (insns.get(eventInsn) instanceof JumpInsnNode) {                     jumpModificationState = WAIT_FOR_INSN_STATE.                 } else // no loop -> end of modification                 {                     jumpModificationState = DO_NOTHING.                 }             } else // this modification changes the merge priority of certain frames (the expression part of the IF)             if (jumpModification == IFNE_MOD) {                 final Frame[] frames = (Frame[]) accessField(Analyzer.class, "frames").get(this).                 final Field indexField = accessField(AbstractInsnNode.class, "index").                 final InsnList insns = (InsnList) accessField(Analyzer.class, "insns").get(this).                 final AbstractInsnNode gotoInsnn = insns.get(successor - 1).                 // check for a loop                 if (gotoInsnn instanceof JumpInsnNode) {                     jumpModificationState = WAIT_FOR_INSN_STATE.                     // sets a merge priority for all instructions (the expression of the IF)                     // from the label the goto instruction points to until the evaluation with IFEQ                     final int idx = indexField.getInt(accessField(JumpInsnNode.class, "label").get(gotoInsnn)).                     for (int i = idx. i <= insn. i++) {                         ((ModifiedASMFrame) frames[i]).mergePriority = true.                     }                     eventInsn = idx - 2.                 } else {                     jumpModificationState = DO_NOTHING.                 }             }         } else // wait for the goto instruction         if (jumpModificationState == WAIT_FOR_INSN_STATE && insn == eventInsn) {             jumpModificationState = DO_NOTHING.             final Frame[] frames = (Frame[]) accessField(Analyzer.class, "frames").get(this).             // this ensures that local variables are kept             if (jumpModification == IFEQ_MOD) {                 interpreter.rightMergePriority = true.                 final Field top = accessField(Frame.class, "top").                 top.setInt(frames[eventInsn], top.getInt(frames[eventInsn + 1])).                 frames[eventInsn + 1].merge(frames[eventInsn], interpreter).             } else // finally set a merge priority for the last instruction of the loop (before the IF expression)             if (jumpModification == IFNE_MOD) {                 ((ModifiedASMFrame) frames[eventInsn + 1]).mergePriority = true.             }         }     } catch (Exception e) {         throw new CodeAnalyzerException("Unable to do jump modifications.", e).     } }
false;private;2;9;;private Field accessField(Class<?> clazz, String name) {     for (Field f : clazz.getDeclaredFields()) {         if (f.getName().equals(name)) {             f.setAccessible(true).             return f.         }     }     return null. }
