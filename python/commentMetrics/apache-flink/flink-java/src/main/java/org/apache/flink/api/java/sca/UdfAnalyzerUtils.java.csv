# id;timestamp;commentText;codeText;commentWords;codeWords
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1433741389;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		try {_			_			_			while (internalClassName != null) {_				ClassReader cr = new ClassReader(Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class"))__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		} catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,try,while,internal,class,name,null,class,reader,cr,new,class,reader,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1438620487;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) { _					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1442481573;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) { _					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1443564120;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) { _					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1455477986;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) { _					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1474316780;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) { _					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1500970614;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) {_					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1502357786;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) {_					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> @SuppressWarnings("unchecked") 	public static Object[] findMethodNode(String internalClassName, String name, String desc);1511814440;@return array that contains the method node and the name of the class where_the method node has been found;@SuppressWarnings("unchecked")_	public static Object[] findMethodNode(String internalClassName, String name, String desc) {_		InputStream stream = null__		try {_			_			_			while (internalClassName != null) {_				stream = Thread.currentThread().getContextClassLoader()_						.getResourceAsStream(internalClassName.replace('.', '/') + ".class")__				ClassReader cr = new ClassReader(stream)__				final ClassNode cn = new ClassNode()__				cr.accept(cn, 0)__				for (MethodNode mn : (List<MethodNode>) cn.methods) {_					if (mn.name.equals(name) && mn.desc.equals(desc)) {_						return new Object[]{ mn , cr.getClassName()}__					}_				}_				internalClassName = cr.getSuperName()__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Method '" + name + "' could not be found", e)__		}_		finally {_			if (stream != null) {_				try {_					stream.close()__				} catch (IOException e) {_					_				}_			}_		}_		throw new IllegalStateException("Method '" + name + "' could not be found")__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;suppress,warnings,unchecked,public,static,object,find,method,node,string,internal,class,name,string,name,string,desc,input,stream,stream,null,try,while,internal,class,name,null,stream,thread,current,thread,get,context,class,loader,get,resource,as,stream,internal,class,name,replace,class,class,reader,cr,new,class,reader,stream,final,class,node,cn,new,class,node,cr,accept,cn,0,for,method,node,mn,list,method,node,cn,methods,if,mn,name,equals,name,mn,desc,equals,desc,return,new,object,mn,cr,get,class,name,internal,class,name,cr,get,super,name,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found,e,finally,if,stream,null,try,stream,close,catch,ioexception,e,throw,new,illegal,state,exception,method,name,could,not,be,found
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1433741389;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1438620487;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1442481573;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1443564120;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1455477986;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1474316780;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1500970614;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1502357786;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst);1511814440;@return returns whether a value of the list of values is or contains_important dependencies (inputs or collectors) that require special analysis_(e.g. to dig into a nested method). The first argument can be skipped e.g._in order to skip the "this" of non-static method arguments.;public static boolean hasImportantDependencies(List<? extends BasicValue> values, boolean skipFirst) {_		for (BasicValue value : values) {_			if (skipFirst) {_				skipFirst = false__				continue__			}_			if (hasImportantDependencies(value)) {_				return true__			}_		}_		return false__	};return,returns,whether,a,value,of,the,list,of,values,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method,the,first,argument,can,be,skipped,e,g,in,order,to,skip,the,this,of,non,static,method,arguments;public,static,boolean,has,important,dependencies,list,extends,basic,value,values,boolean,skip,first,for,basic,value,value,values,if,skip,first,skip,first,false,continue,if,has,important,dependencies,value,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1433741389;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1438620487;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1442481573;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1443564120;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1455477986;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1474316780;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1500970614;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1502357786;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static boolean hasImportantDependencies(BasicValue bv);1511814440;@return returns whether a value is or contains important dependencies (inputs or collectors)_that require special analysis (e.g. to dig into a nested method);public static boolean hasImportantDependencies(BasicValue bv) {_		if (!isTagged(bv)) {_			return false__		}_		final TaggedValue value = tagged(bv)___		if (value.isInput() || value.isCollector()) {_			return true__		}_		else if (value.canContainFields() && value.getContainerMapping() != null) {_			for (TaggedValue tv : value.getContainerMapping().values()) {_				if (hasImportantDependencies(tv)) {_					return true__				}_			}_		}_		return false__	};return,returns,whether,a,value,is,or,contains,important,dependencies,inputs,or,collectors,that,require,special,analysis,e,g,to,dig,into,a,nested,method;public,static,boolean,has,important,dependencies,basic,value,bv,if,is,tagged,bv,return,false,final,tagged,value,value,tagged,bv,if,value,is,input,value,is,collector,return,true,else,if,value,can,contain,fields,value,get,container,mapping,null,for,tagged,value,tv,value,get,container,mapping,values,if,has,important,dependencies,tv,return,true,return,false
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1433741389;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1438620487;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1442481573;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1443564120;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1455477986;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1474316780;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1500970614;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1502357786;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> public static Object[] findMethodNode(String internalClassName, Method method);1511814440;@return array that contains the method node and the name of the class where_the method node has been found;public static Object[] findMethodNode(String internalClassName, Method method) {_		return findMethodNode(internalClassName, method.getName(), Type.getMethodDescriptor(method))__	};return,array,that,contains,the,method,node,and,the,name,of,the,class,where,the,method,node,has,been,found;public,static,object,find,method,node,string,internal,class,name,method,method,return,find,method,node,internal,class,name,method,get,name,type,get,method,descriptor,method
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1443564120;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1455477986;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1474316780;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1500970614;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1502357786;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
UdfAnalyzerUtils -> private UdfAnalyzerUtils();1511814440;Private constructor to prevent instantiation.;private UdfAnalyzerUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,udf,analyzer,utils,throw,new,runtime,exception
