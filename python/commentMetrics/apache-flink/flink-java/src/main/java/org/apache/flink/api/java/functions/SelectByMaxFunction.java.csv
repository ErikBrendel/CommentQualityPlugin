# id;timestamp;commentText;codeText;commentWords;codeWords
SelectByMaxFunction -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	@Override 	public T reduce(T value1, T value2) throws Exception;1409655585;Reduce implementation, returns bigger tuple or value1 if both tuples are_equal. Comparison highly depends on the order and amount of fields chosen_as indices. All given fields (at construction time) are checked in the same_order as defined (at construction time). If both tuples are equal in one_index, the next index is compared. Or if no next index is available value1_is returned._The tuple which has a bigger value at one index will be returned.;@SuppressWarnings({ "unchecked", "rawtypes" })_	@Override_	public T reduce(T value1, T value2) throws Exception {__		for (int index = 0_ index < fields.length_ index++) {_			_			int position = this.fields[index]___			_			Comparable comparable1 = value1.getField(position)__			Comparable comparable2 = value2.getField(position)___			_			int comp = comparable1.compareTo(comparable2)__			_			_			if (comp > 0) {_				return value1__			} else if (comp < 0) {_				return value2__			}_		}_		return value1__	};reduce,implementation,returns,bigger,tuple,or,value1,if,both,tuples,are,equal,comparison,highly,depends,on,the,order,and,amount,of,fields,chosen,as,indices,all,given,fields,at,construction,time,are,checked,in,the,same,order,as,defined,at,construction,time,if,both,tuples,are,equal,in,one,index,the,next,index,is,compared,or,if,no,next,index,is,available,value1,is,returned,the,tuple,which,has,a,bigger,value,at,one,index,will,be,returned;suppress,warnings,unchecked,rawtypes,override,public,t,reduce,t,value1,t,value2,throws,exception,for,int,index,0,index,fields,length,index,int,position,this,fields,index,comparable,comparable1,value1,get,field,position,comparable,comparable2,value2,get,field,position,int,comp,comparable1,compare,to,comparable2,if,comp,0,return,value1,else,if,comp,0,return,value2,return,value1
SelectByMaxFunction -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	@Override 	public T reduce(T value1, T value2) throws Exception;1410044397;Reduce implementation, returns bigger tuple or value1 if both tuples are_equal. Comparison highly depends on the order and amount of fields chosen_as indices. All given fields (at construction time) are checked in the same_order as defined (at construction time). If both tuples are equal in one_index, the next index is compared. Or if no next index is available value1_is returned._The tuple which has a bigger value at one index will be returned.;@SuppressWarnings({ "unchecked", "rawtypes" })_	@Override_	public T reduce(T value1, T value2) throws Exception {__		for (int index = 0_ index < fields.length_ index++) {_			_			int position = this.fields[index]___			_			Comparable comparable1 = value1.getFieldNotNull(position)__			Comparable comparable2 = value2.getFieldNotNull(position)___			_			int comp = comparable1.compareTo(comparable2)__			_			_			if (comp > 0) {_				return value1__			} else if (comp < 0) {_				return value2__			}_		}_		return value1__	};reduce,implementation,returns,bigger,tuple,or,value1,if,both,tuples,are,equal,comparison,highly,depends,on,the,order,and,amount,of,fields,chosen,as,indices,all,given,fields,at,construction,time,are,checked,in,the,same,order,as,defined,at,construction,time,if,both,tuples,are,equal,in,one,index,the,next,index,is,compared,or,if,no,next,index,is,available,value1,is,returned,the,tuple,which,has,a,bigger,value,at,one,index,will,be,returned;suppress,warnings,unchecked,rawtypes,override,public,t,reduce,t,value1,t,value2,throws,exception,for,int,index,0,index,fields,length,index,int,position,this,fields,index,comparable,comparable1,value1,get,field,not,null,position,comparable,comparable2,value2,get,field,not,null,position,int,comp,comparable1,compare,to,comparable2,if,comp,0,return,value1,else,if,comp,0,return,value2,return,value1
SelectByMaxFunction -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	@Override 	public T reduce(T value1, T value2) throws Exception;1411473593;Reduce implementation, returns bigger tuple or value1 if both tuples are_equal. Comparison highly depends on the order and amount of fields chosen_as indices. All given fields (at construction time) are checked in the same_order as defined (at construction time). If both tuples are equal in one_index, the next index is compared. Or if no next index is available value1_is returned._The tuple which has a bigger value at one index will be returned.;@SuppressWarnings({ "unchecked", "rawtypes" })_	@Override_	public T reduce(T value1, T value2) throws Exception {__		for (int index = 0_ index < fields.length_ index++) {_			_			int position = this.fields[index]___			_			Comparable comparable1 = value1.getFieldNotNull(position)__			Comparable comparable2 = value2.getFieldNotNull(position)___			_			int comp = comparable1.compareTo(comparable2)__			_			_			if (comp > 0) {_				return value1__			} else if (comp < 0) {_				return value2__			}_		}_		return value1__	};reduce,implementation,returns,bigger,tuple,or,value1,if,both,tuples,are,equal,comparison,highly,depends,on,the,order,and,amount,of,fields,chosen,as,indices,all,given,fields,at,construction,time,are,checked,in,the,same,order,as,defined,at,construction,time,if,both,tuples,are,equal,in,one,index,the,next,index,is,compared,or,if,no,next,index,is,available,value1,is,returned,the,tuple,which,has,a,bigger,value,at,one,index,will,be,returned;suppress,warnings,unchecked,rawtypes,override,public,t,reduce,t,value1,t,value2,throws,exception,for,int,index,0,index,fields,length,index,int,position,this,fields,index,comparable,comparable1,value1,get,field,not,null,position,comparable,comparable2,value2,get,field,not,null,position,int,comp,comparable1,compare,to,comparable2,if,comp,0,return,value1,else,if,comp,0,return,value2,return,value1
SelectByMaxFunction -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	@Override 	public T reduce(T value1, T value2) throws Exception;1455477986;Reduce implementation, returns bigger tuple or value1 if both tuples are_equal. Comparison highly depends on the order and amount of fields chosen_as indices. All given fields (at construction time) are checked in the same_order as defined (at construction time). If both tuples are equal in one_index, the next index is compared. Or if no next index is available value1_is returned._The tuple which has a bigger value at one index will be returned.;@SuppressWarnings({ "unchecked", "rawtypes" })_	@Override_	public T reduce(T value1, T value2) throws Exception {__		for (int index = 0_ index < fields.length_ index++) {_			_			int position = this.fields[index]___			_			Comparable comparable1 = value1.getFieldNotNull(position)__			Comparable comparable2 = value2.getFieldNotNull(position)___			_			int comp = comparable1.compareTo(comparable2)__			_			_			if (comp > 0) {_				return value1__			} else if (comp < 0) {_				return value2__			}_		}_		return value1__	};reduce,implementation,returns,bigger,tuple,or,value1,if,both,tuples,are,equal,comparison,highly,depends,on,the,order,and,amount,of,fields,chosen,as,indices,all,given,fields,at,construction,time,are,checked,in,the,same,order,as,defined,at,construction,time,if,both,tuples,are,equal,in,one,index,the,next,index,is,compared,or,if,no,next,index,is,available,value1,is,returned,the,tuple,which,has,a,bigger,value,at,one,index,will,be,returned;suppress,warnings,unchecked,rawtypes,override,public,t,reduce,t,value1,t,value2,throws,exception,for,int,index,0,index,fields,length,index,int,position,this,fields,index,comparable,comparable1,value1,get,field,not,null,position,comparable,comparable2,value2,get,field,not,null,position,int,comp,comparable1,compare,to,comparable2,if,comp,0,return,value1,else,if,comp,0,return,value2,return,value1
SelectByMaxFunction -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	@Override 	public T reduce(T value1, T value2) throws Exception;1500387300;Reduce implementation, returns bigger tuple or value1 if both tuples are_equal. Comparison highly depends on the order and amount of fields chosen_as indices. All given fields (at construction time) are checked in the same_order as defined (at construction time). If both tuples are equal in one_index, the next index is compared. Or if no next index is available value1_is returned._The tuple which has a bigger value at one index will be returned.;@SuppressWarnings({ "unchecked", "rawtypes" })_	@Override_	public T reduce(T value1, T value2) throws Exception {__		for (int index = 0_ index < fields.length_ index++) {_			_			int position = this.fields[index]___			_			Comparable comparable1 = value1.getFieldNotNull(position)__			Comparable comparable2 = value2.getFieldNotNull(position)___			_			int comp = comparable1.compareTo(comparable2)__			_			_			if (comp > 0) {_				return value1__			} else if (comp < 0) {_				return value2__			}_		}_		return value1__	};reduce,implementation,returns,bigger,tuple,or,value1,if,both,tuples,are,equal,comparison,highly,depends,on,the,order,and,amount,of,fields,chosen,as,indices,all,given,fields,at,construction,time,are,checked,in,the,same,order,as,defined,at,construction,time,if,both,tuples,are,equal,in,one,index,the,next,index,is,compared,or,if,no,next,index,is,available,value1,is,returned,the,tuple,which,has,a,bigger,value,at,one,index,will,be,returned;suppress,warnings,unchecked,rawtypes,override,public,t,reduce,t,value1,t,value2,throws,exception,for,int,index,0,index,fields,length,index,int,position,this,fields,index,comparable,comparable1,value1,get,field,not,null,position,comparable,comparable2,value2,get,field,not,null,position,int,comp,comparable1,compare,to,comparable2,if,comp,0,return,value1,else,if,comp,0,return,value2,return,value1
SelectByMaxFunction -> public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields);1409655585;Constructor which is overwriting the default constructor._@param type Types of tuple whether to check if given fields are key types._@param fields Array of integers which are used as key for comparison. The order of indexes_is regarded in the reduce function. First index has highest priority and last index has_least priority.;public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields) {_		this.fields = fields__		_		_		for (int field : fields) {_			_			if (field < 0 || field >= type.getArity()) {_				throw new IndexOutOfBoundsException(_						"MinReduceFunction field position " + field + " is out of range.")__			}__			_			if (!type.getTypeAt(field).isKeyType()) {_				throw new java.lang.IllegalArgumentException(_						"MinReduceFunction supports only key(Comparable) types.")__			}__		}_	};constructor,which,is,overwriting,the,default,constructor,param,type,types,of,tuple,whether,to,check,if,given,fields,are,key,types,param,fields,array,of,integers,which,are,used,as,key,for,comparison,the,order,of,indexes,is,regarded,in,the,reduce,function,first,index,has,highest,priority,and,last,index,has,least,priority;public,select,by,max,function,tuple,type,info,t,type,int,fields,this,fields,fields,for,int,field,fields,if,field,0,field,type,get,arity,throw,new,index,out,of,bounds,exception,min,reduce,function,field,position,field,is,out,of,range,if,type,get,type,at,field,is,key,type,throw,new,java,lang,illegal,argument,exception,min,reduce,function,supports,only,key,comparable,types
SelectByMaxFunction -> public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields);1410044397;Constructor which is overwriting the default constructor._@param type Types of tuple whether to check if given fields are key types._@param fields Array of integers which are used as key for comparison. The order of indexes_is regarded in the reduce function. First index has highest priority and last index has_least priority.;public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields) {_		this.fields = fields__		_		_		for (int field : fields) {_			_			if (field < 0 || field >= type.getArity()) {_				throw new IndexOutOfBoundsException(_						"MinReduceFunction field position " + field + " is out of range.")__			}__			_			if (!type.getTypeAt(field).isKeyType()) {_				throw new java.lang.IllegalArgumentException(_						"MinReduceFunction supports only key(Comparable) types.")__			}__		}_	};constructor,which,is,overwriting,the,default,constructor,param,type,types,of,tuple,whether,to,check,if,given,fields,are,key,types,param,fields,array,of,integers,which,are,used,as,key,for,comparison,the,order,of,indexes,is,regarded,in,the,reduce,function,first,index,has,highest,priority,and,last,index,has,least,priority;public,select,by,max,function,tuple,type,info,t,type,int,fields,this,fields,fields,for,int,field,fields,if,field,0,field,type,get,arity,throw,new,index,out,of,bounds,exception,min,reduce,function,field,position,field,is,out,of,range,if,type,get,type,at,field,is,key,type,throw,new,java,lang,illegal,argument,exception,min,reduce,function,supports,only,key,comparable,types
SelectByMaxFunction -> public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields);1411473593;Constructor which is overwriting the default constructor._@param type Types of tuple whether to check if given fields are key types._@param fields Array of integers which are used as key for comparison. The order of indexes_is regarded in the reduce function. First index has highest priority and last index has_least priority.;public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields) {_		this.fields = fields__		_		_		for (int field : fields) {_			_			if (field < 0 || field >= type.getArity()) {_				throw new IndexOutOfBoundsException(_						"MinReduceFunction field position " + field + " is out of range.")__			}__			_			if (!type.getTypeAt(field).isKeyType()) {_				throw new java.lang.IllegalArgumentException(_						"MinReduceFunction supports only key(Comparable) types.")__			}__		}_	};constructor,which,is,overwriting,the,default,constructor,param,type,types,of,tuple,whether,to,check,if,given,fields,are,key,types,param,fields,array,of,integers,which,are,used,as,key,for,comparison,the,order,of,indexes,is,regarded,in,the,reduce,function,first,index,has,highest,priority,and,last,index,has,least,priority;public,select,by,max,function,tuple,type,info,t,type,int,fields,this,fields,fields,for,int,field,fields,if,field,0,field,type,get,arity,throw,new,index,out,of,bounds,exception,min,reduce,function,field,position,field,is,out,of,range,if,type,get,type,at,field,is,key,type,throw,new,java,lang,illegal,argument,exception,min,reduce,function,supports,only,key,comparable,types
SelectByMaxFunction -> public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields);1455477986;Constructor which is overwriting the default constructor._@param type Types of tuple whether to check if given fields are key types._@param fields Array of integers which are used as key for comparison. The order of indexes_is regarded in the reduce function. First index has highest priority and last index has_least priority.;public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields) {_		this.fields = fields__		_		_		for (int field : fields) {_			_			if (field < 0 || field >= type.getArity()) {_				throw new IndexOutOfBoundsException(_						"MinReduceFunction field position " + field + " is out of range.")__			}__			_			if (!type.getTypeAt(field).isKeyType()) {_				throw new java.lang.IllegalArgumentException(_						"MinReduceFunction supports only key(Comparable) types.")__			}__		}_	};constructor,which,is,overwriting,the,default,constructor,param,type,types,of,tuple,whether,to,check,if,given,fields,are,key,types,param,fields,array,of,integers,which,are,used,as,key,for,comparison,the,order,of,indexes,is,regarded,in,the,reduce,function,first,index,has,highest,priority,and,last,index,has,least,priority;public,select,by,max,function,tuple,type,info,t,type,int,fields,this,fields,fields,for,int,field,fields,if,field,0,field,type,get,arity,throw,new,index,out,of,bounds,exception,min,reduce,function,field,position,field,is,out,of,range,if,type,get,type,at,field,is,key,type,throw,new,java,lang,illegal,argument,exception,min,reduce,function,supports,only,key,comparable,types
SelectByMaxFunction -> public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields);1500387300;Constructor which is overwriting the default constructor._@param type Types of tuple whether to check if given fields are key types._@param fields Array of integers which are used as key for comparison. The order of indexes_is regarded in the reduce function. First index has highest priority and last index has_least priority.;public SelectByMaxFunction(TupleTypeInfo<T> type, int... fields) {_		this.fields = fields___		_		for (int field : fields) {_			_			if (field < 0 || field >= type.getArity()) {_				throw new IndexOutOfBoundsException(_						"MinReduceFunction field position " + field + " is out of range.")__			}__			_			if (!type.getTypeAt(field).isKeyType()) {_				throw new java.lang.IllegalArgumentException(_						"MinReduceFunction supports only key(Comparable) types.")__			}__		}_	};constructor,which,is,overwriting,the,default,constructor,param,type,types,of,tuple,whether,to,check,if,given,fields,are,key,types,param,fields,array,of,integers,which,are,used,as,key,for,comparison,the,order,of,indexes,is,regarded,in,the,reduce,function,first,index,has,highest,priority,and,last,index,has,least,priority;public,select,by,max,function,tuple,type,info,t,type,int,fields,this,fields,fields,for,int,field,fields,if,field,0,field,type,get,arity,throw,new,index,out,of,bounds,exception,min,reduce,function,field,position,field,is,out,of,range,if,type,get,type,at,field,is,key,type,throw,new,java,lang,illegal,argument,exception,min,reduce,function,supports,only,key,comparable,types
