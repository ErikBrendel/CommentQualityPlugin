commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected Keys<I1> getKeys1() {     return this.keys1. }
false;protected;0;3;;protected Keys<I2> getKeys2() {     return this.keys2. }
false;protected;2;39;;@Override protected org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase<?, ?, OUT, ?> translateToDataFlow(Operator<I1> input1, Operator<I2> input2) {     String name = getName() != null ? getName() : "CoGroup at " + defaultName.     try {         keys1.areCompatible(keys2).     } catch (IncompatibleKeysException e) {         throw new InvalidProgramException("The types of the key fields do not match.", e).     }     if (keys1 instanceof Keys.ExpressionKeys && keys2 instanceof Keys.ExpressionKeys) {         try {             keys1.areCompatible(keys2).         } catch (IncompatibleKeysException e) {             throw new InvalidProgramException("The types of the key fields do not match.", e).         }         int[] logicalKeyPositions1 = keys1.computeLogicalKeyPositions().         int[] logicalKeyPositions2 = keys2.computeLogicalKeyPositions().         CoGroupRawOperatorBase<I1, I2, OUT, CoGroupFunction<I1, I2, OUT>> po = new CoGroupRawOperatorBase<>(function, new BinaryOperatorInformation<>(getInput1Type(), getInput2Type(), getResultType()), logicalKeyPositions1, logicalKeyPositions2, name).         // set inputs         po.setFirstInput(input1).         po.setSecondInput(input2).         // set dop         po.setParallelism(this.getParallelism()).         return po.     } else {         throw new UnsupportedOperationException("Unrecognized or incompatible key types.").     } }
false;protected;0;4;;@Override protected Function getFunction() {     return function. }
