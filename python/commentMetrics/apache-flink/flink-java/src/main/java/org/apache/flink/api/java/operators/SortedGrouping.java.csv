# id;timestamp;commentText;codeText;commentWords;codeWords
SortedGrouping -> public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1405024514;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link GroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see GroupReduceFunction_@see ReduceGroupOperator_@see DataSet;public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		return new ReduceGroupOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,group,reduce,function,see,reduce,group,operator,see,data,set;public,r,reduce,group,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,return,new,reduce,group,operator,t,r,this,reducer
SortedGrouping -> public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1405090423;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link GroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see GroupReduceFunction_@see ReduceGroupOperator_@see DataSet;public <R> ReduceGroupOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		return new ReduceGroupOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,group,reduce,function,see,reduce,group,operator,see,data,set;public,r,reduce,group,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,return,new,reduce,group,operator,t,r,this,reducer
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411555453;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411575674;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1411718446;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1412761141;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1415874087;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1416309577;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421319483;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421341998;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1421341998;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1426698965;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1427300031;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1428086525;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A ReduceGroupOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,reduce,group,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1444400661;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br/>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1446112342;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1449526313;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1453200998;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1453803418;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1453803455;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1454428544;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1454679829;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1462899491;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}.<br>_@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if(n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}_		_		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,br,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public GroupReduceOperator<T, T> first(int n);1500970016;Returns a new set containing the first n elements in this grouped and sorted {@link DataSet}._@param n The desired number of elements for each group._@return A GroupReduceOperator that represents the DataSet containing the elements.;public GroupReduceOperator<T, T> first(int n) {_		if (n < 1) {_			throw new InvalidProgramException("Parameter n of first(n) must be at least 1.")__		}__		return reduceGroup(new FirstReducer<T>(n))__	};returns,a,new,set,containing,the,first,n,elements,in,this,grouped,and,sorted,link,data,set,param,n,the,desired,number,of,elements,for,each,group,return,a,group,reduce,operator,that,represents,the,data,set,containing,the,elements;public,group,reduce,operator,t,t,first,int,n,if,n,1,throw,new,invalid,program,exception,parameter,n,of,first,n,must,be,at,least,1,return,reduce,group,new,first,reducer,t,n
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1427300031;Applies a CombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The CombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1428086525;Applies a CombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The CombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1444400661;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1446112342;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner, this.getDataSet().getType())___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1449526313;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1453200998;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<T, R>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,t,r,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1453803418;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, dataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1453803455;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1454428544;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1454679829;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1462899491;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner);1500970016;Applies a GroupCombineFunction on a grouped {@link DataSet}._A CombineFunction is similar to a GroupReduceFunction but does not perform a full data exchange. Instead, the_CombineFunction calls the combine method once per partition for combining a group of results. This_operator is suitable for combining values into an intermediate format before doing a proper groupReduce where_the data is shuffled across the node for further reduction. The GroupReduce operator can also be supplied with_a combiner by implementing the RichGroupReduce function. The combine method of the RichGroupReduce function_demands input and output type to be the same. The CombineFunction, on the other side, can have an arbitrary_output type._@param combiner The GroupCombineFunction that is applied on the DataSet._@return A GroupCombineOperator which represents the combined DataSet.;public <R> GroupCombineOperator<T, R> combineGroup(GroupCombineFunction<T, R> combiner) {_		if (combiner == null) {_			throw new NullPointerException("GroupCombine function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupCombineReturnTypes(combiner,_				this.getInputDataSet().getType(), Utils.getCallLocationName(), true)___		return new GroupCombineOperator<>(this, resultType, inputDataSet.clean(combiner), Utils.getCallLocationName())__	};applies,a,group,combine,function,on,a,grouped,link,data,set,a,combine,function,is,similar,to,a,group,reduce,function,but,does,not,perform,a,full,data,exchange,instead,the,combine,function,calls,the,combine,method,once,per,partition,for,combining,a,group,of,results,this,operator,is,suitable,for,combining,values,into,an,intermediate,format,before,doing,a,proper,group,reduce,where,the,data,is,shuffled,across,the,node,for,further,reduction,the,group,reduce,operator,can,also,be,supplied,with,a,combiner,by,implementing,the,rich,group,reduce,function,the,combine,method,of,the,rich,group,reduce,function,demands,input,and,output,type,to,be,the,same,the,combine,function,on,the,other,side,can,have,an,arbitrary,output,type,param,combiner,the,group,combine,function,that,is,applied,on,the,data,set,return,a,group,combine,operator,which,represents,the,combined,data,set;public,r,group,combine,operator,t,r,combine,group,group,combine,function,t,r,combiner,if,combiner,null,throw,new,null,pointer,exception,group,combine,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,combine,return,types,combiner,this,get,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,combine,operator,this,result,type,input,data,set,clean,combiner,utils,get,call,location,name
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1416309577;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421319483;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421341998;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1421341998;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1426698965;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1427300031;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1428086525;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1444400661;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1446112342;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1449526313;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1453200998;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1453803418;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1453803455;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1454428544;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1454679829;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1462899491;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)__		_		getKeys().validateCustomPartitioner(partitioner, null)__		_		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner);1500970016;Uses a custom partitioner for the grouping.__@param partitioner The custom partitioner._@return The grouping object itself, to allow for method chaining.;public SortedGrouping<T> withPartitioner(Partitioner<?> partitioner) {_		Preconditions.checkNotNull(partitioner)___		getKeys().validateCustomPartitioner(partitioner, null)___		this.customPartitioner = partitioner__		return this__	};uses,a,custom,partitioner,for,the,grouping,param,partitioner,the,custom,partitioner,return,the,grouping,object,itself,to,allow,for,method,chaining;public,sorted,grouping,t,with,partitioner,partitioner,partitioner,preconditions,check,not,null,partitioner,get,keys,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1406821655;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isSerializedLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		return new GroupReduceOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,serialized,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,return,new,group,reduce,operator,t,r,this,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1406830680;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		return new GroupReduceOperator<T, R>(this, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,return,new,group,reduce,operator,t,r,this,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411372797;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.java.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.java.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,java,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,java,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411372797;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411399886;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411473593;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411555453;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411575674;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		if (FunctionUtils.isLambdaFunction(reducer)) {_			throw new UnsupportedLambdaExpressionException()__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,if,function,utils,is,lambda,function,reducer,throw,new,unsupported,lambda,expression,exception,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1411718446;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1412761141;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer)__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1415874087;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer, Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1416309577;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, reducer, Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421319483;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421341998;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1421341998;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1426698965;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1427300031;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1428086525;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1444400661;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br/>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1446112342;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType())__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName() )__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1449526313;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1453200998;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<T, R>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,t,r,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1453803418;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				this.getDataSet().getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, dataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,this,get,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1453803455;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				inputDataSet.getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1454428544;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				inputDataSet.getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1454679829;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				inputDataSet.getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1462899491;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.<br>_The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				inputDataSet.getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,br,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer);1500970016;Applies a GroupReduce transformation on a grouped and sorted {@link DataSet}.__<p>The transformation calls a {@link org.apache.flink.api.common.functions.RichGroupReduceFunction} for each group of the DataSet._A GroupReduceFunction can iterate over all elements of a group and emit any_number of output elements including none.__@param reducer The GroupReduceFunction that is applied on each group of the DataSet._@return A GroupReduceOperator that represents the reduced DataSet.__@see org.apache.flink.api.common.functions.RichGroupReduceFunction_@see GroupReduceOperator_@see DataSet;public <R> GroupReduceOperator<T, R> reduceGroup(GroupReduceFunction<T, R> reducer) {_		if (reducer == null) {_			throw new NullPointerException("GroupReduce function must not be null.")__		}_		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer,_				inputDataSet.getType(), Utils.getCallLocationName(), true)__		return new GroupReduceOperator<>(this, resultType, inputDataSet.clean(reducer), Utils.getCallLocationName())__	};applies,a,group,reduce,transformation,on,a,grouped,and,sorted,link,data,set,p,the,transformation,calls,a,link,org,apache,flink,api,common,functions,rich,group,reduce,function,for,each,group,of,the,data,set,a,group,reduce,function,can,iterate,over,all,elements,of,a,group,and,emit,any,number,of,output,elements,including,none,param,reducer,the,group,reduce,function,that,is,applied,on,each,group,of,the,data,set,return,a,group,reduce,operator,that,represents,the,reduced,data,set,see,org,apache,flink,api,common,functions,rich,group,reduce,function,see,group,reduce,operator,see,data,set;public,r,group,reduce,operator,t,r,reduce,group,group,reduce,function,t,r,reducer,if,reducer,null,throw,new,null,pointer,exception,group,reduce,function,must,not,be,null,type,information,r,result,type,type,extractor,get,group,reduce,return,types,reducer,input,data,set,get,type,utils,get,call,location,name,true,return,new,group,reduce,operator,this,result,type,input,data,set,clean,reducer,utils,get,call,location,name
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1412761141;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1415874087;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1416309577;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421319483;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1426698965;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1427300031;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1428086525;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1444400661;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1446112342;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1449526313;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1453200998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (! (dataSet.getType() instanceof CompositeType)) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new String[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,string,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1453803418;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, dataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, dataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1453803455;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1454428544;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1454679829;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1462899491;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(String field, Order order);1500970016;Sorts {@link org.apache.flink.api.java.tuple.Tuple} or POJO elements within a group on the specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple or Pojo elements can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortGroup(String, Order)} calls.__@param field The Tuple or Pojo field on which the group is sorted._@param order The Order in which the specified field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(String field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,or,pojo,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,string,order,calls,param,field,the,tuple,or,pojo,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,string,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1405024514;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1405090423;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1406821655;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1406830680;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411372797;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411372797;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411399886;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411473593;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411555453;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411575674;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1411718446;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		int pos__		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		_		int newLength = this.groupSortKeyPositions.length + 1__		this.groupSortKeyPositions = Arrays.copyOf(this.groupSortKeyPositions, newLength)__		this.groupSortOrders = Arrays.copyOf(this.groupSortOrders, newLength)__		pos = newLength - 1__		_		this.groupSortKeyPositions[pos] = field__		this.groupSortOrders[pos] = order__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,int,pos,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,int,new,length,this,group,sort,key,positions,length,1,this,group,sort,key,positions,arrays,copy,of,this,group,sort,key,positions,new,length,this,group,sort,orders,arrays,copy,of,this,group,sort,orders,new,length,pos,new,length,1,this,group,sort,key,positions,pos,field,this,group,sort,orders,pos,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1412761141;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1415874087;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1416309577;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421319483;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1421341998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1426698965;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1427300031;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1428086525;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1444400661;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1446112342;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1449526313;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1453200998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!dataSet.getType().isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= dataSet.getType().getArity()) {_			throw new IllegalArgumentException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		ExpressionKeys<T> ek = new ExpressionKeys<T>(new int[]{field}, dataSet.getType())__		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,data,set,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,data,set,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,expression,keys,t,ek,new,expression,keys,t,new,int,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1453803418;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, dataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, dataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1453803455;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1454428544;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1454679829;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1462899491;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple or Pojo elements can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
SortedGrouping -> public SortedGrouping<T> sortGroup(int field, Order order);1500970016;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group on the specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple or Pojo elements can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public SortedGrouping<T> sortGroup(int field, Order order) {_		if (groupSortSelectorFunctionKey != null) {_			throw new InvalidProgramException("Chaining sortGroup with KeySelector sorting is not supported")__		}_		if (!Keys.ExpressionKeys.isSortKey(field, inputDataSet.getType())) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		ExpressionKeys<T> ek = new ExpressionKeys<>(field, inputDataSet.getType())___		addSortGroupInternal(ek, order)__		return this__	};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,or,pojo,elements,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,sorted,grouping,t,sort,group,int,field,order,order,if,group,sort,selector,function,key,null,throw,new,invalid,program,exception,chaining,sort,group,with,key,selector,sorting,is,not,supported,if,keys,expression,keys,is,sort,key,field,input,data,set,get,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,expression,keys,t,ek,new,expression,keys,field,input,data,set,get,type,add,sort,group,internal,ek,order,return,this
