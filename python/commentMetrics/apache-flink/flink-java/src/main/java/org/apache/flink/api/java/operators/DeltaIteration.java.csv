# id;timestamp;commentText;codeText;commentWords;codeWords
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1412336525;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1427097830;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1431696388;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1454428544;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1454679829;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1455101486;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1460563153;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1462899491;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1477046030;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1488304750;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1488304750;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1489671807;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public void setSolutionSetUnManaged(boolean solutionSetUnManaged);1500970016;Sets whether to keep the solution set in managed memory (safe against heap exhaustion) or unmanaged memory_(objects on heap).__@param solutionSetUnManaged True to keep the solution set in unmanaged memory, false to keep it in managed memory.__@see #isSolutionSetUnManaged();public void setSolutionSetUnManaged(boolean solutionSetUnManaged) {_		this.solutionSetUnManaged = solutionSetUnManaged__	};sets,whether,to,keep,the,solution,set,in,managed,memory,safe,against,heap,exhaustion,or,unmanaged,memory,objects,on,heap,param,solution,set,un,managed,true,to,keep,the,solution,set,in,unmanaged,memory,false,to,keep,it,in,managed,memory,see,is,solution,set,un,managed;public,void,set,solution,set,un,managed,boolean,solution,set,un,managed,this,solution,set,un,managed,solution,set,un,managed
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1411372797;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1411399886;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1411473593;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1412336525;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1427097830;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1431696388;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1454428544;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1454679829;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1455101486;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1460563153;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1462899491;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1477046030;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1488304750;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1488304750;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1489671807;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> name(String name);1500970016;Sets the name for the iteration. The name is displayed in logs and messages.__@param name The name for the iteration._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> name(String name) {_		this.name = name__		return this__	};sets,the,name,for,the,iteration,the,name,is,displayed,in,logs,and,messages,param,name,the,name,for,the,iteration,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,name,string,name,this,name,name,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1411372797;Sets the degree of parallelism for the iteration.__@param parallelism The degree of parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Validate.isTrue(parallelism > 0 || parallelism == -1, "The degree of parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,degree,of,parallelism,for,the,iteration,param,parallelism,the,degree,of,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,validate,is,true,parallelism,0,parallelism,1,the,degree,of,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1411399886;Sets the degree of parallelism for the iteration.__@param parallelism The degree of parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Validate.isTrue(parallelism > 0 || parallelism == -1, "The degree of parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,degree,of,parallelism,for,the,iteration,param,parallelism,the,degree,of,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,validate,is,true,parallelism,0,parallelism,1,the,degree,of,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1411473593;Sets the degree of parallelism for the iteration.__@param parallelism The degree of parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Validate.isTrue(parallelism > 0 || parallelism == -1, "The degree of parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,degree,of,parallelism,for,the,iteration,param,parallelism,the,degree,of,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,validate,is,true,parallelism,0,parallelism,1,the,degree,of,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1412336525;Sets the degree of parallelism for the iteration.__@param parallelism The degree of parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Validate.isTrue(parallelism > 0 || parallelism == -1, "The degree of parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,degree,of,parallelism,for,the,iteration,param,parallelism,the,degree,of,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,validate,is,true,parallelism,0,parallelism,1,the,degree,of,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1427097830;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Validate.isTrue(parallelism > 0 || parallelism == -1, "The parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,validate,is,true,parallelism,0,parallelism,1,the,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1431696388;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == -1, "The parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,1,the,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1454428544;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == -1, "The parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,1,the,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1454679829;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == -1, "The parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,1,the,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1455101486;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == -1, "The parallelism must be positive, or -1 (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,1,the,parallelism,must,be,positive,or,1,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1460563153;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1462899491;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1477046030;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1488304750;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1488304750;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1489671807;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DeltaIteration<ST, WT> parallelism(int parallelism);1500970016;Sets the parallelism for the iteration.__@param parallelism The parallelism._@return The iteration object, for function call chaining.;public DeltaIteration<ST, WT> parallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT (use default).")__		this.parallelism = parallelism__		return this__	};sets,the,parallelism,for,the,iteration,param,parallelism,the,parallelism,return,the,iteration,object,for,function,call,chaining;public,delta,iteration,st,wt,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,positive,or,execution,config,use,default,this,parallelism,parallelism,return,this
DeltaIteration -> public DataSet<WT> getInitialWorkset();1411372797;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1411399886;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1411473593;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1412336525;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1427097830;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1431696388;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1454428544;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1454679829;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1455101486;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1460563153;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1462899491;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1477046030;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1488304750;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1488304750;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1489671807;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public DataSet<WT> getInitialWorkset();1500970016;Gets the initial workset. This is the data set passed to the method that starts the delta_iteration.__<p>Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>worksetData</tt> would be the data set returned by {@code iteration.getInitialWorkset()_}.__@return The data set that forms the initial workset.;public DataSet<WT> getInitialWorkset() {_		return initialWorkset__	};gets,the,initial,workset,this,is,the,data,set,passed,to,the,method,that,starts,the,delta,iteration,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,workset,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,workset,return,the,data,set,that,forms,the,initial,workset;public,data,set,wt,get,initial,workset,return,initial,workset
DeltaIteration -> public boolean isSolutionSetUnManaged();1412336525;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1427097830;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1431696388;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1454428544;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1454679829;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1455101486;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1460563153;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1462899491;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1477046030;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1488304750;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1488304750;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1489671807;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> public boolean isSolutionSetUnManaged();1500970016;gets whether the solution set is in managed or unmanaged memory.__@return True, if the solution set is in unmanaged memory (object heap), false if in managed memory.__@see #setSolutionSetUnManaged(boolean);public boolean isSolutionSetUnManaged() {_		return solutionSetUnManaged__	};gets,whether,the,solution,set,is,in,managed,or,unmanaged,memory,return,true,if,the,solution,set,is,in,unmanaged,memory,object,heap,false,if,in,managed,memory,see,set,solution,set,un,managed,boolean;public,boolean,is,solution,set,un,managed,return,solution,set,un,managed
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1455101486;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1460563153;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1462899491;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1477046030;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1488304750;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1488304750;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1489671807;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1500970016;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration.__<p>Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public ResourceSpec getPreferredResources();1488304750;Gets the preferred resources from this iteration. If no preferred resources have been set,_it returns the default empty resource.__@return The preferred resources of the iteration.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};gets,the,preferred,resources,from,this,iteration,if,no,preferred,resources,have,been,set,it,returns,the,default,empty,resource,return,the,preferred,resources,of,the,iteration;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DeltaIteration -> @PublicEvolving 	public ResourceSpec getPreferredResources();1489671807;Gets the preferred resources from this iteration. If no preferred resources have been set,_it returns the default empty resource.__@return The preferred resources of the iteration.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};gets,the,preferred,resources,from,this,iteration,if,no,preferred,resources,have,been,set,it,returns,the,default,empty,resource,return,the,preferred,resources,of,the,iteration;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DeltaIteration -> @PublicEvolving 	public ResourceSpec getPreferredResources();1500970016;Gets the preferred resources from this iteration. If no preferred resources have been set,_it returns the default empty resource.__@return The preferred resources of the iteration.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};gets,the,preferred,resources,from,this,iteration,if,no,preferred,resources,have,been,set,it,returns,the,default,empty,resource,return,the,preferred,resources,of,the,iteration;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DeltaIteration -> private DeltaIteration<ST, WT> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for the iteration. This overrides the default resources._The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for the iteration._@param preferredResources The preferred resources for the iteration._@return The iteration with set minimum and preferred resources.;private DeltaIteration<ST, WT> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		this.minResources = minResources__		this.preferredResources = preferredResources___		return this__	};sets,the,minimum,and,preferred,resources,for,the,iteration,this,overrides,the,default,resources,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,the,iteration,param,preferred,resources,the,preferred,resources,for,the,iteration,return,the,iteration,with,set,minimum,and,preferred,resources;private,delta,iteration,st,wt,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,this,min,resources,min,resources,this,preferred,resources,preferred,resources,return,this
DeltaIteration -> private DeltaIteration<ST, WT> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1500970016;Sets the minimum and preferred resources for the iteration. This overrides the default resources._The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.__@param minResources The minimum resources for the iteration._@param preferredResources The preferred resources for the iteration._@return The iteration with set minimum and preferred resources.;private DeltaIteration<ST, WT> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		this.minResources = minResources__		this.preferredResources = preferredResources___		return this__	};sets,the,minimum,and,preferred,resources,for,the,iteration,this,overrides,the,default,resources,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,the,iteration,param,preferred,resources,the,preferred,resources,for,the,iteration,return,the,iteration,with,set,minimum,and,preferred,resources;private,delta,iteration,st,wt,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,this,min,resources,min,resources,this,preferred,resources,preferred,resources,return,this
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1411372797;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1411399886;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1411473593;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1412336525;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1427097830;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1431696388;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1454428544;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1454679829;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1455101486;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1460563153;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1462899491;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1477046030;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1488304750;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1488304750;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1489671807;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public SolutionSetPlaceHolder<ST> getSolutionSet();1500970016;Gets the solution set of the delta iteration. The solution set represents the state that is kept across iterations.__@return The solution set of the delta iteration.;public SolutionSetPlaceHolder<ST> getSolutionSet() {_		return solutionSetPlaceholder__	};gets,the,solution,set,of,the,delta,iteration,the,solution,set,represents,the,state,that,is,kept,across,iterations,return,the,solution,set,of,the,delta,iteration;public,solution,set,place,holder,st,get,solution,set,return,solution,set,placeholder
DeltaIteration -> public int getParallelism();1411372797;Gets the iteration's degree of parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,degree,of,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1411399886;Gets the iteration's degree of parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,degree,of,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1411473593;Gets the iteration's degree of parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,degree,of,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1412336525;Gets the iteration's degree of parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,degree,of,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1427097830;Gets the iteration's parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1431696388;Gets the iteration's parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1454428544;Gets the iteration's parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1454679829;Gets the iteration's parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1455101486;Gets the iteration's parallelism.__@return The iterations parallelism, or -1, if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iterations,parallelism,or,1,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1460563153;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1462899491;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1477046030;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1488304750;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1488304750;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1489671807;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public int getParallelism();1500970016;Gets the iteration's parallelism.__@return The iteration's parallelism, or {@link ExecutionConfig#PARALLELISM_DEFAULT} if not set.;public int getParallelism() {_		return parallelism__	};gets,the,iteration,s,parallelism,return,the,iteration,s,parallelism,or,link,execution,config,if,not,set;public,int,get,parallelism,return,parallelism
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1411372797;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1411399886;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1411473593;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1412336525;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1427097830;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1431696388;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator);1454428544;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The DeltaIteration itself, to allow chaining function calls.;public DeltaIteration<ST, WT> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,delta,iteration,st,wt,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
DeltaIteration -> @PublicEvolving 	public ResourceSpec getMinResources();1488304750;Gets the minimum resources from this iteration. If no minimum resources have been set,_it returns the default empty resource.__@return The minimum resources of the iteration.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};gets,the,minimum,resources,from,this,iteration,if,no,minimum,resources,have,been,set,it,returns,the,default,empty,resource,return,the,minimum,resources,of,the,iteration;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DeltaIteration -> @PublicEvolving 	public ResourceSpec getMinResources();1489671807;Gets the minimum resources from this iteration. If no minimum resources have been set,_it returns the default empty resource.__@return The minimum resources of the iteration.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};gets,the,minimum,resources,from,this,iteration,if,no,minimum,resources,have,been,set,it,returns,the,default,empty,resource,return,the,minimum,resources,of,the,iteration;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DeltaIteration -> @PublicEvolving 	public ResourceSpec getMinResources();1500970016;Gets the minimum resources from this iteration. If no minimum resources have been set,_it returns the default empty resource.__@return The minimum resources of the iteration.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};gets,the,minimum,resources,from,this,iteration,if,no,minimum,resources,have,been,set,it,returns,the,default,empty,resource,return,the,minimum,resources,of,the,iteration;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1411372797;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1411399886;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1411473593;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1412336525;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1427097830;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1431696388;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1454428544;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1454679829;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1455101486;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1460563153;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1462899491;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1477046030;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1488304750;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1488304750;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1489671807;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset);1500970016;Closes the delta iteration. This method defines the end of the delta iteration's function.__@param solutionSetDelta The delta for the solution set. The delta will be merged into the solution set at the end of_each iteration._@param newWorkset The new workset (feedback data set) that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterateDelta(DataSet, int, int...);public DataSet<ST> closeWith(DataSet<ST> solutionSetDelta, DataSet<WT> newWorkset) {_		return new DeltaIterationResultSet<ST, WT>(initialSolutionSet.getExecutionEnvironment(),_				initialSolutionSet.getType(), initialWorkset.getType(), this, solutionSetDelta, newWorkset, keys, maxIterations)__	};closes,the,delta,iteration,this,method,defines,the,end,of,the,delta,iteration,s,function,param,solution,set,delta,the,delta,for,the,solution,set,the,delta,will,be,merged,into,the,solution,set,at,the,end,of,each,iteration,param,new,workset,the,new,workset,feedback,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,delta,data,set,int,int;public,data,set,st,close,with,data,set,st,solution,set,delta,data,set,wt,new,workset,return,new,delta,iteration,result,set,st,wt,initial,solution,set,get,execution,environment,initial,solution,set,get,type,initial,workset,get,type,this,solution,set,delta,new,workset,keys,max,iterations
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1411372797;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1411399886;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1411473593;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1412336525;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1427097830;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1431696388;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1454428544;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1454679829;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1455101486;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1460563153;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1462899491;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1477046030;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1488304750;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1488304750;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1489671807;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> public WorksetPlaceHolder<WT> getWorkset();1500970016;Gets the working set of the delta iteration. The working set is constructed by the previous iteration.__@return The working set of the delta iteration.;public WorksetPlaceHolder<WT> getWorkset() {_		return worksetPlaceholder__	};gets,the,working,set,of,the,delta,iteration,the,working,set,is,constructed,by,the,previous,iteration,return,the,working,set,of,the,delta,iteration;public,workset,place,holder,wt,get,workset,return,workset,placeholder
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1455101486;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1460563153;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1462899491;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1477046030;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1488304750;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1488304750;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1489671807;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> @PublicEvolving 	public AggregatorRegistry getAggregators();1500970016;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1411372797;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1411399886;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1411473593;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1412336525;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1427097830;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1431696388;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> public AggregatorRegistry getAggregators();1454428544;Gets the registry for aggregators for the iteration.__@return The registry with all aggregators.;public AggregatorRegistry getAggregators() {_		return this.aggregators__	};gets,the,registry,for,aggregators,for,the,iteration,return,the,registry,with,all,aggregators;public,aggregator,registry,get,aggregators,return,this,aggregators
DeltaIteration -> private DeltaIteration<ST, WT> setResources(ResourceSpec resources);1489671807;Sets the resources for the iteration, and the minimum and preferred resources are the same by default._The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.__@param resources The resources for the iteration._@return The iteration with set minimum and preferred resources.;private DeltaIteration<ST, WT> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		this.minResources = resources__		this.preferredResources = resources___		return this__	};sets,the,resources,for,the,iteration,and,the,minimum,and,preferred,resources,are,the,same,by,default,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,resources,the,resources,for,the,iteration,return,the,iteration,with,set,minimum,and,preferred,resources;private,delta,iteration,st,wt,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,this,min,resources,resources,this,preferred,resources,resources,return,this
DeltaIteration -> private DeltaIteration<ST, WT> setResources(ResourceSpec resources);1500970016;Sets the resources for the iteration, and the minimum and preferred resources are the same by default._The lower and upper resource limits will be considered in dynamic resource resize feature for future plan.__@param resources The resources for the iteration._@return The iteration with set minimum and preferred resources.;private DeltaIteration<ST, WT> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		this.minResources = resources__		this.preferredResources = resources___		return this__	};sets,the,resources,for,the,iteration,and,the,minimum,and,preferred,resources,are,the,same,by,default,the,lower,and,upper,resource,limits,will,be,considered,in,dynamic,resource,resize,feature,for,future,plan,param,resources,the,resources,for,the,iteration,return,the,iteration,with,set,minimum,and,preferred,resources;private,delta,iteration,st,wt,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,this,min,resources,resources,this,preferred,resources,resources,return,this
DeltaIteration -> public String getName();1411372797;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1411399886;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1411473593;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1412336525;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1427097830;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1431696388;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1454428544;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1454679829;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1455101486;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1460563153;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1462899491;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1477046030;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1488304750;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1488304750;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1489671807;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> public String getName();1500970016;Gets the name from this iteration.__@return The name of the iteration.;public String getName() {_		return name__	};gets,the,name,from,this,iteration,return,the,name,of,the,iteration;public,string,get,name,return,name
DeltaIteration -> @PublicEvolving 	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1477046030;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decides whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decides,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,delta,iteration,st,wt,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
DeltaIteration -> @PublicEvolving 	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1488304750;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decides whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decides,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,delta,iteration,st,wt,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
DeltaIteration -> @PublicEvolving 	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1488304750;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decides whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decides,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,delta,iteration,st,wt,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
DeltaIteration -> @PublicEvolving 	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1489671807;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decides whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decides,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,delta,iteration,st,wt,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
DeltaIteration -> @PublicEvolving 	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1500970016;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decides whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The DeltaIteration itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> DeltaIteration<ST, WT> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck) {_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decides,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,delta,iteration,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,delta,iteration,st,wt,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1411372797;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1411399886;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1411473593;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1412336525;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1427097830;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1431696388;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1454428544;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1454679829;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1455101486;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1460563153;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1462899491;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1477046030;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1488304750;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1488304750;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1489671807;Gets the initial solution set. This is the data set on which the delta iteration was started._<p>_Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
DeltaIteration -> public DataSet<ST> getInitialSolutionSet();1500970016;Gets the initial solution set. This is the data set on which the delta iteration was started.__<p>Consider the following example:_<pre>_{@code_DataSet<MyType> solutionSetData = ...__DataSet<AnotherType> worksetData = ...___DeltaIteration<MyType, AnotherType> iteration = solutionSetData.iteratorDelta(worksetData, 10, ...)___</pre>_The <tt>solutionSetData</tt> would be the data set returned by {@code iteration.getInitialSolutionSet()_}.__@return The data set that forms the initial solution set.;public DataSet<ST> getInitialSolutionSet() {_		return initialSolutionSet__	};gets,the,initial,solution,set,this,is,the,data,set,on,which,the,delta,iteration,was,started,p,consider,the,following,example,pre,code,data,set,my,type,solution,set,data,data,set,another,type,workset,data,delta,iteration,my,type,another,type,iteration,solution,set,data,iterator,delta,workset,data,10,pre,the,tt,solution,set,data,tt,would,be,the,data,set,returned,by,code,iteration,get,initial,solution,set,return,the,data,set,that,forms,the,initial,solution,set;public,data,set,st,get,initial,solution,set,return,initial,solution,set
