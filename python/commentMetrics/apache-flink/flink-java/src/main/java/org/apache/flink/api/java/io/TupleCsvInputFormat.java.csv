commented;modifiers;parameterAmount;loc;comment;code
false;private;4;24;;private void configure(String lineDelimiter, String fieldDelimiter, TupleTypeInfoBase<OUT> tupleTypeInfo, boolean[] includedFieldsMask) {     if (tupleTypeInfo.getArity() == 0) {         throw new IllegalArgumentException("Tuple size must be greater than 0.").     }     if (includedFieldsMask == null) {         includedFieldsMask = createDefaultMask(tupleTypeInfo.getArity()).     }     tupleSerializer = (TupleSerializerBase<OUT>) tupleTypeInfo.createSerializer(new ExecutionConfig()).     setDelimiter(lineDelimiter).     setFieldDelimiter(fieldDelimiter).     Class<?>[] classes = new Class<?>[tupleTypeInfo.getArity()].     for (int i = 0. i < tupleTypeInfo.getArity(). i++) {         classes[i] = tupleTypeInfo.getTypeAt(i).getTypeClass().     }     setFieldsGeneric(includedFieldsMask, classes). }
false;public;2;4;;@Override public OUT fillRecord(OUT reuse, Object[] parsedValues) {     return tupleSerializer.createOrReuseInstance(parsedValues, reuse). }
