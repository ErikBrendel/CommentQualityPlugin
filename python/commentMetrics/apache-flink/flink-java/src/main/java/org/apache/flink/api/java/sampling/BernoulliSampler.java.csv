commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public boolean hasNext() {     if (current == null) {         current = getNextSampledElement().     }     return current != null. }
false;public;0;11;;@Override public T next() {     if (current == null) {         return getNextSampledElement().     } else {         T result = current.         current = null.         return result.     } }
false;private;0;31;;private T getNextSampledElement() {     if (fraction <= THRESHOLD) {         double rand = random.nextDouble().         double u = Math.max(rand, EPSILON).         int gap = (int) (Math.log(u) / Math.log(1 - fraction)).         int elementCount = 0.         if (input.hasNext()) {             T element = input.next().             while (input.hasNext() && elementCount < gap) {                 element = input.next().                 elementCount++.             }             if (elementCount < gap) {                 return null.             } else {                 return element.             }         } else {             return null.         }     } else {         while (input.hasNext()) {             T element = input.next().             if (random.nextDouble() <= fraction) {                 return element.             }         }         return null.     } }
true;public;1;63;/**  * Sample the input elements, for each input element, take a Bernoulli trail for sampling.  *  * @param input Elements to be sampled.  * @return The sampled result which is lazy computed upon input elements.  */ ;/**  * Sample the input elements, for each input element, take a Bernoulli trail for sampling.  *  * @param input Elements to be sampled.  * @return The sampled result which is lazy computed upon input elements.  */ @Override public Iterator<T> sample(final Iterator<T> input) {     if (fraction == 0) {         return emptyIterable.     }     return new SampledIterator<T>() {          T current = null.          @Override         public boolean hasNext() {             if (current == null) {                 current = getNextSampledElement().             }             return current != null.         }          @Override         public T next() {             if (current == null) {                 return getNextSampledElement().             } else {                 T result = current.                 current = null.                 return result.             }         }          private T getNextSampledElement() {             if (fraction <= THRESHOLD) {                 double rand = random.nextDouble().                 double u = Math.max(rand, EPSILON).                 int gap = (int) (Math.log(u) / Math.log(1 - fraction)).                 int elementCount = 0.                 if (input.hasNext()) {                     T element = input.next().                     while (input.hasNext() && elementCount < gap) {                         element = input.next().                         elementCount++.                     }                     if (elementCount < gap) {                         return null.                     } else {                         return element.                     }                 } else {                     return null.                 }             } else {                 while (input.hasNext()) {                     T element = input.next().                     if (random.nextDouble() <= fraction) {                         return element.                     }                 }                 return null.             }         }     }. }
