commented;modifiers;parameterAmount;loc;comment;code
false;public;1;29;;@Override public Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input) {     if (numSamples == 0) {         return emptyIntermediateIterable.     }     // This queue holds fixed number elements with the top K weight for current partition.     PriorityQueue<IntermediateSampleData<T>> queue = new PriorityQueue<IntermediateSampleData<T>>(numSamples).     int index = 0.     IntermediateSampleData<T> smallest = null.     while (input.hasNext()) {         T element = input.next().         if (index < numSamples) {             // Fill the queue with first K elements from input.             queue.add(new IntermediateSampleData<T>(random.nextDouble(), element)).             smallest = queue.peek().         } else {             double rand = random.nextDouble().             // Remove the element with the smallest weight, and append current element into the queue.             if (rand > smallest.getWeight()) {                 queue.remove().                 queue.add(new IntermediateSampleData<T>(rand, element)).                 smallest = queue.peek().             }         }         index++.     }     return queue.iterator(). }
