commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Gets the input format that is executed by this data source.  *  * @return The input format that is executed by this data source.  */ ;/**  * Gets the input format that is executed by this data source.  *  * @return The input format that is executed by this data source.  */ @Internal public InputFormat<OUT, ?> getInputFormat() {     return this.inputFormat. }
true;public;1;4;/**  * Pass a configuration to the InputFormat.  * @param parameters Configuration parameters  */ ;/**  * Pass a configuration to the InputFormat.  * @param parameters Configuration parameters  */ public DataSource<OUT> withParameters(Configuration parameters) {     this.parameters = parameters.     return this. }
true;public;0;3;/**  * @return Configuration for the InputFormat.  */ ;/**  * @return Configuration for the InputFormat.  */ public Configuration getParameters() {     return this.parameters. }
true;public;0;7;/**  * Returns the {@link org.apache.flink.api.java.io.SplitDataProperties} for the  * {@link org.apache.flink.core.io.InputSplit}s of this DataSource  * for configurations.  *  * <p>SplitDataProperties can help to generate more efficient execution plans.  *  * <p><b>  *     IMPORTANT: Incorrect configuration of SplitDataProperties can cause wrong results!  * </b>  *  * @return The SplitDataProperties for the InputSplits of this DataSource.  */ ;/**  * Returns the {@link org.apache.flink.api.java.io.SplitDataProperties} for the  * {@link org.apache.flink.core.io.InputSplit}s of this DataSource  * for configurations.  *  * <p>SplitDataProperties can help to generate more efficient execution plans.  *  * <p><b>  *     IMPORTANT: Incorrect configuration of SplitDataProperties can cause wrong results!  * </b>  *  * @return The SplitDataProperties for the InputSplits of this DataSource.  */ @PublicEvolving public SplitDataProperties<OUT> getSplitDataProperties() {     if (this.splitDataProperties == null) {         this.splitDataProperties = new SplitDataProperties<OUT>(this).     }     return this.splitDataProperties. }
false;protected;0;18;;// -------------------------------------------------------------------------------------------- protected GenericDataSourceBase<OUT, ?> translateToDataFlow() {     String name = this.name != null ? this.name : "at " + dataSourceLocationName + " (" + inputFormat.getClass().getName() + ")".     if (name.length() > 150) {         name = name.substring(0, 150).     }     @SuppressWarnings({ "unchecked", "rawtypes" })     GenericDataSourceBase<OUT, ?> source = new GenericDataSourceBase(this.inputFormat, new OperatorInformation<OUT>(getType()), name).     source.setParallelism(parallelism).     if (this.parameters != null) {         source.getParameters().addAll(this.parameters).     }     if (this.splitDataProperties != null) {         source.setSplitDataProperties(this.splitDataProperties).     }     return source. }
