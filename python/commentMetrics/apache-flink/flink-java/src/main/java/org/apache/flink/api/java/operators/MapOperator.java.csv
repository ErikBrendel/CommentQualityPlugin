commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MapFunction<IN, OUT> getFunction() {     return function. }
false;protected;1;20;;@Override protected MapOperatorBase<IN, OUT, MapFunction<IN, OUT>> translateToDataFlow(Operator<IN> input) {     String name = getName() != null ? getName() : "Map at " + defaultName.     // create operator     MapOperatorBase<IN, OUT, MapFunction<IN, OUT>> po = new MapOperatorBase<IN, OUT, MapFunction<IN, OUT>>(function, new UnaryOperatorInformation<IN, OUT>(getInputType(), getResultType()), name).     // set input     po.setInput(input).     // set parallelism     if (this.getParallelism() > 0) {         // use specified parallelism         po.setParallelism(this.getParallelism()).     } else {         // if no parallelism has been specified, use parallelism of input operator to enable chaining         po.setParallelism(input.getParallelism()).     }     return po. }
