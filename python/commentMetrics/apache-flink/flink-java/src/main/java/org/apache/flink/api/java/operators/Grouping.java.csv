commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that  * if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the  * following snippet:  * <pre>{@code  * DataSet<X> notGrouped = input.groupBy().getDataSet().  * DataSet<Y> allReduced = notGrouped.reduce()  * }</pre>  * the {@code groupBy()} is as if it never happened, as the {@code notGrouped} DataSet corresponds  * to the input of the {@code groupBy()} (because of the {@code getDataset()}).  */ ;/**  * Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that  * if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the  * following snippet:  * <pre>{@code  * DataSet<X> notGrouped = input.groupBy().getDataSet().  * DataSet<Y> allReduced = notGrouped.reduce()  * }</pre>  * the {@code groupBy()} is as if it never happened, as the {@code notGrouped} DataSet corresponds  * to the input of the {@code groupBy()} (because of the {@code getDataset()}).  */ @Internal public DataSet<T> getInputDataSet() {     return this.inputDataSet. }
false;public;0;4;;@Internal public Keys<T> getKeys() {     return this.keys. }
true;public;0;4;/**  * Gets the custom partitioner to be used for this grouping, or {@code null}, if  * none was defined.  *  * @return The custom partitioner to be used for this grouping.  */ ;/**  * Gets the custom partitioner to be used for this grouping, or {@code null}, if  * none was defined.  *  * @return The custom partitioner to be used for this grouping.  */ @Internal public Partitioner<?> getCustomPartitioner() {     return this.customPartitioner. }
