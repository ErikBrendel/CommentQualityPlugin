commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the data set that this operation uses as its first input.  *  * @return The data set that this operation uses as its first input.  */ ;/**  * Gets the data set that this operation uses as its first input.  *  * @return The data set that this operation uses as its first input.  */ public DataSet<IN1> getInput1() {     return this.input1. }
true;public;0;3;/**  * Gets the data set that this operation uses as its second input.  *  * @return The data set that this operation uses as its second input.  */ ;/**  * Gets the data set that this operation uses as its second input.  *  * @return The data set that this operation uses as its second input.  */ public DataSet<IN2> getInput2() {     return this.input2. }
true;public;0;3;/**  * Gets the type information of the data type of the first input data set.  * This method returns equivalent information as {@code getInput1().getType()}.  *  * @return The first input data type.  */ ;/**  * Gets the type information of the data type of the first input data set.  * This method returns equivalent information as {@code getInput1().getType()}.  *  * @return The first input data type.  */ public TypeInformation<IN1> getInput1Type() {     return this.input1.getType(). }
true;public;0;3;/**  * Gets the type information of the data type of the second input data set.  * This method returns equivalent information as {@code getInput2().getType()}.  *  * @return The second input data type.  */ ;/**  * Gets the type information of the data type of the second input data set.  * This method returns equivalent information as {@code getInput2().getType()}.  *  * @return The second input data type.  */ public TypeInformation<IN2> getInput2Type() {     return this.input2.getType(). }
true;protected,abstract;2;2;/**  * Translates this java API operator into a common API operator with two inputs.  *  * @param input1 The first input of the operation, as a common API operator.  * @param input2 The second input of the operation, as a common API operator.  * @return The created common API operator.  */ ;/**  * Translates this java API operator into a common API operator with two inputs.  *  * @param input1 The first input of the operation, as a common API operator.  * @param input2 The second input of the operation, as a common API operator.  * @return The created common API operator.  */ protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow(org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2).
