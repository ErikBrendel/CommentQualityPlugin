# id;timestamp;commentText;codeText;commentWords;codeWords
TwoInputOperator -> public DataSet<IN1> getInput1();1405024514;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1405090423;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1411399886;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1411473593;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1424692952;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1454679829;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1474380620;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN1> getInput1();1500970016;Gets the data set that this operation uses as its first input.__@return The data set that this operation uses as its first input.;public DataSet<IN1> getInput1() {_		return this.input1__	};gets,the,data,set,that,this,operation,uses,as,its,first,input,return,the,data,set,that,this,operation,uses,as,its,first,input;public,data,set,in1,get,input1,return,this,input1
TwoInputOperator -> public DataSet<IN2> getInput2();1405024514;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1405090423;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1411399886;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1411473593;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1424692952;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1454679829;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1474380620;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public DataSet<IN2> getInput2();1500970016;Gets the data set that this operation uses as its second input.__@return The data set that this operation uses as its second input.;public DataSet<IN2> getInput2() {_		return this.input2__	};gets,the,data,set,that,this,operation,uses,as,its,second,input,return,the,data,set,that,this,operation,uses,as,its,second,input;public,data,set,in2,get,input2,return,this,input2
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1405024514;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1405090423;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1411399886;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1411473593;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1424692952;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1454679829;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1474380620;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> public TypeInformation<IN1> getInput1Type();1500970016;Gets the type information of the data type of the first input data set._This method returns equivalent information as {@code getInput1().getType()}.__@return The first input data type.;public TypeInformation<IN1> getInput1Type() {_		return this.input1.getType()__	};gets,the,type,information,of,the,data,type,of,the,first,input,data,set,this,method,returns,equivalent,information,as,code,get,input1,get,type,return,the,first,input,data,type;public,type,information,in1,get,input1type,return,this,input1,get,type
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1424692952;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1454679829;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1474380620;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1500970016;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.Operator<OUT> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1405024514;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1405090423;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1411399886;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1411473593;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1424692952;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1454679829;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1474380620;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> public TypeInformation<IN2> getInput2Type();1500970016;Gets the type information of the data type of the second input data set._This method returns equivalent information as {@code getInput2().getType()}.__@return The second input data type.;public TypeInformation<IN2> getInput2Type() {_		return this.input2.getType()__	};gets,the,type,information,of,the,data,type,of,the,second,input,data,set,this,method,returns,equivalent,information,as,code,get,input2,get,type,return,the,second,input,data,type;public,type,information,in2,get,input2type,return,this,input2,get,type
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1405024514;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,dual,input,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1405090423;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,dual,input,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1411399886;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,dual,input,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
TwoInputOperator -> protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow( 			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;1411473593;Translates this java API operator into a common API operator with two inputs.__@param input1 The first input of the operation, as a common API operator._@param input2 The second input of the operation, as a common API operator._@return The created common API operator.;protected abstract org.apache.flink.api.common.operators.DualInputOperator<?, ?, OUT, ?> translateToDataFlow(_			org.apache.flink.api.common.operators.Operator<IN1> input1, org.apache.flink.api.common.operators.Operator<IN2> input2)_;translates,this,java,api,operator,into,a,common,api,operator,with,two,inputs,param,input1,the,first,input,of,the,operation,as,a,common,api,operator,param,input2,the,second,input,of,the,operation,as,a,common,api,operator,return,the,created,common,api,operator;protected,abstract,org,apache,flink,api,common,operators,dual,input,operator,out,translate,to,data,flow,org,apache,flink,api,common,operators,operator,in1,input1,org,apache,flink,api,common,operators,operator,in2,input2
