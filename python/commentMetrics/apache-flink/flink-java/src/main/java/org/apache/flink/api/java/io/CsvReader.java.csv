# id;timestamp;commentText;codeText;commentWords;codeWords
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 9-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8)__		CsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> inputFormat = new TupleCsvInputFormat<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,9,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,input,format,new,tuple,csv,input,format,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 11-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10)__		CsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> inputFormat = new TupleCsvInputFormat<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,11,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,input,format,new,tuple,csv,input,format,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1418398862;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1422280244;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1423131458;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1427312339;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1431696388;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1437137436;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1440672039;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1442481573;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1447879320;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1454679829;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1455101486;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1462899491;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1481219256;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1481228508;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1491417674;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}_		_		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1501511872;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}__		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1511347989;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}__		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public CsvReader ignoreComments(String commentPrefix);1526993136;Configures the string that starts comments._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreComments(String commentPrefix) {_		if (commentPrefix == null || commentPrefix.length() == 0) {_			throw new IllegalArgumentException("The comment prefix must not be null or an empty string")__		}__		this.commentPrefix = commentPrefix__		return this__	};configures,the,string,that,starts,comments,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,comments,string,comment,prefix,if,comment,prefix,null,comment,prefix,length,0,throw,new,illegal,argument,exception,the,comment,prefix,must,not,be,null,or,an,empty,string,this,comment,prefix,comment,prefix,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 18-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17)__		CsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> inputFormat = new TupleCsvInputFormat<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,18,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,input,format,new,tuple,csv,input,format,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader includeFields(String mask);1405024514;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1405090423;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1411473593;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1415874087;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1418225395;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1418398862;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1422280244;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1423131458;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1427312339;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1431696388;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1437137436;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1440672039;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1442481573;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1447879320;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1454679829;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1455101486;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1462899491;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1481219256;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1481228508;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1491417674;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]__		_		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}_		_		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1501511872;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]___		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}__		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1511347989;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]___		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}__		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public CsvReader includeFields(String mask);1526993136;Configures which fields of the CSV file should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(String mask) {_		boolean[] includedMask = new boolean[mask.length()]___		for (int i = 0_ i < mask.length()_ i++) {_			char c = mask.charAt(i)__			if (c == '1' || c == 'T' || c == 't') {_				includedMask[i] = true__			} else if (c != '0' && c != 'F' && c != 'f') {_				throw new IllegalArgumentException("Mask string may contain only '0' and '1'.")__			}_		}__		return includeFields(includedMask)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,string,mask,boolean,included,mask,new,boolean,mask,length,for,int,i,0,i,mask,length,i,char,c,mask,char,at,i,if,c,1,c,t,c,t,included,mask,i,true,else,if,c,0,c,f,c,f,throw,new,illegal,argument,exception,mask,string,may,contain,only,0,and,1,return,include,fields,included,mask
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 23-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22)__		CsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> inputFormat = new TupleCsvInputFormat<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,23,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,input,format,new,tuple,csv,input,format,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> @PublicEvolving 	public void setCharset(String charset);1481228508;Sets the charset of the reader__@param charset The character set to set.;@PublicEvolving_	public void setCharset(String charset) {_		this.charset = Preconditions.checkNotNull(charset)__	};sets,the,charset,of,the,reader,param,charset,the,character,set,to,set;public,evolving,public,void,set,charset,string,charset,this,charset,preconditions,check,not,null,charset
CsvReader -> @PublicEvolving 	public void setCharset(String charset);1491417674;Sets the charset of the reader__@param charset The character set to set.;@PublicEvolving_	public void setCharset(String charset) {_		this.charset = Preconditions.checkNotNull(charset)__	};sets,the,charset,of,the,reader,param,charset,the,character,set,to,set;public,evolving,public,void,set,charset,string,charset,this,charset,preconditions,check,not,null,charset
CsvReader -> @PublicEvolving 	public void setCharset(String charset);1501511872;Sets the charset of the reader.__@param charset The character set to set.;@PublicEvolving_	public void setCharset(String charset) {_		this.charset = Preconditions.checkNotNull(charset)__	};sets,the,charset,of,the,reader,param,charset,the,character,set,to,set;public,evolving,public,void,set,charset,string,charset,this,charset,preconditions,check,not,null,charset
CsvReader -> @PublicEvolving 	public void setCharset(String charset);1511347989;Sets the charset of the reader.__@param charset The character set to set.;@PublicEvolving_	public void setCharset(String charset) {_		this.charset = Preconditions.checkNotNull(charset)__	};sets,the,charset,of,the,reader,param,charset,the,character,set,to,set;public,evolving,public,void,set,charset,string,charset,this,charset,preconditions,check,not,null,charset
CsvReader -> @PublicEvolving 	public void setCharset(String charset);1526993136;Sets the charset of the reader.__@param charset The character set to set.;@PublicEvolving_	public void setCharset(String charset) {_		this.charset = Preconditions.checkNotNull(charset)__	};sets,the,charset,of,the,reader,param,charset,the,character,set,to,set;public,evolving,public,void,set,charset,string,charset,this,charset,preconditions,check,not,null,charset
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,types,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,types,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,types,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,types,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new CsvInputFormat<Tuple3<T0, T1, T2>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,csv,input,format,tuple3,t0,t1,t2,path,types,configure,input,format,input,format,type0,type1,type2,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 3-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2> DataSource<Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_		TupleTypeInfo<Tuple3<T0, T1, T2>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2)__		CsvInputFormat<Tuple3<T0, T1, T2>> inputFormat = new TupleCsvInputFormat<Tuple3<T0, T1, T2>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple3<T0, T1, T2>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,3,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,data,source,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,tuple,type,info,tuple3,t0,t1,t2,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,csv,input,format,tuple3,t0,t1,t2,input,format,new,tuple,csv,input,format,tuple3,t0,t1,t2,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple3,t0,t1,t2,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader includeFields(long mask);1405024514;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1405090423;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1411473593;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1415874087;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1418225395;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1418398862;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1422280244;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1423131458;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1427312339;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1431696388;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1437137436;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1440672039;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1442481573;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1447879320;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1454679829;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1455101486;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1462899491;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1481219256;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1481228508;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1491417674;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		_		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}_		_		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}_		_		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1501511872;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}__		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}__		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}__		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1511347989;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}__		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}__		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}__		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public CsvReader includeFields(long mask);1526993136;Configures which fields of the CSV file should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(long mask) {_		if (mask == 0) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}__		ArrayList<Boolean> fields = new ArrayList<Boolean>()___		while (mask != 0) {_			fields.add((mask & 0x1L) != 0)__			mask >>>= 1__		}__		boolean[] fieldsArray = new boolean[fields.size()]__		for (int i = 0_ i < fieldsArray.length_ i++) {_			fieldsArray[i] = fields.get(i)__		}__		return includeFields(fieldsArray)__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,long,mask,if,mask,0,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,array,list,boolean,fields,new,array,list,boolean,while,mask,0,fields,add,mask,0x1l,0,mask,1,boolean,fields,array,new,boolean,fields,size,for,int,i,0,i,fields,array,length,i,fields,array,i,fields,get,i,return,include,fields,fields,array
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 10-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9)__		CsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> inputFormat = new TupleCsvInputFormat<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,10,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,input,format,new,tuple,csv,input,format,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 12-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11)__		CsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> inputFormat = new TupleCsvInputFormat<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,12,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,input,format,new,tuple,csv,input,format,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader ignoreInvalidLines();1418398862;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1422280244;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1423131458;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1427312339;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1431696388;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1437137436;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1440672039;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1442481573;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1447879320;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1454679829;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1455101486;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1462899491;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1481219256;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1481228508;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1491417674;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1501511872;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1511347989;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> public CsvReader ignoreInvalidLines();1526993136;Sets the CSV reader to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreInvalidLines(){_		ignoreInvalidLines = true__		return this__	};sets,the,csv,reader,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,invalid,lines,ignore,invalid,lines,true,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1455101486;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1462899491;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1481219256;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1481228508;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1491417674;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.__@deprecated Please use {@link #fieldDelimiter(String)}.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining,deprecated,please,use,link,field,delimiter,string;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1501511872;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.__@deprecated Please use {@link #fieldDelimiter(String)}.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining,deprecated,please,use,link,field,delimiter,string;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1511347989;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.__@deprecated Please use {@link #fieldDelimiter(String)}.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining,deprecated,please,use,link,field,delimiter,string;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	@PublicEvolving 	public CsvReader fieldDelimiter(char delimiter);1526993136;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.__@deprecated Please use {@link #fieldDelimiter(String)}.;@Deprecated_	@PublicEvolving_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining,deprecated,please,use,link,field,delimiter,string;deprecated,public,evolving,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1405024514;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo)__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1405090423;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo)__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1411473593;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo)__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1415874087;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1418225395;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1418398862;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1422280244;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1423131458;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1427312339;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Validate.notNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,validate,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1431696388;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1437137436;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1440672039;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1442481573;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat, classes)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,classes,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1447879320;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1454679829;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1455101486;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1462899491;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1481219256;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1481228508;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1491417674;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}_		_		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)__		_		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}_		_		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1501511872;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}__		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)___		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}__		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1511347989;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}__		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)___		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}__		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType);1526993136;Configures the reader to read the CSV data and parse it to the given type. The type must be a subclass of_{@link Tuple}. The type information for the fields is obtained from the type class. The type_consequently needs to specify all generic field types of the tuple.__@param targetType The class of the target type, needs to be a subclass of Tuple._@return The DataSet representing the parsed CSV data.;public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) {_		Preconditions.checkNotNull(targetType, "The target type class must not be null.")__		if (!Tuple.class.isAssignableFrom(targetType)) {_			throw new IllegalArgumentException("The target type must be a subclass of " + Tuple.class.getName())__		}__		@SuppressWarnings("unchecked")_		TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType)__		CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask)___		Class<?>[] classes = new Class<?>[typeInfo.getArity()]__		for (int i = 0_ i < typeInfo.getArity()_ i++) {_			classes[i] = typeInfo.getTypeAt(i).getTypeClass()__		}__		configureInputFormat(inputFormat)__		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,type,must,be,a,subclass,of,link,tuple,the,type,information,for,the,fields,is,obtained,from,the,type,class,the,type,consequently,needs,to,specify,all,generic,field,types,of,the,tuple,param,target,type,the,class,of,the,target,type,needs,to,be,a,subclass,of,tuple,return,the,data,set,representing,the,parsed,csv,data;public,t,extends,tuple,data,source,t,tuple,type,class,t,target,type,preconditions,check,not,null,target,type,the,target,type,class,must,not,be,null,if,tuple,class,is,assignable,from,target,type,throw,new,illegal,argument,exception,the,target,type,must,be,a,subclass,of,tuple,class,get,name,suppress,warnings,unchecked,tuple,type,info,t,type,info,tuple,type,info,t,type,extractor,create,type,info,target,type,csv,input,format,t,input,format,new,tuple,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,this,included,mask,class,classes,new,class,type,info,get,arity,for,int,i,0,i,type,info,get,arity,i,classes,i,type,info,get,type,at,i,get,type,class,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 16-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15)__		CsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> inputFormat = new TupleCsvInputFormat<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,16,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,input,format,new,tuple,csv,input,format,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 5-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4> DataSource<Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4)__		CsvInputFormat<Tuple5<T0, T1, T2, T3, T4>> inputFormat = new TupleCsvInputFormat<Tuple5<T0, T1, T2, T3, T4>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple5<T0, T1, T2, T3, T4>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,5,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,data,source,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,tuple,type,info,tuple5,t0,t1,t2,t3,t4,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,csv,input,format,tuple5,t0,t1,t2,t3,t4,input,format,new,tuple,csv,input,format,tuple5,t0,t1,t2,t3,t4,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple5,t0,t1,t2,t3,t4,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 7-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6> DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6)__		CsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>> inputFormat = new TupleCsvInputFormat<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,7,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,input,format,new,tuple,csv,input,format,tuple7,t0,t1,t2,t3,t4,t5,t6,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple7,t0,t1,t2,t3,t4,t5,t6,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,types,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,types,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,types,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,types,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new CsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,csv,input,format,tuple4,t0,t1,t2,t3,path,types,configure,input,format,input,format,type0,type1,type2,type3,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 4-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3> DataSource<Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3)__		CsvInputFormat<Tuple4<T0, T1, T2, T3>> inputFormat = new TupleCsvInputFormat<Tuple4<T0, T1, T2, T3>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple4<T0, T1, T2, T3>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,4,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,data,source,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,tuple,type,info,tuple4,t0,t1,t2,t3,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,csv,input,format,tuple4,t0,t1,t2,t3,input,format,new,tuple,csv,input,format,tuple4,t0,t1,t2,t3,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple4,t0,t1,t2,t3,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 24-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23)__		CsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> inputFormat = new TupleCsvInputFormat<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,24,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,input,format,new,tuple,csv,input,format,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1423131458;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1427312339;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1431696388;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1437137436;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1440672039;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1442481573;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1447879320;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1454679829;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1455101486;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1462899491;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1481219256;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1481228508;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1491417674;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1501511872;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1511347989;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public CsvReader parseQuotedStrings(char quoteCharacter);1526993136;Enables quoted String parsing. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader parseQuotedStrings(char quoteCharacter) {_		this.parseQuotedStrings = true__		this.quoteCharacter = quoteCharacter__		return this__	};enables,quoted,string,parsing,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,parse,quoted,strings,char,quote,character,this,parse,quoted,strings,true,this,quote,character,quote,character,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 14-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13)__		CsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> inputFormat = new TupleCsvInputFormat<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,14,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,input,format,new,tuple,csv,input,format,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path, types)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,types,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path, types)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,types,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path, types)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,types,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path, types)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,types,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new CsvInputFormat<Tuple2<T0, T1>>(path, types)__		configureInputFormat(inputFormat, type0, type1)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,csv,input,format,tuple2,t0,t1,path,types,configure,input,format,input,format,type0,type1,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 2-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1> DataSource<Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_		TupleTypeInfo<Tuple2<T0, T1>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1)__		CsvInputFormat<Tuple2<T0, T1>> inputFormat = new TupleCsvInputFormat<Tuple2<T0, T1>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple2<T0, T1>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,2,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,data,source,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,tuple,type,info,tuple2,t0,t1,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,csv,input,format,tuple2,t0,t1,input,format,new,tuple,csv,input,format,tuple2,t0,t1,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple2,t0,t1,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 8-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7> DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7)__		CsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> inputFormat = new TupleCsvInputFormat<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,8,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,input,format,new,tuple,csv,input,format,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path, types)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,types,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path, types)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,types,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path, types)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,types,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path, types)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,types,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new CsvInputFormat<Tuple1<T0>>(path, types)__		configureInputFormat(inputFormat, type0)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,csv,input,format,tuple1,t0,path,types,configure,input,format,input,format,type0,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 1-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0> DataSource<Tuple1<T0>> types(Class<T0> type0) {_		TupleTypeInfo<Tuple1<T0>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0)__		CsvInputFormat<Tuple1<T0>> inputFormat = new TupleCsvInputFormat<Tuple1<T0>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple1<T0>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,1,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,data,source,tuple1,t0,types,class,t0,type0,tuple,type,info,tuple1,t0,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,csv,input,format,tuple1,t0,input,format,new,tuple,csv,input,format,tuple1,t0,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple1,t0,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1422280244;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1423131458;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1427312339;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1431696388;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1437137436;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1440672039;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1442481573;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1447879320;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1454679829;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1455101486;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1462899491;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1481219256;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1481228508;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1491417674;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1501511872;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1511347989;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(String delimiter);1526993136;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(String delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,string,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1405024514;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1405090423;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1411473593;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1415874087;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1418225395;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public CsvReader fieldDelimiter(char delimiter);1418398862;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,delimiter,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 6-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5> DataSource<Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5)__		CsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>> inputFormat = new TupleCsvInputFormat<Tuple6<T0, T1, T2, T3, T4, T5>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple6<T0, T1, T2, T3, T4, T5>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,6,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,data,source,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,input,format,new,tuple,csv,input,format,tuple6,t0,t1,t2,t3,t4,t5,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple6,t0,t1,t2,t3,t4,t5,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader lineDelimiter(String delimiter);1405024514;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1405090423;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1411473593;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1415874087;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1418225395;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1418398862;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1422280244;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1423131458;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1427312339;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1431696388;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1437137436;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1440672039;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1442481573;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1447879320;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1454679829;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1455101486;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1462899491;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1481219256;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1481228508;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1491417674;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}_		_		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1501511872;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}__		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1511347989;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}__		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> public CsvReader lineDelimiter(String delimiter);1526993136;Configures the delimiter that separates the lines/rows. The linebreak character_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader lineDelimiter(String delimiter) {_		if (delimiter == null || delimiter.length() == 0) {_			throw new IllegalArgumentException("The delimiter must not be null or an empty string")__		}__		this.lineDelimiter = delimiter__		return this__	};configures,the,delimiter,that,separates,the,lines,rows,the,linebreak,character,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,line,delimiter,string,delimiter,if,delimiter,null,delimiter,length,0,throw,new,illegal,argument,exception,the,delimiter,must,not,be,null,or,an,empty,string,this,line,delimiter,delimiter,return,this
CsvReader -> @PublicEvolving 	public String getCharset();1481228508;Gets the character set for the reader. Default is UTF-8.__@return The charset for the reader.;@PublicEvolving_	public String getCharset() {_		return this.charset__	};gets,the,character,set,for,the,reader,default,is,utf,8,return,the,charset,for,the,reader;public,evolving,public,string,get,charset,return,this,charset
CsvReader -> @PublicEvolving 	public String getCharset();1491417674;Gets the character set for the reader. Default is UTF-8.__@return The charset for the reader.;@PublicEvolving_	public String getCharset() {_		return this.charset__	};gets,the,character,set,for,the,reader,default,is,utf,8,return,the,charset,for,the,reader;public,evolving,public,string,get,charset,return,this,charset
CsvReader -> @PublicEvolving 	public String getCharset();1501511872;Gets the character set for the reader. Default is UTF-8.__@return The charset for the reader.;@PublicEvolving_	public String getCharset() {_		return this.charset__	};gets,the,character,set,for,the,reader,default,is,utf,8,return,the,charset,for,the,reader;public,evolving,public,string,get,charset,return,this,charset
CsvReader -> @PublicEvolving 	public String getCharset();1511347989;Gets the character set for the reader. Default is UTF-8.__@return The charset for the reader.;@PublicEvolving_	public String getCharset() {_		return this.charset__	};gets,the,character,set,for,the,reader,default,is,utf,8,return,the,charset,for,the,reader;public,evolving,public,string,get,charset,return,this,charset
CsvReader -> @PublicEvolving 	public String getCharset();1526993136;Gets the character set for the reader. Default is UTF-8.__@return The charset for the reader.;@PublicEvolving_	public String getCharset() {_		return this.charset__	};gets,the,character,set,for,the,reader,default,is,utf,8,return,the,charset,for,the,reader;public,evolving,public,string,get,charset,return,this,charset
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 17-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16)__		CsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> inputFormat = new TupleCsvInputFormat<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,17,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,input,format,new,tuple,csv,input,format,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 22-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21)__		CsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> inputFormat = new TupleCsvInputFormat<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,22,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,input,format,new,tuple,csv,input,format,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 20-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19)__		CsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> inputFormat = new TupleCsvInputFormat<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,20,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,input,format,new,tuple,csv,input,format,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1422280244;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1423131458;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1427312339;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1431696388;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1437137436;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1440672039;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1442481573;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> @Deprecated 	public CsvReader fieldDelimiter(char delimiter);1447879320;Configures the delimiter that separates the fields within a row. The comma character_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in one row._@return The CSV reader instance itself, to allow for fluent function chaining.;@Deprecated_	public CsvReader fieldDelimiter(char delimiter) {_		this.fieldDelimiter = String.valueOf(delimiter)__		return this__	};configures,the,delimiter,that,separates,the,fields,within,a,row,the,comma,character,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,one,row,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;deprecated,public,csv,reader,field,delimiter,char,delimiter,this,field,delimiter,string,value,of,delimiter,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 15-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14)__		CsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> inputFormat = new TupleCsvInputFormat<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,15,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,input,format,new,tuple,csv,input,format,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader ignoreFirstLine();1405024514;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1405090423;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1411473593;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1415874087;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1418225395;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1418398862;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1422280244;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1423131458;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1427312339;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1431696388;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1437137436;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1440672039;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1442481573;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1447879320;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1454679829;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1455101486;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1462899491;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1481219256;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1481228508;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1491417674;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1501511872;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1511347989;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public CsvReader ignoreFirstLine();1526993136;Sets the CSV reader to ignore the first line. This is useful for files that contain a header line.__@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader ignoreFirstLine() {_		skipFirstLineAsHeader = true__		return this__	};sets,the,csv,reader,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,ignore,first,line,skip,first,line,as,header,true,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 25-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@param type21 The type of CSV field 21 and the type of field 21 in the returned tuple type._@param type22 The type of CSV field 22 and the type of field 22 in the returned tuple type._@param type23 The type of CSV field 23 and the type of field 23 in the returned tuple type._@param type24 The type of CSV field 24 and the type of field 24 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24)__		CsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> inputFormat = new TupleCsvInputFormat<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,25,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,param,type21,the,type,of,csv,field,21,and,the,type,of,field,21,in,the,returned,tuple,type,param,type22,the,type,of,csv,field,22,and,the,type,of,field,22,in,the,returned,tuple,type,param,type23,the,type,of,csv,field,23,and,the,type,of,field,23,in,the,returned,tuple,type,param,type24,the,type,of,csv,field,24,and,the,type,of,field,24,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,input,format,new,tuple,csv,input,format,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1427312339;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)___		Class<?>[] classes = new Class<?>[pojoFields.length]__		for (int i = 0_ i < pojoFields.length_ i++) {_			int pos = typeInfo.getFieldIndex(pojoFields[i])__			if(pos < 0) {_				throw new IllegalArgumentException("Field \""+pojoFields[i]+"\" not part of POJO type "+pojoType.getCanonicalName())__			}_			classes[i] = typeInfo.getPojoFieldAt(pos).type.getTypeClass()__		}__		configureInputFormat(inputFormat, classes)__		inputFormat.setOrderOfPOJOFields(pojoFields)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,pojo,fields,length,for,int,i,0,i,pojo,fields,length,i,int,pos,type,info,get,field,index,pojo,fields,i,if,pos,0,throw,new,illegal,argument,exception,field,pojo,fields,i,not,part,of,pojo,type,pojo,type,get,canonical,name,classes,i,type,info,get,pojo,field,at,pos,type,get,type,class,configure,input,format,input,format,classes,input,format,set,order,of,pojofields,pojo,fields,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1431696388;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)___		Class<?>[] classes = new Class<?>[pojoFields.length]__		for (int i = 0_ i < pojoFields.length_ i++) {_			int pos = typeInfo.getFieldIndex(pojoFields[i])__			if(pos < 0) {_				throw new IllegalArgumentException("Field \""+pojoFields[i]+"\" not part of POJO type "+pojoType.getCanonicalName())__			}_			classes[i] = typeInfo.getPojoFieldAt(pos).type.getTypeClass()__		}__		configureInputFormat(inputFormat, classes)__		inputFormat.setOrderOfPOJOFields(pojoFields)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,pojo,fields,length,for,int,i,0,i,pojo,fields,length,i,int,pos,type,info,get,field,index,pojo,fields,i,if,pos,0,throw,new,illegal,argument,exception,field,pojo,fields,i,not,part,of,pojo,type,pojo,type,get,canonical,name,classes,i,type,info,get,pojo,field,at,pos,type,get,type,class,configure,input,format,input,format,classes,input,format,set,order,of,pojofields,pojo,fields,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1437137436;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)___		Class<?>[] classes = new Class<?>[pojoFields.length]__		for (int i = 0_ i < pojoFields.length_ i++) {_			int pos = typeInfo.getFieldIndex(pojoFields[i])__			if(pos < 0) {_				throw new IllegalArgumentException("Field \""+pojoFields[i]+"\" not part of POJO type "+pojoType.getCanonicalName())__			}_			classes[i] = typeInfo.getPojoFieldAt(pos).type.getTypeClass()__		}__		configureInputFormat(inputFormat, classes)__		inputFormat.setOrderOfPOJOFields(pojoFields)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,pojo,fields,length,for,int,i,0,i,pojo,fields,length,i,int,pos,type,info,get,field,index,pojo,fields,i,if,pos,0,throw,new,illegal,argument,exception,field,pojo,fields,i,not,part,of,pojo,type,pojo,type,get,canonical,name,classes,i,type,info,get,pojo,field,at,pos,type,get,type,class,configure,input,format,input,format,classes,input,format,set,order,of,pojofields,pojo,fields,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1440672039;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)___		Class<?>[] classes = new Class<?>[pojoFields.length]__		for (int i = 0_ i < pojoFields.length_ i++) {_			int pos = typeInfo.getFieldIndex(pojoFields[i])__			if(pos < 0) {_				throw new IllegalArgumentException("Field \""+pojoFields[i]+"\" not part of POJO type "+pojoType.getCanonicalName())__			}_			classes[i] = typeInfo.getPojoFieldAt(pos).type.getTypeClass()__		}__		configureInputFormat(inputFormat, classes)__		inputFormat.setOrderOfPOJOFields(pojoFields)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,pojo,fields,length,for,int,i,0,i,pojo,fields,length,i,int,pos,type,info,get,field,index,pojo,fields,i,if,pos,0,throw,new,illegal,argument,exception,field,pojo,fields,i,not,part,of,pojo,type,pojo,type,get,canonical,name,classes,i,type,info,get,pojo,field,at,pos,type,get,type,class,configure,input,format,input,format,classes,input,format,set,order,of,pojofields,pojo,fields,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1442481573;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)__		CsvInputFormat<T> inputFormat = new CsvInputFormat<T>(path, typeInfo)___		Class<?>[] classes = new Class<?>[pojoFields.length]__		for (int i = 0_ i < pojoFields.length_ i++) {_			int pos = typeInfo.getFieldIndex(pojoFields[i])__			if(pos < 0) {_				throw new IllegalArgumentException("Field \""+pojoFields[i]+"\" not part of POJO type "+pojoType.getCanonicalName())__			}_			classes[i] = typeInfo.getPojoFieldAt(pos).getTypeInformation().getTypeClass()__		}__		configureInputFormat(inputFormat, classes)__		inputFormat.setOrderOfPOJOFields(pojoFields)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,csv,input,format,t,path,type,info,class,classes,new,class,pojo,fields,length,for,int,i,0,i,pojo,fields,length,i,int,pos,type,info,get,field,index,pojo,fields,i,if,pos,0,throw,new,illegal,argument,exception,field,pojo,fields,i,not,part,of,pojo,type,pojo,type,get,canonical,name,classes,i,type,info,get,pojo,field,at,pos,get,type,information,get,type,class,configure,input,format,input,format,classes,input,format,set,order,of,pojofields,pojo,fields,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1447879320;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1454679829;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1455101486;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1462899491;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1481219256;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1481228508;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1491417674;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1501511872;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1511347989;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		@SuppressWarnings("unchecked")_		PojoTypeInfo<T> typeInfo = (PojoTypeInfo<T>) TypeExtractor.createTypeInfo(pojoType)___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,suppress,warnings,unchecked,pojo,type,info,t,type,info,pojo,type,info,t,type,extractor,create,type,info,pojo,type,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,type,info,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,type,info,utils,get,call,location,name
CsvReader -> public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields);1526993136;Configures the reader to read the CSV data and parse it to the given type. The all fields of the type_must be public or able to set value. The type information for the fields is obtained from the type class.__@param pojoType The class of the target POJO._@param pojoFields The fields of the POJO which are mapped to CSV fields._@return The DataSet representing the parsed CSV data.;public <T> DataSource<T> pojoType(Class<T> pojoType, String... pojoFields) {_		Preconditions.checkNotNull(pojoType, "The POJO type class must not be null.")__		Preconditions.checkNotNull(pojoFields, "POJO fields must be specified (not null) if output type is a POJO.")___		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(pojoType)__		if (!(ti instanceof PojoTypeInfo)) {_			throw new IllegalArgumentException(_				"The specified class is not a POJO. The type class must meet the POJO requirements. Found: " + ti)__		}_		final PojoTypeInfo<T> pti = (PojoTypeInfo<T>) ti___		CsvInputFormat<T> inputFormat = new PojoCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, pti, pojoFields, this.includedMask)___		configureInputFormat(inputFormat)___		return new DataSource<T>(executionContext, inputFormat, pti, Utils.getCallLocationName())__	};configures,the,reader,to,read,the,csv,data,and,parse,it,to,the,given,type,the,all,fields,of,the,type,must,be,public,or,able,to,set,value,the,type,information,for,the,fields,is,obtained,from,the,type,class,param,pojo,type,the,class,of,the,target,pojo,param,pojo,fields,the,fields,of,the,pojo,which,are,mapped,to,csv,fields,return,the,data,set,representing,the,parsed,csv,data;public,t,data,source,t,pojo,type,class,t,pojo,type,string,pojo,fields,preconditions,check,not,null,pojo,type,the,pojo,type,class,must,not,be,null,preconditions,check,not,null,pojo,fields,pojo,fields,must,be,specified,not,null,if,output,type,is,a,pojo,final,type,information,t,ti,type,extractor,create,type,info,pojo,type,if,ti,instanceof,pojo,type,info,throw,new,illegal,argument,exception,the,specified,class,is,not,a,pojo,the,type,class,must,meet,the,pojo,requirements,found,ti,final,pojo,type,info,t,pti,pojo,type,info,t,ti,csv,input,format,t,input,format,new,pojo,csv,input,format,t,path,this,line,delimiter,this,field,delimiter,pti,pojo,fields,this,included,mask,configure,input,format,input,format,return,new,data,source,t,execution,context,input,format,pti,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 21-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@param type19 The type of CSV field 19 and the type of field 19 in the returned tuple type._@param type20 The type of CSV field 20 and the type of field 20 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20)__		CsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> inputFormat = new TupleCsvInputFormat<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,21,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,param,type19,the,type,of,csv,field,19,and,the,type,of,field,19,in,the,returned,tuple,type,param,type20,the,type,of,csv,field,20,and,the,type,of,field,20,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,input,format,new,tuple,csv,input,format,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 13-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12)__		CsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> inputFormat = new TupleCsvInputFormat<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,13,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,input,format,new,tuple,csv,input,format,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public CsvReader includeFields(boolean ... fields);1405024514;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1405090423;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1411473593;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1415874087;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1418225395;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1418398862;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1422280244;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1423131458;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1427312339;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1431696388;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1437137436;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1440672039;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1442481573;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1447879320;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1454679829;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1455101486;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1462899491;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1481219256;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1481228508;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1491417674;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}_		_		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}_		_		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1501511872;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}__		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}__		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1511347989;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}__		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}__		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public CsvReader includeFields(boolean ... fields);1526993136;Configures which fields of the CSV file should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param fields The array of flags that describes which fields are to be included and which not._@return The CSV reader instance itself, to allow for fluent function chaining.;public CsvReader includeFields(boolean ... fields) {_		if (fields == null || fields.length == 0) {_			throw new IllegalArgumentException("The set of included fields must not be null or empty.")__		}__		int lastTruePos = -1__		for (int i = 0_ i < fields.length_ i++) {_			if (fields[i]) {_				lastTruePos = i__			}_		}__		if (lastTruePos == -1) {_			throw new IllegalArgumentException("The description of fields to parse excluded all fields. At least one fields must be included.")__		}_		if (lastTruePos == fields.length - 1) {_			this.includedMask = fields__		} else {_			this.includedMask = Arrays.copyOfRange(fields, 0, lastTruePos + 1)__		}_		return this__	};configures,which,fields,of,the,csv,file,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,and,which,not,return,the,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,csv,reader,include,fields,boolean,fields,if,fields,null,fields,length,0,throw,new,illegal,argument,exception,the,set,of,included,fields,must,not,be,null,or,empty,int,last,true,pos,1,for,int,i,0,i,fields,length,i,if,fields,i,last,true,pos,i,if,last,true,pos,1,throw,new,illegal,argument,exception,the,description,of,fields,to,parse,excluded,all,fields,at,least,one,fields,must,be,included,if,last,true,pos,fields,length,1,this,included,mask,fields,else,this,included,mask,arrays,copy,of,range,fields,0,last,true,pos,1,return,this
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405024514;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405090423;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411473593;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types)__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1415874087;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1418225395;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1418398862;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1422280244;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1423131458;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1427312339;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1431696388;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1437137436;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1440672039;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1442481573;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types)__		configureInputFormat(inputFormat, type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,configure,input,format,input,format,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1447879320;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1454679829;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1455101486;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1462899491;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1481219256;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1481228508;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1491417674;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1501511872;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1511347989;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
CsvReader -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1526993136;Specifies the types for the CSV fields. This method parses the CSV data to a 19-tuple_which has fields of the specified types._This method is overloaded for each possible length of the tuples to support type safe_creation of data sets through CSV parsing.__@param type0 The type of CSV field 0 and the type of field 0 in the returned tuple type._@param type1 The type of CSV field 1 and the type of field 1 in the returned tuple type._@param type2 The type of CSV field 2 and the type of field 2 in the returned tuple type._@param type3 The type of CSV field 3 and the type of field 3 in the returned tuple type._@param type4 The type of CSV field 4 and the type of field 4 in the returned tuple type._@param type5 The type of CSV field 5 and the type of field 5 in the returned tuple type._@param type6 The type of CSV field 6 and the type of field 6 in the returned tuple type._@param type7 The type of CSV field 7 and the type of field 7 in the returned tuple type._@param type8 The type of CSV field 8 and the type of field 8 in the returned tuple type._@param type9 The type of CSV field 9 and the type of field 9 in the returned tuple type._@param type10 The type of CSV field 10 and the type of field 10 in the returned tuple type._@param type11 The type of CSV field 11 and the type of field 11 in the returned tuple type._@param type12 The type of CSV field 12 and the type of field 12 in the returned tuple type._@param type13 The type of CSV field 13 and the type of field 13 in the returned tuple type._@param type14 The type of CSV field 14 and the type of field 14 in the returned tuple type._@param type15 The type of CSV field 15 and the type of field 15 in the returned tuple type._@param type16 The type of CSV field 16 and the type of field 16 in the returned tuple type._@param type17 The type of CSV field 17 and the type of field 17 in the returned tuple type._@param type18 The type of CSV field 18 and the type of field 18 in the returned tuple type._@return The {@link org.apache.flink.api.java.DataSet} representing the parsed CSV data.;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types = TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18)__		CsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> inputFormat = new TupleCsvInputFormat<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(path, types, this.includedMask)__		configureInputFormat(inputFormat)__		return new DataSource<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(executionContext, inputFormat, types, Utils.getCallLocationName())__	};specifies,the,types,for,the,csv,fields,this,method,parses,the,csv,data,to,a,19,tuple,which,has,fields,of,the,specified,types,this,method,is,overloaded,for,each,possible,length,of,the,tuples,to,support,type,safe,creation,of,data,sets,through,csv,parsing,param,type0,the,type,of,csv,field,0,and,the,type,of,field,0,in,the,returned,tuple,type,param,type1,the,type,of,csv,field,1,and,the,type,of,field,1,in,the,returned,tuple,type,param,type2,the,type,of,csv,field,2,and,the,type,of,field,2,in,the,returned,tuple,type,param,type3,the,type,of,csv,field,3,and,the,type,of,field,3,in,the,returned,tuple,type,param,type4,the,type,of,csv,field,4,and,the,type,of,field,4,in,the,returned,tuple,type,param,type5,the,type,of,csv,field,5,and,the,type,of,field,5,in,the,returned,tuple,type,param,type6,the,type,of,csv,field,6,and,the,type,of,field,6,in,the,returned,tuple,type,param,type7,the,type,of,csv,field,7,and,the,type,of,field,7,in,the,returned,tuple,type,param,type8,the,type,of,csv,field,8,and,the,type,of,field,8,in,the,returned,tuple,type,param,type9,the,type,of,csv,field,9,and,the,type,of,field,9,in,the,returned,tuple,type,param,type10,the,type,of,csv,field,10,and,the,type,of,field,10,in,the,returned,tuple,type,param,type11,the,type,of,csv,field,11,and,the,type,of,field,11,in,the,returned,tuple,type,param,type12,the,type,of,csv,field,12,and,the,type,of,field,12,in,the,returned,tuple,type,param,type13,the,type,of,csv,field,13,and,the,type,of,field,13,in,the,returned,tuple,type,param,type14,the,type,of,csv,field,14,and,the,type,of,field,14,in,the,returned,tuple,type,param,type15,the,type,of,csv,field,15,and,the,type,of,field,15,in,the,returned,tuple,type,param,type16,the,type,of,csv,field,16,and,the,type,of,field,16,in,the,returned,tuple,type,param,type17,the,type,of,csv,field,17,and,the,type,of,field,17,in,the,returned,tuple,type,param,type18,the,type,of,csv,field,18,and,the,type,of,field,18,in,the,returned,tuple,type,return,the,link,org,apache,flink,api,java,data,set,representing,the,parsed,csv,data;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,tuple,type,info,get,basic,and,basic,value,tuple,type,info,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,input,format,new,tuple,csv,input,format,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,path,types,this,included,mask,configure,input,format,input,format,return,new,data,source,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,execution,context,input,format,types,utils,get,call,location,name
