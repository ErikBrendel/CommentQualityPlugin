commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;// ------------------------------------------------------------------------ @Override public JobExecutionResult execute(String jobName) throws Exception {     PlanExecutor executor = getExecutor().     Plan p = createProgramPlan(jobName).     // Session management is disabled, revert this commit to enable     // p.setJobId(jobID).     // p.setSessionTimeout(sessionTimeout).     JobExecutionResult result = executor.executePlan(p).     this.lastJobExecutionResult = result.     return result. }
false;public;0;19;;@Override public String getExecutionPlan() throws Exception {     Plan p = createProgramPlan("plan", false).     // generate the plan     if (executor != null) {         return executor.getOptimizerPlanAsJSON(p).     } else {         PlanExecutor le = PlanExecutor.createLocalExecutor(null).         String plan = le.getOptimizerPlanAsJSON(p).         le.stop().         return plan.     } }
false;public;0;7;;@Override @PublicEvolving public void startNewSession() throws Exception {     dispose().     jobID = JobID.generate().     installShutdownHook(). }
false;protected;0;15;;protected PlanExecutor getExecutor() throws Exception {     if (executor == null) {         executor = PlanExecutor.createRemoteExecutor(host, port, clientConfiguration, jarFiles, globalClasspaths).         executor.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled()).     }     // if we are using sessions, we keep the executor running     if (getSessionTimeout() > 0 && !executor.isRunning()) {         executor.start().         installShutdownHook().     }     return executor. }
false;protected;0;15;;// ------------------------------------------------------------------------ // Dispose // ------------------------------------------------------------------------ protected void dispose() {     // Remove shutdown hook to prevent resource leaks     ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG).     try {         PlanExecutor executor = this.executor.         if (executor != null) {             executor.endSession(jobID).             executor.stop().         }     } catch (Exception e) {         throw new RuntimeException("Failed to dispose the session shutdown hook.").     } }
false;public;0;5;;@Override public String toString() {     return "Remote Environment (" + this.host + ":" + this.port + " - parallelism = " + (getParallelism() == -1 ? "default" : getParallelism()) + ") : " + getIdString(). }
false;private;0;5;;// ------------------------------------------------------------------------ // Shutdown hooks and reapers // ------------------------------------------------------------------------ private void installShutdownHook() {     if (shutdownHook == null) {         this.shutdownHook = ShutdownHookUtil.addShutdownHook(this::dispose, getClass().getSimpleName(), LOG).     } }
