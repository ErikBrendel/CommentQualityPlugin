commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void aggregate(Float value) {     min = Math.min(min, value). }
false;public;1;4;;@Override public void combine(Aggregator<Float, Float> other) {     min = Math.min(min, ((MinFloatAggregator) other).min). }
false;public;0;4;;@Override public Float result() {     return min. }
false;public;1;4;;@Override public void aggregate(Float value) {     max = Math.max(max, value). }
false;public;1;4;;@Override public void combine(Aggregator<Float, Float> other) {     max = Math.max(max, ((MaxFloatAggregator) other).max). }
false;public;0;4;;@Override public Float result() {     return max. }
false;public;1;4;;@Override public void aggregate(Float value) {     sum = sum.add(value). }
false;public;1;4;;@Override public void combine(Aggregator<Float, Float> other) {     sum = sum.add(((SumFloatAggregator) other).sum). }
false;public;0;5;;@Override public Float result() {     // overflow will go to infinity     return (float) sum.value(). }
false;protected;0;4;;@Override protected Aggregator<Float, Float> initMin() {     return new MinFloatAggregator(). }
false;protected;0;4;;@Override protected Aggregator<Float, Float> initMax() {     return new MaxFloatAggregator(). }
false;protected;0;4;;@Override protected Aggregator<Float, Float> initSum() {     return new SumFloatAggregator(). }
false;protected;1;4;;@Override protected boolean isNan(Float number) {     return number.isNaN(). }
false;protected;1;4;;@Override protected boolean isInfinite(Float number) {     return number.isInfinite(). }
