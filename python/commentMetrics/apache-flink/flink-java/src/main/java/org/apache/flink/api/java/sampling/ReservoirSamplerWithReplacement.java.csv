commented;modifiers;parameterAmount;loc;comment;code
false;public;1;37;;@Override public Iterator<IntermediateSampleData<T>> sampleInPartition(Iterator<T> input) {     if (numSamples == 0) {         return emptyIntermediateIterable.     }     // This queue holds a fixed number of elements with the top K weight for current partition.     PriorityQueue<IntermediateSampleData<T>> queue = new PriorityQueue<IntermediateSampleData<T>>(numSamples).     IntermediateSampleData<T> smallest = null.     if (input.hasNext()) {         T element = input.next().         // Initiate the queue with the first element and random weights.         for (int i = 0. i < numSamples. i++) {             queue.add(new IntermediateSampleData<T>(random.nextDouble(), element)).             smallest = queue.peek().         }     }     while (input.hasNext()) {         T element = input.next().         // possible to be selected multi times.         for (int i = 0. i < numSamples. i++) {             // If current element weight is larger than the smallest one in queue, remove the element             // with the smallest weight, and append current element into the queue.             double rand = random.nextDouble().             if (rand > smallest.getWeight()) {                 queue.remove().                 queue.add(new IntermediateSampleData<T>(rand, element)).                 smallest = queue.peek().             }         }     }     return queue.iterator(). }
