commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;public Plan translateToPlan(List<DataSink<?>> sinks, String jobName) {     List<GenericDataSinkBase<?>> planSinks = new ArrayList<>().     for (DataSink<?> sink : sinks) {         planSinks.add(translate(sink)).     }     Plan p = new Plan(planSinks).     p.setJobName(jobName).     return p. }
false;private;1;12;;private <T> GenericDataSinkBase<T> translate(DataSink<T> sink) {     // translate the input recursively     Operator<T> input = translate(sink.getDataSet()).     // translate the sink itself and connect it to the input     GenericDataSinkBase<T> translatedSink = sink.translateToDataFlow(input).     translatedSink.setResources(sink.getMinResources(), sink.getPreferredResources()).     return translatedSink. }
false;private;1;64;;private <T> Operator<T> translate(DataSet<T> dataSet) {     while (dataSet instanceof NoOpOperator) {         dataSet = ((NoOpOperator<T>) dataSet).getInput().     }     // check if we have already translated that data set (operation or source)     Operator<?> previous = this.translated.get(dataSet).     if (previous != null) {         // The optimizer will merge subsequent binary unions into one n-ary union.         if (!(dataSet instanceof UnionOperator)) {             // all other operators are reused.             @SuppressWarnings("unchecked")             Operator<T> typedPrevious = (Operator<T>) previous.             return typedPrevious.         }     }     Operator<T> dataFlowOp.     if (dataSet instanceof DataSource) {         DataSource<T> dataSource = (DataSource<T>) dataSet.         dataFlowOp = dataSource.translateToDataFlow().         dataFlowOp.setResources(dataSource.getMinResources(), dataSource.getPreferredResources()).     } else if (dataSet instanceof SingleInputOperator) {         SingleInputOperator<?, ?, ?> singleInputOperator = (SingleInputOperator<?, ?, ?>) dataSet.         dataFlowOp = translateSingleInputOperator(singleInputOperator).         dataFlowOp.setResources(singleInputOperator.getMinResources(), singleInputOperator.getPreferredResources()).     } else if (dataSet instanceof TwoInputOperator) {         TwoInputOperator<?, ?, ?, ?> twoInputOperator = (TwoInputOperator<?, ?, ?, ?>) dataSet.         dataFlowOp = translateTwoInputOperator(twoInputOperator).         dataFlowOp.setResources(twoInputOperator.getMinResources(), twoInputOperator.getPreferredResources()).     } else if (dataSet instanceof BulkIterationResultSet) {         BulkIterationResultSet<?> bulkIterationResultSet = (BulkIterationResultSet<?>) dataSet.         dataFlowOp = translateBulkIteration(bulkIterationResultSet).         dataFlowOp.setResources(bulkIterationResultSet.getIterationHead().getMinResources(), bulkIterationResultSet.getIterationHead().getPreferredResources()).     } else if (dataSet instanceof DeltaIterationResultSet) {         DeltaIterationResultSet<?, ?> deltaIterationResultSet = (DeltaIterationResultSet<?, ?>) dataSet.         dataFlowOp = translateDeltaIteration(deltaIterationResultSet).         dataFlowOp.setResources(deltaIterationResultSet.getIterationHead().getMinResources(), deltaIterationResultSet.getIterationHead().getPreferredResources()).     } else if (dataSet instanceof DeltaIteration.SolutionSetPlaceHolder || dataSet instanceof DeltaIteration.WorksetPlaceHolder) {         throw new InvalidProgramException("A data set that is part of a delta iteration was used as a sink or action." + " Did you forget to close the iteration?").     } else {         throw new RuntimeException("Error while creating the data flow plan for the program: Unknown operator or data set type: " + dataSet).     }     this.translated.put(dataSet, dataFlowOp).     // take care of broadcast variables     translateBcVariables(dataSet, dataFlowOp).     return dataFlowOp. }
false;private;1;32;;private <I, O> org.apache.flink.api.common.operators.Operator<O> translateSingleInputOperator(SingleInputOperator<?, ?, ?> op) {     @SuppressWarnings("unchecked")     SingleInputOperator<I, O, ?> typedOp = (SingleInputOperator<I, O, ?>) op.     @SuppressWarnings("unchecked")     DataSet<I> typedInput = (DataSet<I>) op.getInput().     Operator<I> input = translate(typedInput).     org.apache.flink.api.common.operators.Operator<O> dataFlowOp = typedOp.translateToDataFlow(input).     if (op instanceof UdfOperator<?>) {         @SuppressWarnings("unchecked")         SingleInputUdfOperator<I, O, ?> udfOp = (SingleInputUdfOperator<I, O, ?>) op.         // set configuration parameters         Configuration opParams = udfOp.getParameters().         if (opParams != null) {             dataFlowOp.getParameters().addAll(opParams).         }         if (dataFlowOp instanceof org.apache.flink.api.common.operators.SingleInputOperator) {             org.apache.flink.api.common.operators.SingleInputOperator<?, O, ?> unaryOp = (org.apache.flink.api.common.operators.SingleInputOperator<?, O, ?>) dataFlowOp.             // set the semantic properties             unaryOp.setSemanticProperties(udfOp.getSemanticProperties()).         }     }     return dataFlowOp. }
false;private;1;35;;private <I1, I2, O> org.apache.flink.api.common.operators.Operator<O> translateTwoInputOperator(TwoInputOperator<?, ?, ?, ?> op) {     @SuppressWarnings("unchecked")     TwoInputOperator<I1, I2, O, ?> typedOp = (TwoInputOperator<I1, I2, O, ?>) op.     @SuppressWarnings("unchecked")     DataSet<I1> typedInput1 = (DataSet<I1>) op.getInput1().     @SuppressWarnings("unchecked")     DataSet<I2> typedInput2 = (DataSet<I2>) op.getInput2().     Operator<I1> input1 = translate(typedInput1).     Operator<I2> input2 = translate(typedInput2).     org.apache.flink.api.common.operators.Operator<O> dataFlowOp = typedOp.translateToDataFlow(input1, input2).     if (op instanceof UdfOperator<?>) {         @SuppressWarnings("unchecked")         TwoInputUdfOperator<I1, I2, O, ?> udfOp = (TwoInputUdfOperator<I1, I2, O, ?>) op.         // set configuration parameters         Configuration opParams = udfOp.getParameters().         if (opParams != null) {             dataFlowOp.getParameters().addAll(opParams).         }         if (dataFlowOp instanceof org.apache.flink.api.common.operators.DualInputOperator) {             org.apache.flink.api.common.operators.DualInputOperator<?, ?, O, ?> binaryOp = (org.apache.flink.api.common.operators.DualInputOperator<?, ?, O, ?>) dataFlowOp.             // set the semantic properties             binaryOp.setSemanticProperties(udfOp.getSemanticProperties()).         }     }     return dataFlowOp. }
false;private;1;26;;private <T> BulkIterationBase<T> translateBulkIteration(BulkIterationResultSet<?> untypedIterationEnd) {     @SuppressWarnings("unchecked")     BulkIterationResultSet<T> iterationEnd = (BulkIterationResultSet<T>) untypedIterationEnd.     IterativeDataSet<T> iterationHead = iterationEnd.getIterationHead().     BulkIterationBase<T> iterationOperator = new BulkIterationBase<>(new UnaryOperatorInformation<>(iterationEnd.getType(), iterationEnd.getType()), "Bulk Iteration").     if (iterationHead.getParallelism() > 0) {         iterationOperator.setParallelism(iterationHead.getParallelism()).     }     translated.put(iterationHead, iterationOperator.getPartialSolution()).     Operator<T> translatedBody = translate(iterationEnd.getNextPartialSolution()).     iterationOperator.setNextPartialSolution(translatedBody).     iterationOperator.setMaximumNumberOfIterations(iterationHead.getMaxIterations()).     iterationOperator.setInput(translate(iterationHead.getInput())).     iterationOperator.getAggregators().addAll(iterationHead.getAggregators()).     if (iterationEnd.getTerminationCriterion() != null) {         iterationOperator.setTerminationCriterion(translate(iterationEnd.getTerminationCriterion())).     }     return iterationOperator. }
false;private;1;38;;private <D, W> DeltaIterationBase<D, W> translateDeltaIteration(DeltaIterationResultSet<?, ?> untypedIterationEnd) {     @SuppressWarnings("unchecked")     DeltaIterationResultSet<D, W> iterationEnd = (DeltaIterationResultSet<D, W>) untypedIterationEnd.     DeltaIteration<D, W> iterationHead = iterationEnd.getIterationHead().     String name = iterationHead.getName() == null ? "Unnamed Delta Iteration" : iterationHead.getName().     DeltaIterationBase<D, W> iterationOperator = new DeltaIterationBase<>(new BinaryOperatorInformation<>(iterationEnd.getType(), iterationEnd.getWorksetType(), iterationEnd.getType()), iterationEnd.getKeyPositions(), name).     iterationOperator.setMaximumNumberOfIterations(iterationEnd.getMaxIterations()).     if (iterationHead.getParallelism() > 0) {         iterationOperator.setParallelism(iterationHead.getParallelism()).     }     DeltaIteration.SolutionSetPlaceHolder<D> solutionSetPlaceHolder = iterationHead.getSolutionSet().     DeltaIteration.WorksetPlaceHolder<W> worksetPlaceHolder = iterationHead.getWorkset().     translated.put(solutionSetPlaceHolder, iterationOperator.getSolutionSet()).     translated.put(worksetPlaceHolder, iterationOperator.getWorkset()).     Operator<D> translatedSolutionSet = translate(iterationEnd.getNextSolutionSet()).     Operator<W> translatedWorkset = translate(iterationEnd.getNextWorkset()).     iterationOperator.setNextWorkset(translatedWorkset).     iterationOperator.setSolutionSetDelta(translatedSolutionSet).     iterationOperator.setInitialSolutionSet(translate(iterationHead.getInitialSolutionSet())).     iterationOperator.setInitialWorkset(translate(iterationHead.getInitialWorkset())).     // register all aggregators     iterationOperator.getAggregators().addAll(iterationHead.getAggregators()).     iterationOperator.setSolutionSetUnManaged(iterationHead.isSolutionSetUnManaged()).     return iterationOperator. }
false;private;2;16;;private void translateBcVariables(DataSet<?> setOrOp, Operator<?> dataFlowOp) {     // check if this is actually an operator that could have broadcast variables     if (setOrOp instanceof UdfOperator) {         if (!(dataFlowOp instanceof AbstractUdfOperator<?, ?>)) {             throw new RuntimeException("Error while creating the data flow plan for the program: A UDF operation was not translated to a UDF operator.").         }         UdfOperator<?> udfOp = (UdfOperator<?>) setOrOp.         AbstractUdfOperator<?, ?> udfDataFlowOp = (AbstractUdfOperator<?, ?>) dataFlowOp.         for (Map.Entry<String, DataSet<?>> bcVariable : udfOp.getBroadcastSets().entrySet()) {             Operator<?> bcInput = translate(bcVariable.getValue()).             udfDataFlowOp.setBroadcastVariable(bcVariable.getKey(), bcInput).         }     } }
