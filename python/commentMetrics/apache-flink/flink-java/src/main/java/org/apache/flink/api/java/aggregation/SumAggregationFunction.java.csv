commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "SUM". }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(Byte value) {     agg += value. }
false;public;0;4;;@Override public Byte getAggregate() {     return (byte) agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(ByteValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public ByteValue getAggregate() {     return new ByteValue((byte) agg). }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(Short value) {     agg += value. }
false;public;0;4;;@Override public Short getAggregate() {     return (short) agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(ShortValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public ShortValue getAggregate() {     return new ShortValue((short) agg). }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(Integer value) {     agg += value. }
false;public;0;4;;@Override public Integer getAggregate() {     return (int) agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0. }
false;public;1;4;;@Override public void aggregate(IntValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public IntValue getAggregate() {     return new IntValue((int) agg). }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0L. }
false;public;1;4;;@Override public void aggregate(Long value) {     agg += value. }
false;public;0;4;;@Override public Long getAggregate() {     return agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0L. }
false;public;1;4;;@Override public void aggregate(LongValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public LongValue getAggregate() {     return new LongValue(agg). }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0.0f. }
false;public;1;4;;@Override public void aggregate(Float value) {     agg += value. }
false;public;0;4;;@Override public Float getAggregate() {     return (float) agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0.0f. }
false;public;1;4;;@Override public void aggregate(FloatValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public FloatValue getAggregate() {     return new FloatValue((float) agg). }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0.0. }
false;public;1;4;;@Override public void aggregate(Double value) {     agg += value. }
false;public;0;4;;@Override public Double getAggregate() {     return agg. }
false;public;0;4;;@Override public void initializeAggregate() {     agg = 0.0. }
false;public;1;4;;@Override public void aggregate(DoubleValue value) {     agg += value.getValue(). }
false;public;0;4;;@Override public DoubleValue getAggregate() {     return new DoubleValue(agg). }
false;public;1;44;;@SuppressWarnings("unchecked") @Override public <T> AggregationFunction<T> createAggregationFunction(Class<T> type) {     if (type == Long.class) {         return (AggregationFunction<T>) new LongSumAgg().     } else if (type == LongValue.class) {         return (AggregationFunction<T>) new LongValueSumAgg().     } else if (type == Integer.class) {         return (AggregationFunction<T>) new IntSumAgg().     } else if (type == IntValue.class) {         return (AggregationFunction<T>) new IntValueSumAgg().     } else if (type == Double.class) {         return (AggregationFunction<T>) new DoubleSumAgg().     } else if (type == DoubleValue.class) {         return (AggregationFunction<T>) new DoubleValueSumAgg().     } else if (type == Float.class) {         return (AggregationFunction<T>) new FloatSumAgg().     } else if (type == FloatValue.class) {         return (AggregationFunction<T>) new FloatValueSumAgg().     } else if (type == Byte.class) {         return (AggregationFunction<T>) new ByteSumAgg().     } else if (type == ByteValue.class) {         return (AggregationFunction<T>) new ByteValueSumAgg().     } else if (type == Short.class) {         return (AggregationFunction<T>) new ShortSumAgg().     } else if (type == ShortValue.class) {         return (AggregationFunction<T>) new ShortValueSumAgg().     } else {         throw new UnsupportedAggregationTypeException("The type " + type.getName() + " is currently not supported for built-in sum aggregations.").     } }
