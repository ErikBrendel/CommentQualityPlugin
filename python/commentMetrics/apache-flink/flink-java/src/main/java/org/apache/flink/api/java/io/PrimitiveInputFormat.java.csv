commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void open(FileInputSplit split) throws IOException {     super.open(split).     Class<? extends FieldParser<OT>> parserType = FieldParser.getParserForType(primitiveClass).     if (parserType == null) {         throw new IllegalArgumentException("The type '" + primitiveClass.getName() + "' is not supported for the primitive input format.").     }     parser = InstantiationUtil.instantiate(parserType, FieldParser.class). }
false;public;4;16;;@Override public OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes) throws IOException {     // Check if \n is used as delimiter and the end of this line is a \r, then remove \r from the line     if (this.getDelimiter().length == 1 && this.getDelimiter()[0] == NEW_LINE && offset + numBytes >= 1 && bytes[offset + numBytes - 1] == CARRIAGE_RETURN) {         numBytes -= 1.     }     // Null character as delimiter is used because there's only 1 field to be parsed     if (parser.resetErrorStateAndParse(bytes, offset, numBytes + offset, new byte[] { '\0' }, reuse) >= 0) {         return parser.getLastResult().     } else {         String s = new String(bytes, offset, numBytes, getCharset()).         throw new IOException("Could not parse value: \"" + s + "\" as type " + primitiveClass.getSimpleName()).     } }
