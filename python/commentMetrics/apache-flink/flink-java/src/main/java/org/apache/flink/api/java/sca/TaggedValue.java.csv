commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getId() {     return id. }
false;public;0;3;;public boolean isInput() {     return tag == Tag.INPUT. }
false;public;0;3;;public boolean isThis() {     return tag == Tag.THIS. }
false;public;0;3;;public boolean isContainer() {     return tag == Tag.CONTAINER. }
false;public;0;3;;public boolean isRegular() {     return tag == Tag.REGULAR. }
false;public;0;3;;public boolean isIntConstant() {     return tag == Tag.INT_CONSTANT. }
false;public;0;3;;public boolean isCollector() {     return tag == Tag.COLLECTOR. }
false;public;0;3;;public boolean isInputIterable() {     return tag == Tag.INPUT_1_ITERABLE || tag == Tag.INPUT_2_ITERABLE. }
false;public;0;3;;public boolean isInputIterator() {     return tag == Tag.INPUT_1_ITERATOR || tag == Tag.INPUT_2_ITERATOR. }
false;public;0;3;;public boolean isInput1Iterable() {     return tag == Tag.INPUT_1_ITERABLE. }
false;public;0;3;;public boolean isInput1Iterator() {     return tag == Tag.INPUT_1_ITERATOR. }
false;public;0;3;;public boolean isIteratorTrueAssumption() {     return tag == Tag.ITERATOR_TRUE_ASSUMPTION. }
false;public;0;3;;public boolean isNull() {     return tag == Tag.NULL. }
false;public;0;3;;public boolean canNotContainInput() {     return tag != Tag.INPUT && tag != Tag.CONTAINER && tag != Tag.THIS. }
false;public;0;3;;public boolean canContainInput() {     return tag == Tag.INPUT || tag == Tag.CONTAINER || tag == Tag.THIS. }
false;public;0;3;;public boolean canContainFields() {     return tag == Tag.CONTAINER || tag == Tag.THIS. }
false;public;0;3;;public boolean isCallByValue() {     return callByValue. }
false;public;0;3;;public Tag getTag() {     return tag. }
false;public;1;15;;public void setTag(Tag tag) {     this.tag = tag.     if (tag == Tag.CONTAINER || tag == Tag.THIS) {         input = null.         flatFieldExpr = null.     } else if (tag == Tag.INPUT) {         containerMapping = null.     } else {         input = null.         containerMapping = null.         flatFieldExpr = null.     } }
false;public;1;24;;public String toForwardedFieldsExpression(Input input) {     // input not relevant     if (isInput() && this.input != input) {         return null.     } else // equivalent to semantic annotation "*" for non-composite types     if (isInput() && flatFieldExpr.length() == 0) {         return "*".     } else // equivalent to "f0.f0->*"     if (isInput()) {         return flatFieldExpr + "->*".     } else // equivalent to "f3.f0.f0->f0.f1.f1->f2...."     if (canContainFields() && containerMapping != null) {         final StringBuilder sb = new StringBuilder().         traverseContainer(input, containerMapping, sb, "").         final String returnValue = sb.toString().         if (returnValue != null && returnValue.length() > 0) {             return returnValue.         }     }     return null. }
false;private;4;31;;private void traverseContainer(Input input, Map<String, TaggedValue> containerMapping, StringBuilder sb, String prefix) {     for (Map.Entry<String, TaggedValue> entry : containerMapping.entrySet()) {         // skip undefined states         if (entry.getValue() == null) {             continue.         } else // input         if (entry.getValue().isInput() && entry.getValue().input == input) {             final String flatFieldExpr = entry.getValue().getFlatFieldExpr().             if (flatFieldExpr.length() == 0) {                 sb.append("*").             } else {                 sb.append(flatFieldExpr).             }             sb.append("->").             if (prefix.length() > 0) {                 sb.append(prefix).                 sb.append('.').             }             sb.append(entry.getKey()).             sb.append('.').         } else // input containers         if (entry.getValue().canContainFields()) {             traverseContainer(input, entry.getValue().containerMapping, sb, ((prefix.length() > 0) ? prefix + "." : "") + entry.getKey()).         }     } }
false;public;1;26;;@Override public boolean equals(Object value) {     if (!(value instanceof TaggedValue) || !super.equals(value)) {         return false.     }     final TaggedValue other = (TaggedValue) value.     if (other.tag != tag) {         return false.     }     if (isInput()) {         return input == other.input && flatFieldExpr.equals(other.flatFieldExpr) && grouped == other.grouped && callByValue == other.callByValue.     } else if (canContainFields()) {         if ((containerMapping == null && other.containerMapping != null) || (containerMapping != null && other.containerMapping == null)) {             return false.         }         if (containerMapping == null) {             return true.         }         return containerMapping.equals(other.containerMapping).     }     return tag == other.tag. }
false;public;0;13;;@Override public String toString() {     if (isInput()) {         return "TaggedValue(" + tag + ":" + flatFieldExpr + ")".     } else if (canContainFields()) {         return "TaggedValue(" + tag + ":" + containerMapping + ")".     } else if (isIntConstant()) {         return "TaggedValue(" + tag + ":" + intConstant + ")".     }     return "TaggedValue(" + tag + ")". }
false;public;0;3;;// -------------------------------------------------------------------------------------------- // Input // -------------------------------------------------------------------------------------------- public Input getInput() {     return input. }
false;public;0;3;;public String getFlatFieldExpr() {     return flatFieldExpr. }
false;public;0;3;;public boolean isGrouped() {     return grouped. }
false;public;0;3;;// -------------------------------------------------------------------------------------------- // Container & This // -------------------------------------------------------------------------------------------- public Map<String, TaggedValue> getContainerMapping() {     return containerMapping. }
false;public;1;6;;public boolean containerContains(String field) {     if (containerMapping == null) {         return false.     }     return containerMapping.containsKey(field). }
false;public;0;11;;public boolean containerHasReferences() {     if (containerMapping == null) {         return false.     }     for (TaggedValue value : containerMapping.values()) {         if (value == null || !value.isCallByValue()) {             return true.         }     }     return false. }
false;public;3;18;;public void addContainerMapping(String field, TaggedValue mapping, ModifiedASMFrame frame) {     if (containerMapping == null) {         containerMapping = new HashMap<String, TaggedValue>(4).     }     if (containerFrameMapping == null) {         containerFrameMapping = new HashMap<String, ModifiedASMFrame>(4).     }     if (containerMapping.containsKey(field) && containerMapping.get(field) != null && frame == containerFrameMapping.get(field)) {         containerMapping.put(field, null).         containerFrameMapping.remove(field).     } else {         containerMapping.put(field, mapping).         containerFrameMapping.put(field, frame).     } }
false;public;0;11;;public void clearContainerMappingMarkedFields() {     if (containerMapping != null) {         final Iterator<Entry<String, TaggedValue>> it = containerMapping.entrySet().iterator().         while (it.hasNext()) {             final Entry<String, TaggedValue> entry = it.next().             if (entry.getValue() == null) {                 it.remove().             }         }     } }
false;public;0;8;;public void makeRegular() {     if (canContainFields() && containerMapping != null) {         for (TaggedValue value : containerMapping.values()) {             value.makeRegular().         }     }     setTag(Tag.REGULAR). }
false;public;0;3;;// -------------------------------------------------------------------------------------------- // IntConstant // -------------------------------------------------------------------------------------------- public int getIntConstant() {     return intConstant. }
false;public;0;3;;public TaggedValue copy() {     return copy(getType()). }
false;public;1;35;;public TaggedValue copy(Type type) {     final TaggedValue newValue = new TaggedValue(type).     newValue.tag = this.tag.     if (isInput()) {         newValue.input = this.input.         newValue.flatFieldExpr = this.flatFieldExpr.         newValue.grouped = this.grouped.         newValue.callByValue = this.callByValue.     } else if (canContainFields()) {         final HashMap<String, TaggedValue> containerMapping = new HashMap<String, TaggedValue>(this.containerMapping.size()).         final HashMap<String, ModifiedASMFrame> containerFrameMapping.         if (this.containerFrameMapping != null) {             containerFrameMapping = new HashMap<String, ModifiedASMFrame>(this.containerFrameMapping.size()).         } else {             containerFrameMapping = null.         }         for (Entry<String, TaggedValue> entry : this.containerMapping.entrySet()) {             if (entry.getValue() != null) {                 containerMapping.put(entry.getKey(), entry.getValue().copy()).                 if (containerFrameMapping != null) {                     containerFrameMapping.put(entry.getKey(), this.containerFrameMapping.get(entry.getKey())).                 }             } else {                 containerMapping.put(entry.getKey(), null).             }         }         newValue.containerMapping = containerMapping.         newValue.containerFrameMapping = containerFrameMapping.     } else if (isIntConstant()) {         newValue.intConstant = this.intConstant.     }     return newValue. }
