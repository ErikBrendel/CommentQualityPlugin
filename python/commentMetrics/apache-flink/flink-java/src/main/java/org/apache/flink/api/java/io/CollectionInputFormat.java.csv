commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean reachedEnd() throws IOException {     return !this.iterator.hasNext(). }
false;public;1;6;;@Override public void open(GenericInputSplit split) throws IOException {     super.open(split).     this.iterator = this.dataSet.iterator(). }
false;public;1;4;;@Override public T nextRecord(T record) throws IOException {     return this.iterator.next(). }
false;private;1;13;;// -------------------------------------------------------------------------------------------- private void writeObject(ObjectOutputStream out) throws IOException {     out.defaultWriteObject().     final int size = dataSet.size().     out.writeInt(size).     if (size > 0) {         DataOutputViewStreamWrapper wrapper = new DataOutputViewStreamWrapper(out).         for (T element : dataSet) {             serializer.serialize(element, wrapper).         }     } }
false;private;1;21;;private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     int collectionLength = in.readInt().     List<T> list = new ArrayList<T>(collectionLength).     if (collectionLength > 0) {         try {             DataInputViewStreamWrapper wrapper = new DataInputViewStreamWrapper(in).             for (int i = 0. i < collectionLength. i++) {                 T element = serializer.deserialize(wrapper).                 list.add(element).             }         } catch (Throwable t) {             throw new IOException("Error while deserializing element from collection", t).         }     }     dataSet = list. }
false;public;0;20;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append('[').     int num = 0.     for (T e : dataSet) {         sb.append(e).         if (num != dataSet.size() - 1) {             sb.append(", ").             if (sb.length() > MAX_TO_STRING_LEN) {                 sb.append("...").                 break.             }         }         num++.     }     sb.append(']').     return sb.toString(). }
false;public,static;2;23;;// -------------------------------------------------------------------------------------------- public static <X> void checkCollection(Collection<X> elements, Class<X> viewedAs) {     if (elements == null || viewedAs == null) {         throw new NullPointerException().     }     for (X elem : elements) {         if (elem == null) {             throw new IllegalArgumentException("The collection must not contain null elements.").         }         // Note: TypeInformationGenTest.testUnit tests this condition.         if (!viewedAs.isAssignableFrom(elem.getClass()) && !(elem.getClass().toString().equals("class scala.runtime.BoxedUnit") && viewedAs.equals(void.class))) {             throw new IllegalArgumentException("The elements in the collection are not all subclasses of " + viewedAs.getCanonicalName()).         }     } }
